// Generated by jextract

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.OptionalLong;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.NativeAllocationScope;

public final class CScope extends NativeAllocationScope {
    private final NativeAllocationScope impl;
    private final List<MemorySegment> segments = new ArrayList<>();

    public CScope() {
        impl = NativeAllocationScope.unboundedScope();
    }

    public CScope(long size) {
        impl = NativeAllocationScope.boundedScope(size);
    }

    @Override
    public OptionalLong byteSize() {
        return impl.byteSize();
    }

    @Override
    public long allocatedBytes() {
        return impl.allocatedBytes();
    }

    @Override
    public MemoryAddress allocate(long bytesSize, long bytesAlignment) {
        return impl.allocate(bytesSize, bytesAlignment);
    }

    @Override
    public void close() {
        for (var seg : segments) {
            seg.close();
        }
        impl.close();
    }

    public MemorySegment register(MemorySegment seg) {
        segments.add(Objects.requireNonNull(seg));
        return seg;
    }
}

