// Generated by jextract

import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryHandles;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import static jdk.incubator.foreign.CSupport.C_POINTER;

public final class Cpointer {
    private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
        return MemoryLayout.ofSequence(elemLayout)
            .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
    }

    public static final MemoryLayout LAYOUT = C_POINTER;
    public static final Class<?> CARRIER = long.class;
    private static final VarHandle handle = MemoryHandles.asAddressVarHandle(LAYOUT.varHandle(CARRIER));
    private static final VarHandle arrayHandle = MemoryHandles.asAddressVarHandle(arrayHandle(LAYOUT, CARRIER));

    public static MemoryAddress asArrayRestricted(MemoryAddress addr, int numPointers) {
        return MemorySegment.ofNativeRestricted(addr, numPointers * LAYOUT.byteSize(),
               Thread.currentThread(), null, null).baseAddress();
    }

    public static MemoryAddress asArray(MemoryAddress addr, int numPointers) {
        var seg = addr.segment();
        if (seg == null) {
            throw new IllegalArgumentException("no underlying segment for the address");
        }
        return seg.asSlice(addr.segmentOffset(), numPointers * LAYOUT.byteSize()).baseAddress();
    }

    public static MemoryAddress get(MemoryAddress addr) {
        return (MemoryAddress) handle.get(addr);
    }

    public static void set(MemoryAddress addr, MemoryAddress value) {
        handle.set(addr, value);
    }

    public static MemoryAddress get(MemoryAddress addr, long index) {
        return (MemoryAddress) arrayHandle.get(addr, index);
    }

    public static void set(MemoryAddress addr, long index, MemoryAddress value) {
        arrayHandle.set(addr, index, value);
    }

    public static MemorySegment allocate(MemoryAddress value) {
        var seg = MemorySegment.allocateNative(LAYOUT);
        handle.set(seg.baseAddress(), value);
        return seg;
    }

    public static MemoryAddress allocate(MemoryAddress value, CScope scope) {
        var addr = scope.allocate(LAYOUT);
        handle.set(addr, value);
        return addr;
    }

    public static MemorySegment allocateArray(int length) {
        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
        return MemorySegment.allocateNative(arrLayout);
    }

    public static MemoryAddress allocateArray(int length, CScope scope) {
        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
        return scope.allocate(arrLayout);
    }

    public static long sizeof() {
        return LAYOUT.byteSize();
    }
}
