// Generated by jextract

import java.lang.invoke.VarHandle;
import java.nio.charset.Charset;
import jdk.incubator.foreign.CSupport;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.NativeScope;
import static jdk.incubator.foreign.CSupport.C_CHAR;

public final class Cstring {
    // don't create!
    private Cstring() {
    }

    private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
        return MemoryLayout.ofSequence(elemLayout)
                .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
    }
    private final static VarHandle byteArrHandle = arrayHandle(C_CHAR, byte.class);

    public static void copy(MemoryAddress addr, String str) {
        copy(addr, str.getBytes());
    }

    public static void copy(MemoryAddress addr, String str, Charset charset) {
        copy(addr, str.getBytes(charset));
    }

    //where
    private static void copy(MemoryAddress addr, byte[] bytes) {
            var heapSegment = MemorySegment.ofArray(bytes);
            addr.segment()
                    .asSlice(addr.segmentOffset(), bytes.length)
                    .copyFrom(heapSegment);
            byteArrHandle.set(addr, (long)bytes.length, (byte)0);
        }

    public static MemorySegment toCString(String str) {
         return CSupport.toCString(str);
    }

    public static MemorySegment toCString(String str, Charset charset) {
         return CSupport.toCString(str, charset);
    }

    public static MemoryAddress toCString(String str, NativeScope scope) {
        return CSupport.toCString(str, scope);
    }

    public static MemoryAddress toCString(String str, Charset charset, NativeScope scope) {
        return CSupport.toCString(str, charset, scope);
    }

    public static String toJavaStringRestricted(MemoryAddress addr) {
        return CSupport.toJavaStringRestricted(addr);
    }

    public static String toJavaString(MemoryAddress addr) {
        return CSupport.toJavaString(addr);
    }
}
