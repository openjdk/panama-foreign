// Generated by jextract

import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.AllocationScope;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;

import static ${C_LANG}.*;

public final class C-X {
    // don't create!
    private C-X() {
    }

    private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
        return MemoryLayout.ofSequence(elemLayout)
                 .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
    }

    public static final MemoryLayout LAYOUT = ${LAYOUT};
    public static final Class<?> CARRIER = ${CARRIER}.class;
    private static final VarHandle handle = LAYOUT.varHandle(CARRIER);
    private static final VarHandle arrayHandle = arrayHandle(LAYOUT, CARRIER);

    public static ${CARRIER} get(MemoryAddress addr) {
        return (${CARRIER}) handle.get(addr);
    }

    public static void set(MemoryAddress addr, ${CARRIER} value) {
        handle.set(addr, value);
    }

    public static ${CARRIER} get(MemoryAddress addr, long index) {
        return (${CARRIER}) arrayHandle.get(addr, index);
    }

    public static void set(MemoryAddress addr, long index, ${CARRIER} value) {
        arrayHandle.set(addr, index, value);
    }

    public static MemorySegment allocate(${CARRIER} value) {
        var seg = MemorySegment.allocateNative(LAYOUT);
        handle.set(seg.baseAddress(), value);
        return seg;
    }

    public static MemoryAddress allocate(${CARRIER} value, AllocationScope scope) {
        var addr = scope.allocate(LAYOUT);
        handle.set(addr, value);
        return addr;
    }

    public static MemorySegment allocateArray(${CARRIER}[] arr) {
        var arrLayout = MemoryLayout.ofSequence(arr.length, LAYOUT);
        var seg = MemorySegment.allocateNative(arrLayout);
        copy(seg.baseAddress(), arr);
        return seg;
    }

    public static MemoryAddress allocateArray(${CARRIER}[] arr, AllocationScope scope) {
        var arrLayout = MemoryLayout.ofSequence(arr.length, LAYOUT);
        var addr = scope.allocate(arrLayout);
        copy(addr, arr);
        return addr;
    }

    public static long sizeof() {
        return LAYOUT.byteSize();
    }

    private static void copy(MemoryAddress addr, ${CARRIER}[] arr) {
        for (int i = 0 ; i < arr.length; i++) {
            arrayHandle.set(addr, (long)i, arr[i]);
        }
    }
}
