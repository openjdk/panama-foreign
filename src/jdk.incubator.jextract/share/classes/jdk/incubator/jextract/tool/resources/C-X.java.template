// Generated by jextract

import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.NativeAllocationScope;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;

import static ${C_LANG}.*;

public class C-X {
    // don't create!
    C-X() {
    }

    private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
        return MemoryLayout.ofSequence(elemLayout)
                 .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
    }

    public static final MemoryLayout LAYOUT = ${LAYOUT};
    public static final Class<?> CARRIER = ${CARRIER}.class;
    private static final VarHandle handle = LAYOUT.varHandle(CARRIER);
    private static final VarHandle arrayHandle = arrayHandle(LAYOUT, CARRIER);

    public static MemoryAddress asArray(MemoryAddress addr, int numElements) {
        return MemorySegment.ofNativeRestricted(addr, numElements * LAYOUT.byteSize(),
               Thread.currentThread(), null, null).baseAddress();
    }

    public static ${CARRIER} get(MemoryAddress addr) {
        return (${CARRIER}) handle.get(addr);
    }

    public static void set(MemoryAddress addr, ${CARRIER} value) {
        handle.set(addr, value);
    }

    public static ${CARRIER} get(MemoryAddress addr, long index) {
        return (${CARRIER}) arrayHandle.get(addr, index);
    }

    public static void set(MemoryAddress addr, long index, ${CARRIER} value) {
        arrayHandle.set(addr, index, value);
    }

    public static MemorySegment allocate(${CARRIER} value) {
        var seg = MemorySegment.allocateNative(LAYOUT);
        handle.set(seg.baseAddress(), value);
        return seg;
    }

    public static MemoryAddress allocate(${CARRIER} value, NativeAllocationScope scope) {
        var addr = scope.allocate(LAYOUT);
        handle.set(addr, value);
        return addr;
    }

    public static MemorySegment allocateArray(int length) {
        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
        return MemorySegment.allocateNative(arrLayout);
    }

    public static MemoryAddress allocateArray(int length, NativeAllocationScope scope) {
        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
        return scope.allocate(arrLayout);
    }

    public static MemorySegment allocateArray(${CARRIER}[] arr) {
        var arrLayout = MemoryLayout.ofSequence(arr.length, LAYOUT);
        var seg = MemorySegment.allocateNative(arrLayout);
        seg.copyFrom(MemorySegment.ofArray(arr));
        return seg;
    }

    public static MemoryAddress allocateArray(${CARRIER}[] arr, NativeAllocationScope scope) {
        var arrLayout = MemoryLayout.ofSequence(arr.length, LAYOUT);
        var addr = scope.allocate(arrLayout);
        addr.segment().copyFrom(MemorySegment.ofArray(arr));
        return addr;
    }

    public static long sizeof() {
        return LAYOUT.byteSize();
    }

    public static ${CARRIER}[] toJavaArray(MemorySegment seg) {
        var segSize = seg.byteSize();
        var elemSize = sizeof();
        if (segSize % elemSize != 0) {
            throw new UnsupportedOperationException("segment cannot contain integral number of elements");
        }
        ${CARRIER}[] array = new ${CARRIER}[(int) (segSize / elemSize)];
        MemorySegment.ofArray(array).copyFrom(seg);
        return array;
    }
}
