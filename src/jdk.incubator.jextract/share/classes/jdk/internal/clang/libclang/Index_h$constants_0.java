/*
 *  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 *  This code is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License version 2 only, as
 *  published by the Free Software Foundation.  Oracle designates this
 *  particular file as subject to the "Classpath" exception as provided
 *  by Oracle in the LICENSE file that accompanied this code.
 *
 *  This code is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 *  version 2 for more details (a copy is included in the LICENSE file that
 *  accompanied this code).
 *
 *  You should have received a copy of the GNU General Public License version
 *  2 along with this work; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 *  or visit www.oracle.com if you need additional information or have any
 *  questions.
 *
 */

// Generated by jextract

package jdk.internal.clang.libclang;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;

class Index_h$constants_0 {
    Index_h$constants_0() {}

    // Manual change to handle platform specific library name difference
    private static String libName() {
        if (System.getProperty("os.name").startsWith("Windows")) {
            return "libclang";
        }
        return "clang";
    }

    static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {
        libName()
    });

    static final int CINDEX_VERSION_MAJOR() { return (int)0L; }

    static final int CINDEX_VERSION_MINOR() { return (int)59L; }

    static final int CXError_Success() { return (int)0L; }

    static final int CXError_Failure() { return (int)1L; }

    static final int CXError_Crashed() { return (int)2L; }

    static final int CXError_InvalidArguments() { return (int)3L; }

    static final int CXError_ASTReadError() { return (int)4L; }

    static final MemoryLayout CXString$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout CXString$struct$LAYOUT() { return CXString$struct$LAYOUT_; }

    static final MemoryLayout CXString$data$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXString$data$LAYOUT() { return CXString$data$LAYOUT_; }

    static final VarHandle CXString$data$VH_ = MemoryHandles.asAddressVarHandle(CXString$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("data")));
    static final java.lang.invoke.VarHandle CXString$data$VH() { return CXString$data$VH_; }

    static final MemoryLayout CXString$private_flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXString$private_flags$LAYOUT() { return CXString$private_flags$LAYOUT_; }

    static final VarHandle CXString$private_flags$VH_ = CXString$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("private_flags"));
    static final java.lang.invoke.VarHandle CXString$private_flags$VH() { return CXString$private_flags$VH_; }

    static final MemoryLayout CXStringSet$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Strings"),
        C_INT.withName("Count"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout CXStringSet$struct$LAYOUT() { return CXStringSet$struct$LAYOUT_; }

    static final MemoryLayout CXStringSet$Strings$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXStringSet$Strings$LAYOUT() { return CXStringSet$Strings$LAYOUT_; }

    static final VarHandle CXStringSet$Strings$VH_ = MemoryHandles.asAddressVarHandle(CXStringSet$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Strings")));
    static final java.lang.invoke.VarHandle CXStringSet$Strings$VH() { return CXStringSet$Strings$VH_; }

    static final MemoryLayout CXStringSet$Count$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXStringSet$Count$LAYOUT() { return CXStringSet$Count$LAYOUT_; }

    static final VarHandle CXStringSet$Count$VH_ = CXStringSet$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle CXStringSet$Count$VH() { return CXStringSet$Count$VH_; }

    static final FunctionDescriptor clang_getCString$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCString$FUNC() { return clang_getCString$FUNC_; }

    static final MethodHandle clang_getCString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCString",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getCString$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCString$MH() { return clang_getCString$MH_; }

    static final FunctionDescriptor clang_disposeString$FUNC_ = FunctionDescriptor.ofVoid(
        MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeString$FUNC() { return clang_disposeString$FUNC_; }

    static final MethodHandle clang_disposeString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeString",
        "(Ljdk/incubator/foreign/MemorySegment;)V",
        clang_disposeString$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_disposeString$MH() { return clang_disposeString$MH_; }

    static final FunctionDescriptor clang_disposeStringSet$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeStringSet$FUNC() { return clang_disposeStringSet$FUNC_; }

    static final MethodHandle clang_disposeStringSet$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeStringSet",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_disposeStringSet$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_disposeStringSet$MH() { return clang_disposeStringSet$MH_; }

    static final MemoryLayout CXUnsavedFile$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Filename"),
        C_POINTER.withName("Contents"),
        C_LONG_LONG.withName("Length")
    ).withName("CXUnsavedFile");
    static final jdk.incubator.foreign.MemoryLayout CXUnsavedFile$struct$LAYOUT() { return CXUnsavedFile$struct$LAYOUT_; }

    static final MemoryLayout CXUnsavedFile$Filename$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXUnsavedFile$Filename$LAYOUT() { return CXUnsavedFile$Filename$LAYOUT_; }

    static final VarHandle CXUnsavedFile$Filename$VH_ = MemoryHandles.asAddressVarHandle(CXUnsavedFile$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Filename")));
    static final java.lang.invoke.VarHandle CXUnsavedFile$Filename$VH() { return CXUnsavedFile$Filename$VH_; }

    static final MemoryLayout CXUnsavedFile$Contents$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXUnsavedFile$Contents$LAYOUT() { return CXUnsavedFile$Contents$LAYOUT_; }

    static final VarHandle CXUnsavedFile$Contents$VH_ = MemoryHandles.asAddressVarHandle(CXUnsavedFile$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Contents")));
    static final java.lang.invoke.VarHandle CXUnsavedFile$Contents$VH() { return CXUnsavedFile$Contents$VH_; }

    static final MemoryLayout CXUnsavedFile$Length$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout CXUnsavedFile$Length$LAYOUT() { return CXUnsavedFile$Length$LAYOUT_; }

    static final VarHandle CXUnsavedFile$Length$VH_ = CXUnsavedFile$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle CXUnsavedFile$Length$VH() { return CXUnsavedFile$Length$VH_; }

    static final int CXAvailability_Available() { return (int)0L; }

    static final int CXAvailability_Deprecated() { return (int)1L; }

    static final int CXAvailability_NotAvailable() { return (int)2L; }

    static final int CXAvailability_NotAccessible() { return (int)3L; }

    static final MemoryLayout CXVersion$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Major"),
        C_INT.withName("Minor"),
        C_INT.withName("Subminor")
    ).withName("CXVersion");
    static final jdk.incubator.foreign.MemoryLayout CXVersion$struct$LAYOUT() { return CXVersion$struct$LAYOUT_; }

    static final MemoryLayout CXVersion$Major$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXVersion$Major$LAYOUT() { return CXVersion$Major$LAYOUT_; }

    static final VarHandle CXVersion$Major$VH_ = CXVersion$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Major"));
    static final java.lang.invoke.VarHandle CXVersion$Major$VH() { return CXVersion$Major$VH_; }

    static final MemoryLayout CXVersion$Minor$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXVersion$Minor$LAYOUT() { return CXVersion$Minor$LAYOUT_; }

    static final VarHandle CXVersion$Minor$VH_ = CXVersion$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Minor"));
    static final java.lang.invoke.VarHandle CXVersion$Minor$VH() { return CXVersion$Minor$VH_; }

    static final MemoryLayout CXVersion$Subminor$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXVersion$Subminor$LAYOUT() { return CXVersion$Subminor$LAYOUT_; }

    static final VarHandle CXVersion$Subminor$VH_ = CXVersion$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Subminor"));
    static final java.lang.invoke.VarHandle CXVersion$Subminor$VH() { return CXVersion$Subminor$VH_; }

    static final int CXCursor_ExceptionSpecificationKind_None() { return (int)0L; }

    static final int CXCursor_ExceptionSpecificationKind_DynamicNone() { return (int)1L; }

    static final int CXCursor_ExceptionSpecificationKind_Dynamic() { return (int)2L; }

    static final int CXCursor_ExceptionSpecificationKind_MSAny() { return (int)3L; }

    static final int CXCursor_ExceptionSpecificationKind_BasicNoexcept() { return (int)4L; }

    static final int CXCursor_ExceptionSpecificationKind_ComputedNoexcept() { return (int)5L; }

    static final int CXCursor_ExceptionSpecificationKind_Unevaluated() { return (int)6L; }

    static final int CXCursor_ExceptionSpecificationKind_Uninstantiated() { return (int)7L; }

    static final int CXCursor_ExceptionSpecificationKind_Unparsed() { return (int)8L; }

    static final int CXCursor_ExceptionSpecificationKind_NoThrow() { return (int)9L; }

    static final FunctionDescriptor clang_createIndex$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_createIndex$FUNC() { return clang_createIndex$FUNC_; }

    static final MethodHandle clang_createIndex$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_createIndex",
        "(II)Ljdk/incubator/foreign/MemoryAddress;",
        clang_createIndex$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_createIndex$MH() { return clang_createIndex$MH_; }

    static final FunctionDescriptor clang_disposeIndex$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeIndex$FUNC() { return clang_disposeIndex$FUNC_; }

    static final MethodHandle clang_disposeIndex$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeIndex",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_disposeIndex$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_disposeIndex$MH() { return clang_disposeIndex$MH_; }

    static final int CXGlobalOpt_None() { return (int)0L; }

    static final int CXGlobalOpt_ThreadBackgroundPriorityForIndexing() { return (int)1L; }

    static final int CXGlobalOpt_ThreadBackgroundPriorityForEditing() { return (int)2L; }

    static final int CXGlobalOpt_ThreadBackgroundPriorityForAll() { return (int)3L; }

    static final FunctionDescriptor clang_CXIndex_setGlobalOptions$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXIndex_setGlobalOptions$FUNC() { return clang_CXIndex_setGlobalOptions$FUNC_; }

    static final MethodHandle clang_CXIndex_setGlobalOptions$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXIndex_setGlobalOptions",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        clang_CXIndex_setGlobalOptions$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXIndex_setGlobalOptions$MH() { return clang_CXIndex_setGlobalOptions$MH_; }

    static final FunctionDescriptor clang_CXIndex_getGlobalOptions$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXIndex_getGlobalOptions$FUNC() { return clang_CXIndex_getGlobalOptions$FUNC_; }

    static final MethodHandle clang_CXIndex_getGlobalOptions$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXIndex_getGlobalOptions",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_CXIndex_getGlobalOptions$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXIndex_getGlobalOptions$MH() { return clang_CXIndex_getGlobalOptions$MH_; }

    static final FunctionDescriptor clang_CXIndex_setInvocationEmissionPathOption$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXIndex_setInvocationEmissionPathOption$FUNC() { return clang_CXIndex_setInvocationEmissionPathOption$FUNC_; }

    static final MethodHandle clang_CXIndex_setInvocationEmissionPathOption$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXIndex_setInvocationEmissionPathOption",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_CXIndex_setInvocationEmissionPathOption$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXIndex_setInvocationEmissionPathOption$MH() { return clang_CXIndex_setInvocationEmissionPathOption$MH_; }

    static final FunctionDescriptor clang_getFileName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getFileName$FUNC() { return clang_getFileName$FUNC_; }

    static final MethodHandle clang_getFileName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFileName",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getFileName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getFileName$MH() { return clang_getFileName$MH_; }

    static final FunctionDescriptor clang_getFileTime$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getFileTime$FUNC() { return clang_getFileTime$FUNC_; }

    static final MethodHandle clang_getFileTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFileTime",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        clang_getFileTime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getFileTime$MH() { return clang_getFileTime$MH_; }

    static final MemoryLayout CXFileUniqueID$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(3, C_LONG_LONG).withName("data")
    );
    static final jdk.incubator.foreign.MemoryLayout CXFileUniqueID$struct$LAYOUT() { return CXFileUniqueID$struct$LAYOUT_; }

    static final FunctionDescriptor clang_getFileUniqueID$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getFileUniqueID$FUNC() { return clang_getFileUniqueID$FUNC_; }

    static final MethodHandle clang_getFileUniqueID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFileUniqueID",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_getFileUniqueID$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getFileUniqueID$MH() { return clang_getFileUniqueID$MH_; }

    static final FunctionDescriptor clang_isFileMultipleIncludeGuarded$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isFileMultipleIncludeGuarded$FUNC() { return clang_isFileMultipleIncludeGuarded$FUNC_; }

    static final MethodHandle clang_isFileMultipleIncludeGuarded$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isFileMultipleIncludeGuarded",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_isFileMultipleIncludeGuarded$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isFileMultipleIncludeGuarded$MH() { return clang_isFileMultipleIncludeGuarded$MH_; }

    static final FunctionDescriptor clang_getFile$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getFile$FUNC() { return clang_getFile$FUNC_; }

    static final MethodHandle clang_getFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getFile$MH() { return clang_getFile$MH_; }

    static final FunctionDescriptor clang_getFileContents$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getFileContents$FUNC() { return clang_getFileContents$FUNC_; }

    static final MethodHandle clang_getFileContents$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFileContents",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getFileContents$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getFileContents$MH() { return clang_getFileContents$MH_; }

    static final FunctionDescriptor clang_File_isEqual$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_File_isEqual$FUNC() { return clang_File_isEqual$FUNC_; }

    static final MethodHandle clang_File_isEqual$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_File_isEqual",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_File_isEqual$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_File_isEqual$MH() { return clang_File_isEqual$MH_; }

    static final FunctionDescriptor clang_File_tryGetRealPathName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_File_tryGetRealPathName$FUNC() { return clang_File_tryGetRealPathName$FUNC_; }

    static final MethodHandle clang_File_tryGetRealPathName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_File_tryGetRealPathName",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_File_tryGetRealPathName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_File_tryGetRealPathName$MH() { return clang_File_tryGetRealPathName$MH_; }

    static final MemoryLayout CXSourceLocation$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout CXSourceLocation$struct$LAYOUT() { return CXSourceLocation$struct$LAYOUT_; }

    static final MemoryLayout CXSourceLocation$int_data$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXSourceLocation$int_data$LAYOUT() { return CXSourceLocation$int_data$LAYOUT_; }

    static final VarHandle CXSourceLocation$int_data$VH_ = CXSourceLocation$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("int_data"));
    static final java.lang.invoke.VarHandle CXSourceLocation$int_data$VH() { return CXSourceLocation$int_data$VH_; }

    static final MemoryLayout CXSourceRange$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("begin_int_data"),
        C_INT.withName("end_int_data")
    );
    static final jdk.incubator.foreign.MemoryLayout CXSourceRange$struct$LAYOUT() { return CXSourceRange$struct$LAYOUT_; }

    static final MemoryLayout CXSourceRange$begin_int_data$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXSourceRange$begin_int_data$LAYOUT() { return CXSourceRange$begin_int_data$LAYOUT_; }

    static final VarHandle CXSourceRange$begin_int_data$VH_ = CXSourceRange$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("begin_int_data"));
    static final java.lang.invoke.VarHandle CXSourceRange$begin_int_data$VH() { return CXSourceRange$begin_int_data$VH_; }

    static final MemoryLayout CXSourceRange$end_int_data$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXSourceRange$end_int_data$LAYOUT() { return CXSourceRange$end_int_data$LAYOUT_; }

    static final VarHandle CXSourceRange$end_int_data$VH_ = CXSourceRange$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("end_int_data"));
    static final java.lang.invoke.VarHandle CXSourceRange$end_int_data$VH() { return CXSourceRange$end_int_data$VH_; }

    static final FunctionDescriptor clang_getNullLocation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    ));
    static final jdk.incubator.foreign.FunctionDescriptor clang_getNullLocation$FUNC() { return clang_getNullLocation$FUNC_; }

    static final MethodHandle clang_getNullLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNullLocation",
        "()Ljdk/incubator/foreign/MemorySegment;",
        clang_getNullLocation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getNullLocation$MH() { return clang_getNullLocation$MH_; }

    static final FunctionDescriptor clang_equalLocations$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_equalLocations$FUNC() { return clang_equalLocations$FUNC_; }

    static final MethodHandle clang_equalLocations$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_equalLocations",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
        clang_equalLocations$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_equalLocations$MH() { return clang_equalLocations$MH_; }

    static final FunctionDescriptor clang_getLocation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getLocation$FUNC() { return clang_getLocation$FUNC_; }

    static final MethodHandle clang_getLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getLocation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemorySegment;",
        clang_getLocation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getLocation$MH() { return clang_getLocation$MH_; }

    static final FunctionDescriptor clang_getLocationForOffset$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getLocationForOffset$FUNC() { return clang_getLocationForOffset$FUNC_; }

    static final MethodHandle clang_getLocationForOffset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getLocationForOffset",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_getLocationForOffset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getLocationForOffset$MH() { return clang_getLocationForOffset$MH_; }

    static final FunctionDescriptor clang_Location_isInSystemHeader$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Location_isInSystemHeader$FUNC() { return clang_Location_isInSystemHeader$FUNC_; }

    static final MethodHandle clang_Location_isInSystemHeader$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Location_isInSystemHeader",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Location_isInSystemHeader$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Location_isInSystemHeader$MH() { return clang_Location_isInSystemHeader$MH_; }

    static final FunctionDescriptor clang_Location_isFromMainFile$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Location_isFromMainFile$FUNC() { return clang_Location_isFromMainFile$FUNC_; }

    static final MethodHandle clang_Location_isFromMainFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Location_isFromMainFile",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Location_isFromMainFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Location_isFromMainFile$MH() { return clang_Location_isFromMainFile$MH_; }

    static final FunctionDescriptor clang_getNullRange$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("begin_int_data"),
        C_INT.withName("end_int_data")
    ));
    static final jdk.incubator.foreign.FunctionDescriptor clang_getNullRange$FUNC() { return clang_getNullRange$FUNC_; }

    static final MethodHandle clang_getNullRange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNullRange",
        "()Ljdk/incubator/foreign/MemorySegment;",
        clang_getNullRange$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getNullRange$MH() { return clang_getNullRange$MH_; }

    static final FunctionDescriptor clang_getRange$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("begin_int_data"),
        C_INT.withName("end_int_data")
    ),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getRange$FUNC() { return clang_getRange$FUNC_; }

    static final MethodHandle clang_getRange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getRange",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getRange$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getRange$MH() { return clang_getRange$MH_; }

    static final FunctionDescriptor clang_equalRanges$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        ),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_equalRanges$FUNC() { return clang_equalRanges$FUNC_; }

    static final MethodHandle clang_equalRanges$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_equalRanges",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
        clang_equalRanges$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_equalRanges$MH() { return clang_equalRanges$MH_; }

    static final FunctionDescriptor clang_Range_isNull$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Range_isNull$FUNC() { return clang_Range_isNull$FUNC_; }

    static final MethodHandle clang_Range_isNull$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Range_isNull",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Range_isNull$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Range_isNull$MH() { return clang_Range_isNull$MH_; }

    static final FunctionDescriptor clang_getExpansionLocation$FUNC_ = FunctionDescriptor.ofVoid(
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getExpansionLocation$FUNC() { return clang_getExpansionLocation$FUNC_; }

    static final MethodHandle clang_getExpansionLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getExpansionLocation",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_getExpansionLocation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getExpansionLocation$MH() { return clang_getExpansionLocation$MH_; }

    static final FunctionDescriptor clang_getPresumedLocation$FUNC_ = FunctionDescriptor.ofVoid(
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getPresumedLocation$FUNC() { return clang_getPresumedLocation$FUNC_; }

    static final MethodHandle clang_getPresumedLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getPresumedLocation",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_getPresumedLocation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getPresumedLocation$MH() { return clang_getPresumedLocation$MH_; }

    static final FunctionDescriptor clang_getInstantiationLocation$FUNC_ = FunctionDescriptor.ofVoid(
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getInstantiationLocation$FUNC() { return clang_getInstantiationLocation$FUNC_; }

    static final MethodHandle clang_getInstantiationLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getInstantiationLocation",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_getInstantiationLocation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getInstantiationLocation$MH() { return clang_getInstantiationLocation$MH_; }

    static final FunctionDescriptor clang_getSpellingLocation$FUNC_ = FunctionDescriptor.ofVoid(
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getSpellingLocation$FUNC() { return clang_getSpellingLocation$FUNC_; }

    static final MethodHandle clang_getSpellingLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getSpellingLocation",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_getSpellingLocation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getSpellingLocation$MH() { return clang_getSpellingLocation$MH_; }

    static final FunctionDescriptor clang_getFileLocation$FUNC_ = FunctionDescriptor.ofVoid(
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getFileLocation$FUNC() { return clang_getFileLocation$FUNC_; }

    static final MethodHandle clang_getFileLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFileLocation",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_getFileLocation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getFileLocation$MH() { return clang_getFileLocation$MH_; }

    static final FunctionDescriptor clang_getRangeStart$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getRangeStart$FUNC() { return clang_getRangeStart$FUNC_; }

    static final MethodHandle clang_getRangeStart$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getRangeStart",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getRangeStart$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getRangeStart$MH() { return clang_getRangeStart$MH_; }

    static final FunctionDescriptor clang_getRangeEnd$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getRangeEnd$FUNC() { return clang_getRangeEnd$FUNC_; }

    static final MethodHandle clang_getRangeEnd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getRangeEnd",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getRangeEnd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getRangeEnd$MH() { return clang_getRangeEnd$MH_; }

    static final MemoryLayout CXSourceRangeList$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("count"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("ranges")
    );
    static final jdk.incubator.foreign.MemoryLayout CXSourceRangeList$struct$LAYOUT() { return CXSourceRangeList$struct$LAYOUT_; }

    static final MemoryLayout CXSourceRangeList$count$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXSourceRangeList$count$LAYOUT() { return CXSourceRangeList$count$LAYOUT_; }

    static final VarHandle CXSourceRangeList$count$VH_ = CXSourceRangeList$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("count"));
    static final java.lang.invoke.VarHandle CXSourceRangeList$count$VH() { return CXSourceRangeList$count$VH_; }

    static final MemoryLayout CXSourceRangeList$ranges$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXSourceRangeList$ranges$LAYOUT() { return CXSourceRangeList$ranges$LAYOUT_; }

    static final VarHandle CXSourceRangeList$ranges$VH_ = MemoryHandles.asAddressVarHandle(CXSourceRangeList$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ranges")));
    static final java.lang.invoke.VarHandle CXSourceRangeList$ranges$VH() { return CXSourceRangeList$ranges$VH_; }

    static final FunctionDescriptor clang_getSkippedRanges$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getSkippedRanges$FUNC() { return clang_getSkippedRanges$FUNC_; }

    static final MethodHandle clang_getSkippedRanges$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getSkippedRanges",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getSkippedRanges$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getSkippedRanges$MH() { return clang_getSkippedRanges$MH_; }

    static final FunctionDescriptor clang_getAllSkippedRanges$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getAllSkippedRanges$FUNC() { return clang_getAllSkippedRanges$FUNC_; }

    static final MethodHandle clang_getAllSkippedRanges$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getAllSkippedRanges",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getAllSkippedRanges$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getAllSkippedRanges$MH() { return clang_getAllSkippedRanges$MH_; }

    static final FunctionDescriptor clang_disposeSourceRangeList$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeSourceRangeList$FUNC() { return clang_disposeSourceRangeList$FUNC_; }

    static final MethodHandle clang_disposeSourceRangeList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeSourceRangeList",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_disposeSourceRangeList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_disposeSourceRangeList$MH() { return clang_disposeSourceRangeList$MH_; }

    static final int CXDiagnostic_Ignored() { return (int)0L; }

    static final int CXDiagnostic_Note() { return (int)1L; }

    static final int CXDiagnostic_Warning() { return (int)2L; }

    static final int CXDiagnostic_Error() { return (int)3L; }

    static final int CXDiagnostic_Fatal() { return (int)4L; }

    static final FunctionDescriptor clang_getNumDiagnosticsInSet$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getNumDiagnosticsInSet$FUNC() { return clang_getNumDiagnosticsInSet$FUNC_; }

    static final MethodHandle clang_getNumDiagnosticsInSet$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumDiagnosticsInSet",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_getNumDiagnosticsInSet$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getNumDiagnosticsInSet$MH() { return clang_getNumDiagnosticsInSet$MH_; }

    static final FunctionDescriptor clang_getDiagnosticInSet$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticInSet$FUNC() { return clang_getDiagnosticInSet$FUNC_; }

    static final MethodHandle clang_getDiagnosticInSet$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticInSet",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getDiagnosticInSet$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDiagnosticInSet$MH() { return clang_getDiagnosticInSet$MH_; }

    static final int CXLoadDiag_None() { return (int)0L; }

    static final int CXLoadDiag_Unknown() { return (int)1L; }

    static final int CXLoadDiag_CannotLoad() { return (int)2L; }

    static final int CXLoadDiag_InvalidFile() { return (int)3L; }

    static final FunctionDescriptor clang_loadDiagnostics$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_loadDiagnostics$FUNC() { return clang_loadDiagnostics$FUNC_; }

    static final MethodHandle clang_loadDiagnostics$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_loadDiagnostics",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_loadDiagnostics$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_loadDiagnostics$MH() { return clang_loadDiagnostics$MH_; }

    static final FunctionDescriptor clang_disposeDiagnosticSet$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeDiagnosticSet$FUNC() { return clang_disposeDiagnosticSet$FUNC_; }

    static final MethodHandle clang_disposeDiagnosticSet$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeDiagnosticSet",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_disposeDiagnosticSet$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_disposeDiagnosticSet$MH() { return clang_disposeDiagnosticSet$MH_; }

    static final FunctionDescriptor clang_getChildDiagnostics$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getChildDiagnostics$FUNC() { return clang_getChildDiagnostics$FUNC_; }

    static final MethodHandle clang_getChildDiagnostics$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getChildDiagnostics",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getChildDiagnostics$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getChildDiagnostics$MH() { return clang_getChildDiagnostics$MH_; }

    static final FunctionDescriptor clang_getNumDiagnostics$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getNumDiagnostics$FUNC() { return clang_getNumDiagnostics$FUNC_; }

    static final MethodHandle clang_getNumDiagnostics$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumDiagnostics",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_getNumDiagnostics$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getNumDiagnostics$MH() { return clang_getNumDiagnostics$MH_; }

    static final FunctionDescriptor clang_getDiagnostic$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnostic$FUNC() { return clang_getDiagnostic$FUNC_; }

    static final MethodHandle clang_getDiagnostic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnostic",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getDiagnostic$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDiagnostic$MH() { return clang_getDiagnostic$MH_; }

    static final FunctionDescriptor clang_getDiagnosticSetFromTU$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticSetFromTU$FUNC() { return clang_getDiagnosticSetFromTU$FUNC_; }

    static final MethodHandle clang_getDiagnosticSetFromTU$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticSetFromTU",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getDiagnosticSetFromTU$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDiagnosticSetFromTU$MH() { return clang_getDiagnosticSetFromTU$MH_; }

    static final FunctionDescriptor clang_disposeDiagnostic$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeDiagnostic$FUNC() { return clang_disposeDiagnostic$FUNC_; }

    static final MethodHandle clang_disposeDiagnostic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeDiagnostic",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_disposeDiagnostic$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_disposeDiagnostic$MH() { return clang_disposeDiagnostic$MH_; }

    static final int CXDiagnostic_DisplaySourceLocation() { return (int)1L; }

    static final int CXDiagnostic_DisplayColumn() { return (int)2L; }

    static final int CXDiagnostic_DisplaySourceRanges() { return (int)4L; }

    static final int CXDiagnostic_DisplayOption() { return (int)8L; }

    static final int CXDiagnostic_DisplayCategoryId() { return (int)16L; }

    static final int CXDiagnostic_DisplayCategoryName() { return (int)32L; }

    static final FunctionDescriptor clang_formatDiagnostic$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_formatDiagnostic$FUNC() { return clang_formatDiagnostic$FUNC_; }

    static final MethodHandle clang_formatDiagnostic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_formatDiagnostic",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_formatDiagnostic$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_formatDiagnostic$MH() { return clang_formatDiagnostic$MH_; }

    static final FunctionDescriptor clang_defaultDiagnosticDisplayOptions$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor clang_defaultDiagnosticDisplayOptions$FUNC() { return clang_defaultDiagnosticDisplayOptions$FUNC_; }

    static final MethodHandle clang_defaultDiagnosticDisplayOptions$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_defaultDiagnosticDisplayOptions",
        "()I",
        clang_defaultDiagnosticDisplayOptions$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_defaultDiagnosticDisplayOptions$MH() { return clang_defaultDiagnosticDisplayOptions$MH_; }

    static final FunctionDescriptor clang_getDiagnosticSeverity$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticSeverity$FUNC() { return clang_getDiagnosticSeverity$FUNC_; }

    static final MethodHandle clang_getDiagnosticSeverity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticSeverity",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_getDiagnosticSeverity$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDiagnosticSeverity$MH() { return clang_getDiagnosticSeverity$MH_; }

    static final FunctionDescriptor clang_getDiagnosticLocation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticLocation$FUNC() { return clang_getDiagnosticLocation$FUNC_; }

    static final MethodHandle clang_getDiagnosticLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticLocation",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getDiagnosticLocation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDiagnosticLocation$MH() { return clang_getDiagnosticLocation$MH_; }

    static final FunctionDescriptor clang_getDiagnosticSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticSpelling$FUNC() { return clang_getDiagnosticSpelling$FUNC_; }

    static final MethodHandle clang_getDiagnosticSpelling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticSpelling",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getDiagnosticSpelling$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDiagnosticSpelling$MH() { return clang_getDiagnosticSpelling$MH_; }

    static final FunctionDescriptor clang_getDiagnosticOption$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticOption$FUNC() { return clang_getDiagnosticOption$FUNC_; }

    static final MethodHandle clang_getDiagnosticOption$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticOption",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getDiagnosticOption$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDiagnosticOption$MH() { return clang_getDiagnosticOption$MH_; }

    static final FunctionDescriptor clang_getDiagnosticCategory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticCategory$FUNC() { return clang_getDiagnosticCategory$FUNC_; }

    static final MethodHandle clang_getDiagnosticCategory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticCategory",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_getDiagnosticCategory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDiagnosticCategory$MH() { return clang_getDiagnosticCategory$MH_; }

    static final FunctionDescriptor clang_getDiagnosticCategoryName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticCategoryName$FUNC() { return clang_getDiagnosticCategoryName$FUNC_; }

    static final MethodHandle clang_getDiagnosticCategoryName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticCategoryName",
        "(I)Ljdk/incubator/foreign/MemorySegment;",
        clang_getDiagnosticCategoryName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDiagnosticCategoryName$MH() { return clang_getDiagnosticCategoryName$MH_; }

    static final FunctionDescriptor clang_getDiagnosticCategoryText$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticCategoryText$FUNC() { return clang_getDiagnosticCategoryText$FUNC_; }

    static final MethodHandle clang_getDiagnosticCategoryText$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticCategoryText",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getDiagnosticCategoryText$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDiagnosticCategoryText$MH() { return clang_getDiagnosticCategoryText$MH_; }

    static final FunctionDescriptor clang_getDiagnosticNumRanges$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticNumRanges$FUNC() { return clang_getDiagnosticNumRanges$FUNC_; }

    static final MethodHandle clang_getDiagnosticNumRanges$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticNumRanges",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_getDiagnosticNumRanges$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDiagnosticNumRanges$MH() { return clang_getDiagnosticNumRanges$MH_; }

    static final FunctionDescriptor clang_getDiagnosticRange$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("begin_int_data"),
        C_INT.withName("end_int_data")
    ),
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticRange$FUNC() { return clang_getDiagnosticRange$FUNC_; }

    static final MethodHandle clang_getDiagnosticRange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticRange",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_getDiagnosticRange$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDiagnosticRange$MH() { return clang_getDiagnosticRange$MH_; }

    static final FunctionDescriptor clang_getDiagnosticNumFixIts$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticNumFixIts$FUNC() { return clang_getDiagnosticNumFixIts$FUNC_; }

    static final MethodHandle clang_getDiagnosticNumFixIts$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticNumFixIts",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_getDiagnosticNumFixIts$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDiagnosticNumFixIts$MH() { return clang_getDiagnosticNumFixIts$MH_; }

    static final FunctionDescriptor clang_getDiagnosticFixIt$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticFixIt$FUNC() { return clang_getDiagnosticFixIt$FUNC_; }

    static final MethodHandle clang_getDiagnosticFixIt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticFixIt",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getDiagnosticFixIt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDiagnosticFixIt$MH() { return clang_getDiagnosticFixIt$MH_; }

    static final FunctionDescriptor clang_getTranslationUnitSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTranslationUnitSpelling$FUNC() { return clang_getTranslationUnitSpelling$FUNC_; }

    static final MethodHandle clang_getTranslationUnitSpelling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTranslationUnitSpelling",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTranslationUnitSpelling$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTranslationUnitSpelling$MH() { return clang_getTranslationUnitSpelling$MH_; }

    static final FunctionDescriptor clang_createTranslationUnitFromSourceFile$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_createTranslationUnitFromSourceFile$FUNC() { return clang_createTranslationUnitFromSourceFile$FUNC_; }

    static final MethodHandle clang_createTranslationUnitFromSourceFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_createTranslationUnitFromSourceFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_createTranslationUnitFromSourceFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_createTranslationUnitFromSourceFile$MH() { return clang_createTranslationUnitFromSourceFile$MH_; }

    static final FunctionDescriptor clang_createTranslationUnit$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_createTranslationUnit$FUNC() { return clang_createTranslationUnit$FUNC_; }

    static final MethodHandle clang_createTranslationUnit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_createTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_createTranslationUnit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_createTranslationUnit$MH() { return clang_createTranslationUnit$MH_; }

    static final FunctionDescriptor clang_createTranslationUnit2$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_createTranslationUnit2$FUNC() { return clang_createTranslationUnit2$FUNC_; }

    static final MethodHandle clang_createTranslationUnit2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_createTranslationUnit2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_createTranslationUnit2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_createTranslationUnit2$MH() { return clang_createTranslationUnit2$MH_; }

    static final int CXTranslationUnit_None() { return (int)0L; }

    static final int CXTranslationUnit_DetailedPreprocessingRecord() { return (int)1L; }

    static final int CXTranslationUnit_Incomplete() { return (int)2L; }

    static final int CXTranslationUnit_PrecompiledPreamble() { return (int)4L; }

    static final int CXTranslationUnit_CacheCompletionResults() { return (int)8L; }

    static final int CXTranslationUnit_ForSerialization() { return (int)16L; }

    static final int CXTranslationUnit_CXXChainedPCH() { return (int)32L; }

    static final int CXTranslationUnit_SkipFunctionBodies() { return (int)64L; }

    static final int CXTranslationUnit_IncludeBriefCommentsInCodeCompletion() { return (int)128L; }

    static final int CXTranslationUnit_CreatePreambleOnFirstParse() { return (int)256L; }

    static final int CXTranslationUnit_KeepGoing() { return (int)512L; }

    static final int CXTranslationUnit_SingleFileParse() { return (int)1024L; }

    static final int CXTranslationUnit_LimitSkipFunctionBodiesToPreamble() { return (int)2048L; }

    static final int CXTranslationUnit_IncludeAttributedTypes() { return (int)4096L; }

    static final int CXTranslationUnit_VisitImplicitAttributes() { return (int)8192L; }

    static final int CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles() { return (int)16384L; }

    static final int CXTranslationUnit_RetainExcludedConditionalBlocks() { return (int)32768L; }

    static final FunctionDescriptor clang_defaultEditingTranslationUnitOptions$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor clang_defaultEditingTranslationUnitOptions$FUNC() { return clang_defaultEditingTranslationUnitOptions$FUNC_; }

    static final MethodHandle clang_defaultEditingTranslationUnitOptions$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_defaultEditingTranslationUnitOptions",
        "()I",
        clang_defaultEditingTranslationUnitOptions$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_defaultEditingTranslationUnitOptions$MH() { return clang_defaultEditingTranslationUnitOptions$MH_; }

    static final FunctionDescriptor clang_parseTranslationUnit$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_parseTranslationUnit$FUNC() { return clang_parseTranslationUnit$FUNC_; }

    static final MethodHandle clang_parseTranslationUnit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_parseTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        clang_parseTranslationUnit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_parseTranslationUnit$MH() { return clang_parseTranslationUnit$MH_; }

    static final FunctionDescriptor clang_parseTranslationUnit2$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_parseTranslationUnit2$FUNC() { return clang_parseTranslationUnit2$FUNC_; }

    static final MethodHandle clang_parseTranslationUnit2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_parseTranslationUnit2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        clang_parseTranslationUnit2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_parseTranslationUnit2$MH() { return clang_parseTranslationUnit2$MH_; }

    static final FunctionDescriptor clang_parseTranslationUnit2FullArgv$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_parseTranslationUnit2FullArgv$FUNC() { return clang_parseTranslationUnit2FullArgv$FUNC_; }

    static final MethodHandle clang_parseTranslationUnit2FullArgv$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_parseTranslationUnit2FullArgv",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        clang_parseTranslationUnit2FullArgv$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_parseTranslationUnit2FullArgv$MH() { return clang_parseTranslationUnit2FullArgv$MH_; }

    static final int CXSaveTranslationUnit_None() { return (int)0L; }

    static final FunctionDescriptor clang_defaultSaveOptions$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_defaultSaveOptions$FUNC() { return clang_defaultSaveOptions$FUNC_; }

    static final MethodHandle clang_defaultSaveOptions$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_defaultSaveOptions",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_defaultSaveOptions$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_defaultSaveOptions$MH() { return clang_defaultSaveOptions$MH_; }

    static final int CXSaveError_None() { return (int)0L; }

    static final int CXSaveError_Unknown() { return (int)1L; }

    static final int CXSaveError_TranslationErrors() { return (int)2L; }

    static final int CXSaveError_InvalidTU() { return (int)3L; }

    static final FunctionDescriptor clang_saveTranslationUnit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_saveTranslationUnit$FUNC() { return clang_saveTranslationUnit$FUNC_; }

    static final MethodHandle clang_saveTranslationUnit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_saveTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        clang_saveTranslationUnit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_saveTranslationUnit$MH() { return clang_saveTranslationUnit$MH_; }

    static final FunctionDescriptor clang_suspendTranslationUnit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_suspendTranslationUnit$FUNC() { return clang_suspendTranslationUnit$FUNC_; }

    static final MethodHandle clang_suspendTranslationUnit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_suspendTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_suspendTranslationUnit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_suspendTranslationUnit$MH() { return clang_suspendTranslationUnit$MH_; }

    static final FunctionDescriptor clang_disposeTranslationUnit$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeTranslationUnit$FUNC() { return clang_disposeTranslationUnit$FUNC_; }

    static final MethodHandle clang_disposeTranslationUnit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_disposeTranslationUnit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_disposeTranslationUnit$MH() { return clang_disposeTranslationUnit$MH_; }

    static final int CXReparse_None() { return (int)0L; }

    static final FunctionDescriptor clang_defaultReparseOptions$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_defaultReparseOptions$FUNC() { return clang_defaultReparseOptions$FUNC_; }

    static final MethodHandle clang_defaultReparseOptions$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_defaultReparseOptions",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_defaultReparseOptions$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_defaultReparseOptions$MH() { return clang_defaultReparseOptions$MH_; }

    static final FunctionDescriptor clang_reparseTranslationUnit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_reparseTranslationUnit$FUNC() { return clang_reparseTranslationUnit$FUNC_; }

    static final MethodHandle clang_reparseTranslationUnit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_reparseTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        clang_reparseTranslationUnit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_reparseTranslationUnit$MH() { return clang_reparseTranslationUnit$MH_; }

    static final int CXTUResourceUsage_AST() { return (int)1L; }

    static final int CXTUResourceUsage_Identifiers() { return (int)2L; }

    static final int CXTUResourceUsage_Selectors() { return (int)3L; }

    static final int CXTUResourceUsage_GlobalCompletionResults() { return (int)4L; }

    static final int CXTUResourceUsage_SourceManagerContentCache() { return (int)5L; }

    static final int CXTUResourceUsage_AST_SideTables() { return (int)6L; }

    static final int CXTUResourceUsage_SourceManager_Membuffer_Malloc() { return (int)7L; }

    static final int CXTUResourceUsage_SourceManager_Membuffer_MMap() { return (int)8L; }

    static final int CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc() { return (int)9L; }

    static final int CXTUResourceUsage_ExternalASTSource_Membuffer_MMap() { return (int)10L; }

    static final int CXTUResourceUsage_Preprocessor() { return (int)11L; }

    static final int CXTUResourceUsage_PreprocessingRecord() { return (int)12L; }

    static final int CXTUResourceUsage_SourceManager_DataStructures() { return (int)13L; }

    static final int CXTUResourceUsage_Preprocessor_HeaderSearch() { return (int)14L; }

    static final int CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN() { return (int)1L; }

    static final int CXTUResourceUsage_MEMORY_IN_BYTES_END() { return (int)14L; }

    static final int CXTUResourceUsage_First() { return (int)1L; }

    static final int CXTUResourceUsage_Last() { return (int)14L; }

    static final FunctionDescriptor clang_getTUResourceUsageName$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTUResourceUsageName$FUNC() { return clang_getTUResourceUsageName$FUNC_; }

    static final MethodHandle clang_getTUResourceUsageName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTUResourceUsageName",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getTUResourceUsageName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTUResourceUsageName$MH() { return clang_getTUResourceUsageName$MH_; }

    static final MemoryLayout CXTUResourceUsageEntry$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        C_LONG_LONG.withName("amount")
    ).withName("CXTUResourceUsageEntry");
    static final jdk.incubator.foreign.MemoryLayout CXTUResourceUsageEntry$struct$LAYOUT() { return CXTUResourceUsageEntry$struct$LAYOUT_; }

    static final MemoryLayout CXTUResourceUsageEntry$kind$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXTUResourceUsageEntry$kind$LAYOUT() { return CXTUResourceUsageEntry$kind$LAYOUT_; }

    static final VarHandle CXTUResourceUsageEntry$kind$VH_ = CXTUResourceUsageEntry$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("kind"));
    static final java.lang.invoke.VarHandle CXTUResourceUsageEntry$kind$VH() { return CXTUResourceUsageEntry$kind$VH_; }

    static final MemoryLayout CXTUResourceUsageEntry$amount$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout CXTUResourceUsageEntry$amount$LAYOUT() { return CXTUResourceUsageEntry$amount$LAYOUT_; }

    static final VarHandle CXTUResourceUsageEntry$amount$VH_ = CXTUResourceUsageEntry$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("amount"));
    static final java.lang.invoke.VarHandle CXTUResourceUsageEntry$amount$VH() { return CXTUResourceUsageEntry$amount$VH_; }

    static final MemoryLayout CXTUResourceUsage$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("numEntries"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("entries")
    ).withName("CXTUResourceUsage");
    static final jdk.incubator.foreign.MemoryLayout CXTUResourceUsage$struct$LAYOUT() { return CXTUResourceUsage$struct$LAYOUT_; }

    static final MemoryLayout CXTUResourceUsage$data$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXTUResourceUsage$data$LAYOUT() { return CXTUResourceUsage$data$LAYOUT_; }

    static final VarHandle CXTUResourceUsage$data$VH_ = MemoryHandles.asAddressVarHandle(CXTUResourceUsage$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("data")));
    static final java.lang.invoke.VarHandle CXTUResourceUsage$data$VH() { return CXTUResourceUsage$data$VH_; }

    static final MemoryLayout CXTUResourceUsage$numEntries$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXTUResourceUsage$numEntries$LAYOUT() { return CXTUResourceUsage$numEntries$LAYOUT_; }

    static final VarHandle CXTUResourceUsage$numEntries$VH_ = CXTUResourceUsage$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("numEntries"));
    static final java.lang.invoke.VarHandle CXTUResourceUsage$numEntries$VH() { return CXTUResourceUsage$numEntries$VH_; }

    static final MemoryLayout CXTUResourceUsage$entries$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXTUResourceUsage$entries$LAYOUT() { return CXTUResourceUsage$entries$LAYOUT_; }

    static final VarHandle CXTUResourceUsage$entries$VH_ = MemoryHandles.asAddressVarHandle(CXTUResourceUsage$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("entries")));
    static final java.lang.invoke.VarHandle CXTUResourceUsage$entries$VH() { return CXTUResourceUsage$entries$VH_; }

    static final FunctionDescriptor clang_getCXTUResourceUsage$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("numEntries"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("entries")
    ).withName("CXTUResourceUsage"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCXTUResourceUsage$FUNC() { return clang_getCXTUResourceUsage$FUNC_; }

    static final MethodHandle clang_getCXTUResourceUsage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCXTUResourceUsage",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCXTUResourceUsage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCXTUResourceUsage$MH() { return clang_getCXTUResourceUsage$MH_; }

    static final FunctionDescriptor clang_disposeCXTUResourceUsage$FUNC_ = FunctionDescriptor.ofVoid(
        MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("numEntries"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("entries")
        ).withName("CXTUResourceUsage")
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeCXTUResourceUsage$FUNC() { return clang_disposeCXTUResourceUsage$FUNC_; }

    static final MethodHandle clang_disposeCXTUResourceUsage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeCXTUResourceUsage",
        "(Ljdk/incubator/foreign/MemorySegment;)V",
        clang_disposeCXTUResourceUsage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_disposeCXTUResourceUsage$MH() { return clang_disposeCXTUResourceUsage$MH_; }

    static final FunctionDescriptor clang_getTranslationUnitTargetInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTranslationUnitTargetInfo$FUNC() { return clang_getTranslationUnitTargetInfo$FUNC_; }

    static final MethodHandle clang_getTranslationUnitTargetInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTranslationUnitTargetInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getTranslationUnitTargetInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTranslationUnitTargetInfo$MH() { return clang_getTranslationUnitTargetInfo$MH_; }

    static final FunctionDescriptor clang_TargetInfo_dispose$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_TargetInfo_dispose$FUNC() { return clang_TargetInfo_dispose$FUNC_; }

    static final MethodHandle clang_TargetInfo_dispose$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_TargetInfo_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_TargetInfo_dispose$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_TargetInfo_dispose$MH() { return clang_TargetInfo_dispose$MH_; }

    static final FunctionDescriptor clang_TargetInfo_getTriple$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_TargetInfo_getTriple$FUNC() { return clang_TargetInfo_getTriple$FUNC_; }

    static final MethodHandle clang_TargetInfo_getTriple$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_TargetInfo_getTriple",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_TargetInfo_getTriple$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_TargetInfo_getTriple$MH() { return clang_TargetInfo_getTriple$MH_; }

    static final FunctionDescriptor clang_TargetInfo_getPointerWidth$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_TargetInfo_getPointerWidth$FUNC() { return clang_TargetInfo_getPointerWidth$FUNC_; }

    static final MethodHandle clang_TargetInfo_getPointerWidth$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_TargetInfo_getPointerWidth",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_TargetInfo_getPointerWidth$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_TargetInfo_getPointerWidth$MH() { return clang_TargetInfo_getPointerWidth$MH_; }

    static final int CXCursor_UnexposedDecl() { return (int)1L; }

    static final int CXCursor_StructDecl() { return (int)2L; }

    static final int CXCursor_UnionDecl() { return (int)3L; }

    static final int CXCursor_ClassDecl() { return (int)4L; }

    static final int CXCursor_EnumDecl() { return (int)5L; }

    static final int CXCursor_FieldDecl() { return (int)6L; }

    static final int CXCursor_EnumConstantDecl() { return (int)7L; }

    static final int CXCursor_FunctionDecl() { return (int)8L; }

    static final int CXCursor_VarDecl() { return (int)9L; }

    static final int CXCursor_ParmDecl() { return (int)10L; }

    static final int CXCursor_ObjCInterfaceDecl() { return (int)11L; }

    static final int CXCursor_ObjCCategoryDecl() { return (int)12L; }

    static final int CXCursor_ObjCProtocolDecl() { return (int)13L; }

    static final int CXCursor_ObjCPropertyDecl() { return (int)14L; }

    static final int CXCursor_ObjCIvarDecl() { return (int)15L; }

    static final int CXCursor_ObjCInstanceMethodDecl() { return (int)16L; }

    static final int CXCursor_ObjCClassMethodDecl() { return (int)17L; }

    static final int CXCursor_ObjCImplementationDecl() { return (int)18L; }

    static final int CXCursor_ObjCCategoryImplDecl() { return (int)19L; }

    static final int CXCursor_TypedefDecl() { return (int)20L; }

    static final int CXCursor_CXXMethod() { return (int)21L; }

    static final int CXCursor_Namespace() { return (int)22L; }

    static final int CXCursor_LinkageSpec() { return (int)23L; }

    static final int CXCursor_Constructor() { return (int)24L; }

    static final int CXCursor_Destructor() { return (int)25L; }

    static final int CXCursor_ConversionFunction() { return (int)26L; }

    static final int CXCursor_TemplateTypeParameter() { return (int)27L; }

    static final int CXCursor_NonTypeTemplateParameter() { return (int)28L; }

    static final int CXCursor_TemplateTemplateParameter() { return (int)29L; }

    static final int CXCursor_FunctionTemplate() { return (int)30L; }

    static final int CXCursor_ClassTemplate() { return (int)31L; }

    static final int CXCursor_ClassTemplatePartialSpecialization() { return (int)32L; }

    static final int CXCursor_NamespaceAlias() { return (int)33L; }

    static final int CXCursor_UsingDirective() { return (int)34L; }

    static final int CXCursor_UsingDeclaration() { return (int)35L; }

    static final int CXCursor_TypeAliasDecl() { return (int)36L; }

    static final int CXCursor_ObjCSynthesizeDecl() { return (int)37L; }

    static final int CXCursor_ObjCDynamicDecl() { return (int)38L; }

    static final int CXCursor_CXXAccessSpecifier() { return (int)39L; }

    static final int CXCursor_FirstDecl() { return (int)1L; }

    static final int CXCursor_LastDecl() { return (int)39L; }

    static final int CXCursor_FirstRef() { return (int)40L; }

    static final int CXCursor_ObjCSuperClassRef() { return (int)40L; }

    static final int CXCursor_ObjCProtocolRef() { return (int)41L; }

    static final int CXCursor_ObjCClassRef() { return (int)42L; }

    static final int CXCursor_TypeRef() { return (int)43L; }

    static final int CXCursor_CXXBaseSpecifier() { return (int)44L; }

    static final int CXCursor_TemplateRef() { return (int)45L; }

    static final int CXCursor_NamespaceRef() { return (int)46L; }

    static final int CXCursor_MemberRef() { return (int)47L; }

    static final int CXCursor_LabelRef() { return (int)48L; }

    static final int CXCursor_OverloadedDeclRef() { return (int)49L; }

    static final int CXCursor_VariableRef() { return (int)50L; }

    static final int CXCursor_LastRef() { return (int)50L; }

    static final int CXCursor_FirstInvalid() { return (int)70L; }

    static final int CXCursor_InvalidFile() { return (int)70L; }

    static final int CXCursor_NoDeclFound() { return (int)71L; }

    static final int CXCursor_NotImplemented() { return (int)72L; }

    static final int CXCursor_InvalidCode() { return (int)73L; }

    static final int CXCursor_LastInvalid() { return (int)73L; }

    static final int CXCursor_FirstExpr() { return (int)100L; }

    static final int CXCursor_UnexposedExpr() { return (int)100L; }

    static final int CXCursor_DeclRefExpr() { return (int)101L; }

    static final int CXCursor_MemberRefExpr() { return (int)102L; }

    static final int CXCursor_CallExpr() { return (int)103L; }

    static final int CXCursor_ObjCMessageExpr() { return (int)104L; }

    static final int CXCursor_BlockExpr() { return (int)105L; }

    static final int CXCursor_IntegerLiteral() { return (int)106L; }

    static final int CXCursor_FloatingLiteral() { return (int)107L; }

    static final int CXCursor_ImaginaryLiteral() { return (int)108L; }

    static final int CXCursor_StringLiteral() { return (int)109L; }

    static final int CXCursor_CharacterLiteral() { return (int)110L; }

    static final int CXCursor_ParenExpr() { return (int)111L; }

    static final int CXCursor_UnaryOperator() { return (int)112L; }

    static final int CXCursor_ArraySubscriptExpr() { return (int)113L; }

    static final int CXCursor_BinaryOperator() { return (int)114L; }

    static final int CXCursor_CompoundAssignOperator() { return (int)115L; }

    static final int CXCursor_ConditionalOperator() { return (int)116L; }

    static final int CXCursor_CStyleCastExpr() { return (int)117L; }

    static final int CXCursor_CompoundLiteralExpr() { return (int)118L; }

    static final int CXCursor_InitListExpr() { return (int)119L; }

    static final int CXCursor_AddrLabelExpr() { return (int)120L; }

    static final int CXCursor_StmtExpr() { return (int)121L; }

    static final int CXCursor_GenericSelectionExpr() { return (int)122L; }

    static final int CXCursor_GNUNullExpr() { return (int)123L; }

    static final int CXCursor_CXXStaticCastExpr() { return (int)124L; }

    static final int CXCursor_CXXDynamicCastExpr() { return (int)125L; }

    static final int CXCursor_CXXReinterpretCastExpr() { return (int)126L; }

    static final int CXCursor_CXXConstCastExpr() { return (int)127L; }

    static final int CXCursor_CXXFunctionalCastExpr() { return (int)128L; }

    static final int CXCursor_CXXTypeidExpr() { return (int)129L; }

    static final int CXCursor_CXXBoolLiteralExpr() { return (int)130L; }

    static final int CXCursor_CXXNullPtrLiteralExpr() { return (int)131L; }

    static final int CXCursor_CXXThisExpr() { return (int)132L; }

    static final int CXCursor_CXXThrowExpr() { return (int)133L; }

    static final int CXCursor_CXXNewExpr() { return (int)134L; }

    static final int CXCursor_CXXDeleteExpr() { return (int)135L; }

    static final int CXCursor_UnaryExpr() { return (int)136L; }

    static final int CXCursor_ObjCStringLiteral() { return (int)137L; }

    static final int CXCursor_ObjCEncodeExpr() { return (int)138L; }

    static final int CXCursor_ObjCSelectorExpr() { return (int)139L; }

    static final int CXCursor_ObjCProtocolExpr() { return (int)140L; }

    static final int CXCursor_ObjCBridgedCastExpr() { return (int)141L; }

    static final int CXCursor_PackExpansionExpr() { return (int)142L; }

    static final int CXCursor_SizeOfPackExpr() { return (int)143L; }

    static final int CXCursor_LambdaExpr() { return (int)144L; }

    static final int CXCursor_ObjCBoolLiteralExpr() { return (int)145L; }

    static final int CXCursor_ObjCSelfExpr() { return (int)146L; }

    static final int CXCursor_OMPArraySectionExpr() { return (int)147L; }

    static final int CXCursor_ObjCAvailabilityCheckExpr() { return (int)148L; }

    static final int CXCursor_FixedPointLiteral() { return (int)149L; }

    static final int CXCursor_LastExpr() { return (int)149L; }

    static final int CXCursor_FirstStmt() { return (int)200L; }

    static final int CXCursor_UnexposedStmt() { return (int)200L; }

    static final int CXCursor_LabelStmt() { return (int)201L; }

    static final int CXCursor_CompoundStmt() { return (int)202L; }

    static final int CXCursor_CaseStmt() { return (int)203L; }

    static final int CXCursor_DefaultStmt() { return (int)204L; }

    static final int CXCursor_IfStmt() { return (int)205L; }

    static final int CXCursor_SwitchStmt() { return (int)206L; }

    static final int CXCursor_WhileStmt() { return (int)207L; }

    static final int CXCursor_DoStmt() { return (int)208L; }

    static final int CXCursor_ForStmt() { return (int)209L; }

    static final int CXCursor_GotoStmt() { return (int)210L; }

    static final int CXCursor_IndirectGotoStmt() { return (int)211L; }

    static final int CXCursor_ContinueStmt() { return (int)212L; }

    static final int CXCursor_BreakStmt() { return (int)213L; }

    static final int CXCursor_ReturnStmt() { return (int)214L; }

    static final int CXCursor_GCCAsmStmt() { return (int)215L; }

    static final int CXCursor_AsmStmt() { return (int)215L; }

    static final int CXCursor_ObjCAtTryStmt() { return (int)216L; }

    static final int CXCursor_ObjCAtCatchStmt() { return (int)217L; }

    static final int CXCursor_ObjCAtFinallyStmt() { return (int)218L; }

    static final int CXCursor_ObjCAtThrowStmt() { return (int)219L; }

    static final int CXCursor_ObjCAtSynchronizedStmt() { return (int)220L; }

    static final int CXCursor_ObjCAutoreleasePoolStmt() { return (int)221L; }

    static final int CXCursor_ObjCForCollectionStmt() { return (int)222L; }

    static final int CXCursor_CXXCatchStmt() { return (int)223L; }

    static final int CXCursor_CXXTryStmt() { return (int)224L; }

    static final int CXCursor_CXXForRangeStmt() { return (int)225L; }

    static final int CXCursor_SEHTryStmt() { return (int)226L; }

    static final int CXCursor_SEHExceptStmt() { return (int)227L; }

    static final int CXCursor_SEHFinallyStmt() { return (int)228L; }

    static final int CXCursor_MSAsmStmt() { return (int)229L; }

    static final int CXCursor_NullStmt() { return (int)230L; }

    static final int CXCursor_DeclStmt() { return (int)231L; }

    static final int CXCursor_OMPParallelDirective() { return (int)232L; }

    static final int CXCursor_OMPSimdDirective() { return (int)233L; }

    static final int CXCursor_OMPForDirective() { return (int)234L; }

    static final int CXCursor_OMPSectionsDirective() { return (int)235L; }

    static final int CXCursor_OMPSectionDirective() { return (int)236L; }

    static final int CXCursor_OMPSingleDirective() { return (int)237L; }

    static final int CXCursor_OMPParallelForDirective() { return (int)238L; }

    static final int CXCursor_OMPParallelSectionsDirective() { return (int)239L; }

    static final int CXCursor_OMPTaskDirective() { return (int)240L; }

    static final int CXCursor_OMPMasterDirective() { return (int)241L; }

    static final int CXCursor_OMPCriticalDirective() { return (int)242L; }

    static final int CXCursor_OMPTaskyieldDirective() { return (int)243L; }

    static final int CXCursor_OMPBarrierDirective() { return (int)244L; }

    static final int CXCursor_OMPTaskwaitDirective() { return (int)245L; }

    static final int CXCursor_OMPFlushDirective() { return (int)246L; }

    static final int CXCursor_SEHLeaveStmt() { return (int)247L; }

    static final int CXCursor_OMPOrderedDirective() { return (int)248L; }

    static final int CXCursor_OMPAtomicDirective() { return (int)249L; }

    static final int CXCursor_OMPForSimdDirective() { return (int)250L; }

    static final int CXCursor_OMPParallelForSimdDirective() { return (int)251L; }

    static final int CXCursor_OMPTargetDirective() { return (int)252L; }

    static final int CXCursor_OMPTeamsDirective() { return (int)253L; }

    static final int CXCursor_OMPTaskgroupDirective() { return (int)254L; }

    static final int CXCursor_OMPCancellationPointDirective() { return (int)255L; }

    static final int CXCursor_OMPCancelDirective() { return (int)256L; }

    static final int CXCursor_OMPTargetDataDirective() { return (int)257L; }

    static final int CXCursor_OMPTaskLoopDirective() { return (int)258L; }

    static final int CXCursor_OMPTaskLoopSimdDirective() { return (int)259L; }

    static final int CXCursor_OMPDistributeDirective() { return (int)260L; }

    static final int CXCursor_OMPTargetEnterDataDirective() { return (int)261L; }

    static final int CXCursor_OMPTargetExitDataDirective() { return (int)262L; }

    static final int CXCursor_OMPTargetParallelDirective() { return (int)263L; }

    static final int CXCursor_OMPTargetParallelForDirective() { return (int)264L; }

    static final int CXCursor_OMPTargetUpdateDirective() { return (int)265L; }

    static final int CXCursor_OMPDistributeParallelForDirective() { return (int)266L; }

    static final int CXCursor_OMPDistributeParallelForSimdDirective() { return (int)267L; }

    static final int CXCursor_OMPDistributeSimdDirective() { return (int)268L; }

    static final int CXCursor_OMPTargetParallelForSimdDirective() { return (int)269L; }

    static final int CXCursor_OMPTargetSimdDirective() { return (int)270L; }

    static final int CXCursor_OMPTeamsDistributeDirective() { return (int)271L; }

    static final int CXCursor_OMPTeamsDistributeSimdDirective() { return (int)272L; }

    static final int CXCursor_OMPTeamsDistributeParallelForSimdDirective() { return (int)273L; }

    static final int CXCursor_OMPTeamsDistributeParallelForDirective() { return (int)274L; }

    static final int CXCursor_OMPTargetTeamsDirective() { return (int)275L; }

    static final int CXCursor_OMPTargetTeamsDistributeDirective() { return (int)276L; }

    static final int CXCursor_OMPTargetTeamsDistributeParallelForDirective() { return (int)277L; }

    static final int CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective() { return (int)278L; }

    static final int CXCursor_OMPTargetTeamsDistributeSimdDirective() { return (int)279L; }

    static final int CXCursor_BuiltinBitCastExpr() { return (int)280L; }

    static final int CXCursor_OMPMasterTaskLoopDirective() { return (int)281L; }

    static final int CXCursor_OMPParallelMasterTaskLoopDirective() { return (int)282L; }

    static final int CXCursor_OMPMasterTaskLoopSimdDirective() { return (int)283L; }

    static final int CXCursor_OMPParallelMasterTaskLoopSimdDirective() { return (int)284L; }

    static final int CXCursor_LastStmt() { return (int)284L; }

    static final int CXCursor_TranslationUnit() { return (int)300L; }

    static final int CXCursor_FirstAttr() { return (int)400L; }

    static final int CXCursor_UnexposedAttr() { return (int)400L; }

    static final int CXCursor_IBActionAttr() { return (int)401L; }

    static final int CXCursor_IBOutletAttr() { return (int)402L; }

    static final int CXCursor_IBOutletCollectionAttr() { return (int)403L; }

    static final int CXCursor_CXXFinalAttr() { return (int)404L; }

    static final int CXCursor_CXXOverrideAttr() { return (int)405L; }

    static final int CXCursor_AnnotateAttr() { return (int)406L; }

    static final int CXCursor_AsmLabelAttr() { return (int)407L; }

    static final int CXCursor_PackedAttr() { return (int)408L; }

    static final int CXCursor_PureAttr() { return (int)409L; }

    static final int CXCursor_ConstAttr() { return (int)410L; }

    static final int CXCursor_NoDuplicateAttr() { return (int)411L; }

    static final int CXCursor_CUDAConstantAttr() { return (int)412L; }

    static final int CXCursor_CUDADeviceAttr() { return (int)413L; }

    static final int CXCursor_CUDAGlobalAttr() { return (int)414L; }

    static final int CXCursor_CUDAHostAttr() { return (int)415L; }

    static final int CXCursor_CUDASharedAttr() { return (int)416L; }

    static final int CXCursor_VisibilityAttr() { return (int)417L; }

    static final int CXCursor_DLLExport() { return (int)418L; }

    static final int CXCursor_DLLImport() { return (int)419L; }

    static final int CXCursor_NSReturnsRetained() { return (int)420L; }

    static final int CXCursor_NSReturnsNotRetained() { return (int)421L; }

    static final int CXCursor_NSReturnsAutoreleased() { return (int)422L; }

    static final int CXCursor_NSConsumesSelf() { return (int)423L; }

    static final int CXCursor_NSConsumed() { return (int)424L; }

    static final int CXCursor_ObjCException() { return (int)425L; }

    static final int CXCursor_ObjCNSObject() { return (int)426L; }

    static final int CXCursor_ObjCIndependentClass() { return (int)427L; }

    static final int CXCursor_ObjCPreciseLifetime() { return (int)428L; }

    static final int CXCursor_ObjCReturnsInnerPointer() { return (int)429L; }

    static final int CXCursor_ObjCRequiresSuper() { return (int)430L; }

    static final int CXCursor_ObjCRootClass() { return (int)431L; }

    static final int CXCursor_ObjCSubclassingRestricted() { return (int)432L; }

    static final int CXCursor_ObjCExplicitProtocolImpl() { return (int)433L; }

    static final int CXCursor_ObjCDesignatedInitializer() { return (int)434L; }

    static final int CXCursor_ObjCRuntimeVisible() { return (int)435L; }

    static final int CXCursor_ObjCBoxable() { return (int)436L; }

    static final int CXCursor_FlagEnum() { return (int)437L; }

    static final int CXCursor_ConvergentAttr() { return (int)438L; }

    static final int CXCursor_WarnUnusedAttr() { return (int)439L; }

    static final int CXCursor_WarnUnusedResultAttr() { return (int)440L; }

    static final int CXCursor_AlignedAttr() { return (int)441L; }

    static final int CXCursor_LastAttr() { return (int)441L; }

    static final int CXCursor_PreprocessingDirective() { return (int)500L; }

    static final int CXCursor_MacroDefinition() { return (int)501L; }

    static final int CXCursor_MacroExpansion() { return (int)502L; }

    static final int CXCursor_MacroInstantiation() { return (int)502L; }

    static final int CXCursor_InclusionDirective() { return (int)503L; }

    static final int CXCursor_FirstPreprocessing() { return (int)500L; }

    static final int CXCursor_LastPreprocessing() { return (int)503L; }

    static final int CXCursor_ModuleImportDecl() { return (int)600L; }

    static final int CXCursor_TypeAliasTemplateDecl() { return (int)601L; }

    static final int CXCursor_StaticAssert() { return (int)602L; }

    static final int CXCursor_FriendDecl() { return (int)603L; }

    static final int CXCursor_FirstExtraDecl() { return (int)600L; }

    static final int CXCursor_LastExtraDecl() { return (int)603L; }

    static final int CXCursor_OverloadCandidate() { return (int)700L; }

    static final int CXTSK_Undeclared() { return (int)0L; }

    static final int CXTSK_ImplicitInstantiation() { return (int)1L; }

    static final int CXTSK_ExplicitSpecialization() { return (int)2L; }

    static final int CXTSK_ExplicitInstantiationDeclaration() { return (int)3L; }

    static final int CXTSK_ExplicitInstantiationDefinition() { return (int)4L; }

    static final MemoryLayout CXCursor$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    );
    static final jdk.incubator.foreign.MemoryLayout CXCursor$struct$LAYOUT() { return CXCursor$struct$LAYOUT_; }

    static final MemoryLayout CXCursor$kind$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXCursor$kind$LAYOUT() { return CXCursor$kind$LAYOUT_; }

    static final VarHandle CXCursor$kind$VH_ = CXCursor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("kind"));
    static final java.lang.invoke.VarHandle CXCursor$kind$VH() { return CXCursor$kind$VH_; }

    static final MemoryLayout CXCursor$xdata$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXCursor$xdata$LAYOUT() { return CXCursor$xdata$LAYOUT_; }

    static final VarHandle CXCursor$xdata$VH_ = CXCursor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("xdata"));
    static final java.lang.invoke.VarHandle CXCursor$xdata$VH() { return CXCursor$xdata$VH_; }

    static final FunctionDescriptor clang_getNullCursor$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ));
    static final jdk.incubator.foreign.FunctionDescriptor clang_getNullCursor$FUNC() { return clang_getNullCursor$FUNC_; }

    static final MethodHandle clang_getNullCursor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNullCursor",
        "()Ljdk/incubator/foreign/MemorySegment;",
        clang_getNullCursor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getNullCursor$MH() { return clang_getNullCursor$MH_; }

    static final FunctionDescriptor clang_getTranslationUnitCursor$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTranslationUnitCursor$FUNC() { return clang_getTranslationUnitCursor$FUNC_; }

    static final MethodHandle clang_getTranslationUnitCursor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTranslationUnitCursor",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTranslationUnitCursor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTranslationUnitCursor$MH() { return clang_getTranslationUnitCursor$MH_; }

    static final FunctionDescriptor clang_equalCursors$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_equalCursors$FUNC() { return clang_equalCursors$FUNC_; }

    static final MethodHandle clang_equalCursors$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_equalCursors",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
        clang_equalCursors$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_equalCursors$MH() { return clang_equalCursors$MH_; }

    static final FunctionDescriptor clang_Cursor_isNull$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isNull$FUNC() { return clang_Cursor_isNull$FUNC_; }

    static final MethodHandle clang_Cursor_isNull$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isNull",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isNull$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_isNull$MH() { return clang_Cursor_isNull$MH_; }

    static final FunctionDescriptor clang_hashCursor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_hashCursor$FUNC() { return clang_hashCursor$FUNC_; }

    static final MethodHandle clang_hashCursor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_hashCursor",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_hashCursor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_hashCursor$MH() { return clang_hashCursor$MH_; }

    static final FunctionDescriptor clang_getCursorKind$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorKind$FUNC() { return clang_getCursorKind$FUNC_; }

    static final MethodHandle clang_getCursorKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorKind",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getCursorKind$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorKind$MH() { return clang_getCursorKind$MH_; }

    static final FunctionDescriptor clang_isDeclaration$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isDeclaration$FUNC() { return clang_isDeclaration$FUNC_; }

    static final MethodHandle clang_isDeclaration$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isDeclaration",
        "(I)I",
        clang_isDeclaration$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isDeclaration$MH() { return clang_isDeclaration$MH_; }

    static final FunctionDescriptor clang_isInvalidDeclaration$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isInvalidDeclaration$FUNC() { return clang_isInvalidDeclaration$FUNC_; }

    static final MethodHandle clang_isInvalidDeclaration$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isInvalidDeclaration",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_isInvalidDeclaration$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isInvalidDeclaration$MH() { return clang_isInvalidDeclaration$MH_; }

    static final FunctionDescriptor clang_isReference$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isReference$FUNC() { return clang_isReference$FUNC_; }

    static final MethodHandle clang_isReference$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isReference",
        "(I)I",
        clang_isReference$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isReference$MH() { return clang_isReference$MH_; }

    static final FunctionDescriptor clang_isExpression$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isExpression$FUNC() { return clang_isExpression$FUNC_; }

    static final MethodHandle clang_isExpression$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isExpression",
        "(I)I",
        clang_isExpression$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isExpression$MH() { return clang_isExpression$MH_; }

    static final FunctionDescriptor clang_isStatement$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isStatement$FUNC() { return clang_isStatement$FUNC_; }

    static final MethodHandle clang_isStatement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isStatement",
        "(I)I",
        clang_isStatement$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isStatement$MH() { return clang_isStatement$MH_; }

    static final FunctionDescriptor clang_isAttribute$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isAttribute$FUNC() { return clang_isAttribute$FUNC_; }

    static final MethodHandle clang_isAttribute$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isAttribute",
        "(I)I",
        clang_isAttribute$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isAttribute$MH() { return clang_isAttribute$MH_; }

    static final FunctionDescriptor clang_Cursor_hasAttrs$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_hasAttrs$FUNC() { return clang_Cursor_hasAttrs$FUNC_; }

    static final MethodHandle clang_Cursor_hasAttrs$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_hasAttrs",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_hasAttrs$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_hasAttrs$MH() { return clang_Cursor_hasAttrs$MH_; }

    static final FunctionDescriptor clang_isInvalid$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isInvalid$FUNC() { return clang_isInvalid$FUNC_; }

    static final MethodHandle clang_isInvalid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isInvalid",
        "(I)I",
        clang_isInvalid$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isInvalid$MH() { return clang_isInvalid$MH_; }

    static final FunctionDescriptor clang_isTranslationUnit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isTranslationUnit$FUNC() { return clang_isTranslationUnit$FUNC_; }

    static final MethodHandle clang_isTranslationUnit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isTranslationUnit",
        "(I)I",
        clang_isTranslationUnit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isTranslationUnit$MH() { return clang_isTranslationUnit$MH_; }

    static final FunctionDescriptor clang_isPreprocessing$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isPreprocessing$FUNC() { return clang_isPreprocessing$FUNC_; }

    static final MethodHandle clang_isPreprocessing$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isPreprocessing",
        "(I)I",
        clang_isPreprocessing$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isPreprocessing$MH() { return clang_isPreprocessing$MH_; }

    static final FunctionDescriptor clang_isUnexposed$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isUnexposed$FUNC() { return clang_isUnexposed$FUNC_; }

    static final MethodHandle clang_isUnexposed$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isUnexposed",
        "(I)I",
        clang_isUnexposed$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isUnexposed$MH() { return clang_isUnexposed$MH_; }

    static final int CXLinkage_Invalid() { return (int)0L; }

    static final int CXLinkage_NoLinkage() { return (int)1L; }

    static final int CXLinkage_Internal() { return (int)2L; }

    static final int CXLinkage_UniqueExternal() { return (int)3L; }

    static final int CXLinkage_External() { return (int)4L; }

    static final FunctionDescriptor clang_getCursorLinkage$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorLinkage$FUNC() { return clang_getCursorLinkage$FUNC_; }

    static final MethodHandle clang_getCursorLinkage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorLinkage",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getCursorLinkage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorLinkage$MH() { return clang_getCursorLinkage$MH_; }

    static final int CXVisibility_Invalid() { return (int)0L; }

    static final int CXVisibility_Hidden() { return (int)1L; }

    static final int CXVisibility_Protected() { return (int)2L; }

    static final int CXVisibility_Default() { return (int)3L; }

    static final FunctionDescriptor clang_getCursorVisibility$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorVisibility$FUNC() { return clang_getCursorVisibility$FUNC_; }

    static final MethodHandle clang_getCursorVisibility$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorVisibility",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getCursorVisibility$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorVisibility$MH() { return clang_getCursorVisibility$MH_; }

    static final FunctionDescriptor clang_getCursorAvailability$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorAvailability$FUNC() { return clang_getCursorAvailability$FUNC_; }

    static final MethodHandle clang_getCursorAvailability$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorAvailability",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getCursorAvailability$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorAvailability$MH() { return clang_getCursorAvailability$MH_; }

    static final MemoryLayout CXPlatformAvailability$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("Platform"),
        MemoryLayout.ofStruct(
            C_INT.withName("Major"),
            C_INT.withName("Minor"),
            C_INT.withName("Subminor")
        ).withName("Introduced"),
        MemoryLayout.ofStruct(
            C_INT.withName("Major"),
            C_INT.withName("Minor"),
            C_INT.withName("Subminor")
        ).withName("Deprecated"),
        MemoryLayout.ofStruct(
            C_INT.withName("Major"),
            C_INT.withName("Minor"),
            C_INT.withName("Subminor")
        ).withName("Obsoleted"),
        C_INT.withName("Unavailable"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("Message")
    ).withName("CXPlatformAvailability");
    static final jdk.incubator.foreign.MemoryLayout CXPlatformAvailability$struct$LAYOUT() { return CXPlatformAvailability$struct$LAYOUT_; }

    static final MemoryLayout CXPlatformAvailability$Unavailable$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXPlatformAvailability$Unavailable$LAYOUT() { return CXPlatformAvailability$Unavailable$LAYOUT_; }

    static final VarHandle CXPlatformAvailability$Unavailable$VH_ = CXPlatformAvailability$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Unavailable"));
    static final java.lang.invoke.VarHandle CXPlatformAvailability$Unavailable$VH() { return CXPlatformAvailability$Unavailable$VH_; }

    static final FunctionDescriptor clang_getCursorPlatformAvailability$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorPlatformAvailability$FUNC() { return clang_getCursorPlatformAvailability$FUNC_; }

    static final MethodHandle clang_getCursorPlatformAvailability$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorPlatformAvailability",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        clang_getCursorPlatformAvailability$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorPlatformAvailability$MH() { return clang_getCursorPlatformAvailability$MH_; }

    static final FunctionDescriptor clang_disposeCXPlatformAvailability$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeCXPlatformAvailability$FUNC() { return clang_disposeCXPlatformAvailability$FUNC_; }

    static final MethodHandle clang_disposeCXPlatformAvailability$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeCXPlatformAvailability",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_disposeCXPlatformAvailability$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_disposeCXPlatformAvailability$MH() { return clang_disposeCXPlatformAvailability$MH_; }

    static final int CXLanguage_Invalid() { return (int)0L; }

    static final int CXLanguage_C() { return (int)1L; }

    static final int CXLanguage_ObjC() { return (int)2L; }

    static final int CXLanguage_CPlusPlus() { return (int)3L; }

    static final FunctionDescriptor clang_getCursorLanguage$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorLanguage$FUNC() { return clang_getCursorLanguage$FUNC_; }

    static final MethodHandle clang_getCursorLanguage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorLanguage",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getCursorLanguage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorLanguage$MH() { return clang_getCursorLanguage$MH_; }

    static final int CXTLS_None() { return (int)0L; }

    static final int CXTLS_Dynamic() { return (int)1L; }

    static final int CXTLS_Static() { return (int)2L; }

    static final FunctionDescriptor clang_getCursorTLSKind$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorTLSKind$FUNC() { return clang_getCursorTLSKind$FUNC_; }

    static final MethodHandle clang_getCursorTLSKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorTLSKind",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getCursorTLSKind$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorTLSKind$MH() { return clang_getCursorTLSKind$MH_; }

    static final FunctionDescriptor clang_Cursor_getTranslationUnit$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getTranslationUnit$FUNC() { return clang_Cursor_getTranslationUnit$FUNC_; }

    static final MethodHandle clang_Cursor_getTranslationUnit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getTranslationUnit",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_Cursor_getTranslationUnit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getTranslationUnit$MH() { return clang_Cursor_getTranslationUnit$MH_; }

    static final FunctionDescriptor clang_createCXCursorSet$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor clang_createCXCursorSet$FUNC() { return clang_createCXCursorSet$FUNC_; }

    static final MethodHandle clang_createCXCursorSet$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_createCXCursorSet",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        clang_createCXCursorSet$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_createCXCursorSet$MH() { return clang_createCXCursorSet$MH_; }

    static final FunctionDescriptor clang_disposeCXCursorSet$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeCXCursorSet$FUNC() { return clang_disposeCXCursorSet$FUNC_; }

    static final MethodHandle clang_disposeCXCursorSet$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeCXCursorSet",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_disposeCXCursorSet$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_disposeCXCursorSet$MH() { return clang_disposeCXCursorSet$MH_; }

    static final FunctionDescriptor clang_CXCursorSet_contains$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXCursorSet_contains$FUNC() { return clang_CXCursorSet_contains$FUNC_; }

    static final MethodHandle clang_CXCursorSet_contains$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXCursorSet_contains",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXCursorSet_contains$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXCursorSet_contains$MH() { return clang_CXCursorSet_contains$MH_; }

    static final FunctionDescriptor clang_CXCursorSet_insert$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXCursorSet_insert$FUNC() { return clang_CXCursorSet_insert$FUNC_; }

    static final MethodHandle clang_CXCursorSet_insert$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXCursorSet_insert",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXCursorSet_insert$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXCursorSet_insert$MH() { return clang_CXCursorSet_insert$MH_; }

    static final FunctionDescriptor clang_getCursorSemanticParent$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorSemanticParent$FUNC() { return clang_getCursorSemanticParent$FUNC_; }

    static final MethodHandle clang_getCursorSemanticParent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorSemanticParent",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorSemanticParent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorSemanticParent$MH() { return clang_getCursorSemanticParent$MH_; }

    static final FunctionDescriptor clang_getCursorLexicalParent$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorLexicalParent$FUNC() { return clang_getCursorLexicalParent$FUNC_; }

    static final MethodHandle clang_getCursorLexicalParent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorLexicalParent",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorLexicalParent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorLexicalParent$MH() { return clang_getCursorLexicalParent$MH_; }

    static final FunctionDescriptor clang_getOverriddenCursors$FUNC_ = FunctionDescriptor.ofVoid(
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getOverriddenCursors$FUNC() { return clang_getOverriddenCursors$FUNC_; }

    static final MethodHandle clang_getOverriddenCursors$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getOverriddenCursors",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_getOverriddenCursors$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getOverriddenCursors$MH() { return clang_getOverriddenCursors$MH_; }

    static final FunctionDescriptor clang_disposeOverriddenCursors$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeOverriddenCursors$FUNC() { return clang_disposeOverriddenCursors$FUNC_; }

    static final MethodHandle clang_disposeOverriddenCursors$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeOverriddenCursors",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_disposeOverriddenCursors$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_disposeOverriddenCursors$MH() { return clang_disposeOverriddenCursors$MH_; }

    static final FunctionDescriptor clang_getIncludedFile$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getIncludedFile$FUNC() { return clang_getIncludedFile$FUNC_; }

    static final MethodHandle clang_getIncludedFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getIncludedFile",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getIncludedFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getIncludedFile$MH() { return clang_getIncludedFile$MH_; }

    static final FunctionDescriptor clang_getCursor$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        C_POINTER,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursor$FUNC() { return clang_getCursor$FUNC_; }

    static final MethodHandle clang_getCursor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursor",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursor$MH() { return clang_getCursor$MH_; }

    static final FunctionDescriptor clang_getCursorLocation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorLocation$FUNC() { return clang_getCursorLocation$FUNC_; }

    static final MethodHandle clang_getCursorLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorLocation",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorLocation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorLocation$MH() { return clang_getCursorLocation$MH_; }

    static final FunctionDescriptor clang_getCursorExtent$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("begin_int_data"),
        C_INT.withName("end_int_data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorExtent$FUNC() { return clang_getCursorExtent$FUNC_; }

    static final MethodHandle clang_getCursorExtent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorExtent",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorExtent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorExtent$MH() { return clang_getCursorExtent$MH_; }

    static final int CXType_Invalid() { return (int)0L; }

    static final int CXType_Unexposed() { return (int)1L; }

    static final int CXType_Void() { return (int)2L; }

    static final int CXType_Bool() { return (int)3L; }

    static final int CXType_Char_U() { return (int)4L; }

    static final int CXType_UChar() { return (int)5L; }

    static final int CXType_Char16() { return (int)6L; }

    static final int CXType_Char32() { return (int)7L; }

    static final int CXType_UShort() { return (int)8L; }

    static final int CXType_UInt() { return (int)9L; }

    static final int CXType_ULong() { return (int)10L; }

    static final int CXType_ULongLong() { return (int)11L; }

    static final int CXType_UInt128() { return (int)12L; }

    static final int CXType_Char_S() { return (int)13L; }

    static final int CXType_SChar() { return (int)14L; }

    static final int CXType_WChar() { return (int)15L; }

    static final int CXType_Short() { return (int)16L; }

    static final int CXType_Int() { return (int)17L; }

    static final int CXType_Long() { return (int)18L; }

    static final int CXType_LongLong() { return (int)19L; }

    static final int CXType_Int128() { return (int)20L; }

    static final int CXType_Float() { return (int)21L; }

    static final int CXType_Double() { return (int)22L; }

    static final int CXType_LongDouble() { return (int)23L; }

    static final int CXType_NullPtr() { return (int)24L; }

    static final int CXType_Overload() { return (int)25L; }

    static final int CXType_Dependent() { return (int)26L; }

    static final int CXType_ObjCId() { return (int)27L; }

    static final int CXType_ObjCClass() { return (int)28L; }

    static final int CXType_ObjCSel() { return (int)29L; }

    static final int CXType_Float128() { return (int)30L; }

    static final int CXType_Half() { return (int)31L; }

    static final int CXType_Float16() { return (int)32L; }

    static final int CXType_ShortAccum() { return (int)33L; }

    static final int CXType_Accum() { return (int)34L; }

    static final int CXType_LongAccum() { return (int)35L; }

    static final int CXType_UShortAccum() { return (int)36L; }

    static final int CXType_UAccum() { return (int)37L; }

    static final int CXType_ULongAccum() { return (int)38L; }

    static final int CXType_FirstBuiltin() { return (int)2L; }

    static final int CXType_LastBuiltin() { return (int)38L; }

    static final int CXType_Complex() { return (int)100L; }

    static final int CXType_Pointer() { return (int)101L; }

    static final int CXType_BlockPointer() { return (int)102L; }

    static final int CXType_LValueReference() { return (int)103L; }

    static final int CXType_RValueReference() { return (int)104L; }

    static final int CXType_Record() { return (int)105L; }

    static final int CXType_Enum() { return (int)106L; }

    static final int CXType_Typedef() { return (int)107L; }

    static final int CXType_ObjCInterface() { return (int)108L; }

    static final int CXType_ObjCObjectPointer() { return (int)109L; }

    static final int CXType_FunctionNoProto() { return (int)110L; }

    static final int CXType_FunctionProto() { return (int)111L; }

    static final int CXType_ConstantArray() { return (int)112L; }

    static final int CXType_Vector() { return (int)113L; }

    static final int CXType_IncompleteArray() { return (int)114L; }

    static final int CXType_VariableArray() { return (int)115L; }

    static final int CXType_DependentSizedArray() { return (int)116L; }

    static final int CXType_MemberPointer() { return (int)117L; }

    static final int CXType_Auto() { return (int)118L; }

    static final int CXType_Elaborated() { return (int)119L; }

    static final int CXType_Pipe() { return (int)120L; }

    static final int CXType_OCLImage1dRO() { return (int)121L; }

    static final int CXType_OCLImage1dArrayRO() { return (int)122L; }

    static final int CXType_OCLImage1dBufferRO() { return (int)123L; }

    static final int CXType_OCLImage2dRO() { return (int)124L; }

    static final int CXType_OCLImage2dArrayRO() { return (int)125L; }

    static final int CXType_OCLImage2dDepthRO() { return (int)126L; }

    static final int CXType_OCLImage2dArrayDepthRO() { return (int)127L; }

    static final int CXType_OCLImage2dMSAARO() { return (int)128L; }

    static final int CXType_OCLImage2dArrayMSAARO() { return (int)129L; }

    static final int CXType_OCLImage2dMSAADepthRO() { return (int)130L; }

    static final int CXType_OCLImage2dArrayMSAADepthRO() { return (int)131L; }

    static final int CXType_OCLImage3dRO() { return (int)132L; }

    static final int CXType_OCLImage1dWO() { return (int)133L; }

    static final int CXType_OCLImage1dArrayWO() { return (int)134L; }

    static final int CXType_OCLImage1dBufferWO() { return (int)135L; }

    static final int CXType_OCLImage2dWO() { return (int)136L; }

    static final int CXType_OCLImage2dArrayWO() { return (int)137L; }

    static final int CXType_OCLImage2dDepthWO() { return (int)138L; }

    static final int CXType_OCLImage2dArrayDepthWO() { return (int)139L; }

    static final int CXType_OCLImage2dMSAAWO() { return (int)140L; }

    static final int CXType_OCLImage2dArrayMSAAWO() { return (int)141L; }

    static final int CXType_OCLImage2dMSAADepthWO() { return (int)142L; }

    static final int CXType_OCLImage2dArrayMSAADepthWO() { return (int)143L; }

    static final int CXType_OCLImage3dWO() { return (int)144L; }

    static final int CXType_OCLImage1dRW() { return (int)145L; }

    static final int CXType_OCLImage1dArrayRW() { return (int)146L; }

    static final int CXType_OCLImage1dBufferRW() { return (int)147L; }

    static final int CXType_OCLImage2dRW() { return (int)148L; }

    static final int CXType_OCLImage2dArrayRW() { return (int)149L; }

    static final int CXType_OCLImage2dDepthRW() { return (int)150L; }

    static final int CXType_OCLImage2dArrayDepthRW() { return (int)151L; }

    static final int CXType_OCLImage2dMSAARW() { return (int)152L; }

    static final int CXType_OCLImage2dArrayMSAARW() { return (int)153L; }

    static final int CXType_OCLImage2dMSAADepthRW() { return (int)154L; }

    static final int CXType_OCLImage2dArrayMSAADepthRW() { return (int)155L; }

    static final int CXType_OCLImage3dRW() { return (int)156L; }

    static final int CXType_OCLSampler() { return (int)157L; }

    static final int CXType_OCLEvent() { return (int)158L; }

    static final int CXType_OCLQueue() { return (int)159L; }

    static final int CXType_OCLReserveID() { return (int)160L; }

    static final int CXType_ObjCObject() { return (int)161L; }

    static final int CXType_ObjCTypeParam() { return (int)162L; }

    static final int CXType_Attributed() { return (int)163L; }

    static final int CXType_OCLIntelSubgroupAVCMcePayload() { return (int)164L; }

    static final int CXType_OCLIntelSubgroupAVCImePayload() { return (int)165L; }

    static final int CXType_OCLIntelSubgroupAVCRefPayload() { return (int)166L; }

    static final int CXType_OCLIntelSubgroupAVCSicPayload() { return (int)167L; }

    static final int CXType_OCLIntelSubgroupAVCMceResult() { return (int)168L; }

    static final int CXType_OCLIntelSubgroupAVCImeResult() { return (int)169L; }

    static final int CXType_OCLIntelSubgroupAVCRefResult() { return (int)170L; }

    static final int CXType_OCLIntelSubgroupAVCSicResult() { return (int)171L; }

    static final int CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout() { return (int)172L; }

    static final int CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout() { return (int)173L; }

    static final int CXType_OCLIntelSubgroupAVCImeSingleRefStreamin() { return (int)174L; }

    static final int CXType_OCLIntelSubgroupAVCImeDualRefStreamin() { return (int)175L; }

    static final int CXType_ExtVector() { return (int)176L; }

    static final int CXCallingConv_Default() { return (int)0L; }

    static final int CXCallingConv_C() { return (int)1L; }

    static final int CXCallingConv_X86StdCall() { return (int)2L; }

    static final int CXCallingConv_X86FastCall() { return (int)3L; }

    static final int CXCallingConv_X86ThisCall() { return (int)4L; }

    static final int CXCallingConv_X86Pascal() { return (int)5L; }

    static final int CXCallingConv_AAPCS() { return (int)6L; }

    static final int CXCallingConv_AAPCS_VFP() { return (int)7L; }

    static final int CXCallingConv_X86RegCall() { return (int)8L; }

    static final int CXCallingConv_IntelOclBicc() { return (int)9L; }

    static final int CXCallingConv_Win64() { return (int)10L; }

    static final int CXCallingConv_X86_64Win64() { return (int)10L; }

    static final int CXCallingConv_X86_64SysV() { return (int)11L; }

    static final int CXCallingConv_X86VectorCall() { return (int)12L; }

    static final int CXCallingConv_Swift() { return (int)13L; }

    static final int CXCallingConv_PreserveMost() { return (int)14L; }

    static final int CXCallingConv_PreserveAll() { return (int)15L; }

    static final int CXCallingConv_AArch64VectorCall() { return (int)16L; }

    static final int CXCallingConv_Invalid() { return (int)100L; }

    static final int CXCallingConv_Unexposed() { return (int)200L; }

    static final MemoryLayout CXType$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    );
    static final jdk.incubator.foreign.MemoryLayout CXType$struct$LAYOUT() { return CXType$struct$LAYOUT_; }

    static final MemoryLayout CXType$kind$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXType$kind$LAYOUT() { return CXType$kind$LAYOUT_; }

    static final VarHandle CXType$kind$VH_ = CXType$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("kind"));
    static final java.lang.invoke.VarHandle CXType$kind$VH() { return CXType$kind$VH_; }

    static final FunctionDescriptor clang_getCursorType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorType$FUNC() { return clang_getCursorType$FUNC_; }

    static final MethodHandle clang_getCursorType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorType$MH() { return clang_getCursorType$MH_; }

    static final FunctionDescriptor clang_getTypeSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTypeSpelling$FUNC() { return clang_getTypeSpelling$FUNC_; }

    static final MethodHandle clang_getTypeSpelling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypeSpelling",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTypeSpelling$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTypeSpelling$MH() { return clang_getTypeSpelling$MH_; }

    static final FunctionDescriptor clang_getTypedefDeclUnderlyingType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTypedefDeclUnderlyingType$FUNC() { return clang_getTypedefDeclUnderlyingType$FUNC_; }

    static final MethodHandle clang_getTypedefDeclUnderlyingType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypedefDeclUnderlyingType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTypedefDeclUnderlyingType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTypedefDeclUnderlyingType$MH() { return clang_getTypedefDeclUnderlyingType$MH_; }

    static final FunctionDescriptor clang_getEnumDeclIntegerType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getEnumDeclIntegerType$FUNC() { return clang_getEnumDeclIntegerType$FUNC_; }

    static final MethodHandle clang_getEnumDeclIntegerType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getEnumDeclIntegerType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getEnumDeclIntegerType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getEnumDeclIntegerType$MH() { return clang_getEnumDeclIntegerType$MH_; }

    static final FunctionDescriptor clang_getEnumConstantDeclValue$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getEnumConstantDeclValue$FUNC() { return clang_getEnumConstantDeclValue$FUNC_; }

    static final MethodHandle clang_getEnumConstantDeclValue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getEnumConstantDeclValue",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        clang_getEnumConstantDeclValue$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getEnumConstantDeclValue$MH() { return clang_getEnumConstantDeclValue$MH_; }

    static final FunctionDescriptor clang_getEnumConstantDeclUnsignedValue$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getEnumConstantDeclUnsignedValue$FUNC() { return clang_getEnumConstantDeclUnsignedValue$FUNC_; }

    static final MethodHandle clang_getEnumConstantDeclUnsignedValue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getEnumConstantDeclUnsignedValue",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        clang_getEnumConstantDeclUnsignedValue$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getEnumConstantDeclUnsignedValue$MH() { return clang_getEnumConstantDeclUnsignedValue$MH_; }

    static final FunctionDescriptor clang_getFieldDeclBitWidth$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getFieldDeclBitWidth$FUNC() { return clang_getFieldDeclBitWidth$FUNC_; }

    static final MethodHandle clang_getFieldDeclBitWidth$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFieldDeclBitWidth",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getFieldDeclBitWidth$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getFieldDeclBitWidth$MH() { return clang_getFieldDeclBitWidth$MH_; }

    static final FunctionDescriptor clang_Cursor_getNumArguments$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getNumArguments$FUNC() { return clang_Cursor_getNumArguments$FUNC_; }

    static final MethodHandle clang_Cursor_getNumArguments$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getNumArguments",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_getNumArguments$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getNumArguments$MH() { return clang_Cursor_getNumArguments$MH_; }

    static final FunctionDescriptor clang_Cursor_getArgument$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getArgument$FUNC() { return clang_Cursor_getArgument$FUNC_; }

    static final MethodHandle clang_Cursor_getArgument$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getArgument",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getArgument$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getArgument$MH() { return clang_Cursor_getArgument$MH_; }

    static final int CXTemplateArgumentKind_Null() { return (int)0L; }

    static final int CXTemplateArgumentKind_Type() { return (int)1L; }

    static final int CXTemplateArgumentKind_Declaration() { return (int)2L; }

    static final int CXTemplateArgumentKind_NullPtr() { return (int)3L; }

    static final int CXTemplateArgumentKind_Integral() { return (int)4L; }

    static final int CXTemplateArgumentKind_Template() { return (int)5L; }

    static final int CXTemplateArgumentKind_TemplateExpansion() { return (int)6L; }

    static final int CXTemplateArgumentKind_Expression() { return (int)7L; }

    static final int CXTemplateArgumentKind_Pack() { return (int)8L; }

    static final int CXTemplateArgumentKind_Invalid() { return (int)9L; }

    static final FunctionDescriptor clang_Cursor_getNumTemplateArguments$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getNumTemplateArguments$FUNC() { return clang_Cursor_getNumTemplateArguments$FUNC_; }

    static final MethodHandle clang_Cursor_getNumTemplateArguments$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getNumTemplateArguments",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_getNumTemplateArguments$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getNumTemplateArguments$MH() { return clang_Cursor_getNumTemplateArguments$MH_; }

    static final FunctionDescriptor clang_Cursor_getTemplateArgumentKind$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getTemplateArgumentKind$FUNC() { return clang_Cursor_getTemplateArgumentKind$FUNC_; }

    static final MethodHandle clang_Cursor_getTemplateArgumentKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getTemplateArgumentKind",
        "(Ljdk/incubator/foreign/MemorySegment;I)I",
        clang_Cursor_getTemplateArgumentKind$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getTemplateArgumentKind$MH() { return clang_Cursor_getTemplateArgumentKind$MH_; }

    static final FunctionDescriptor clang_Cursor_getTemplateArgumentType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getTemplateArgumentType$FUNC() { return clang_Cursor_getTemplateArgumentType$FUNC_; }

    static final MethodHandle clang_Cursor_getTemplateArgumentType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getTemplateArgumentType",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getTemplateArgumentType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getTemplateArgumentType$MH() { return clang_Cursor_getTemplateArgumentType$MH_; }

    static final FunctionDescriptor clang_Cursor_getTemplateArgumentValue$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getTemplateArgumentValue$FUNC() { return clang_Cursor_getTemplateArgumentValue$FUNC_; }

    static final MethodHandle clang_Cursor_getTemplateArgumentValue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getTemplateArgumentValue",
        "(Ljdk/incubator/foreign/MemorySegment;I)J",
        clang_Cursor_getTemplateArgumentValue$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getTemplateArgumentValue$MH() { return clang_Cursor_getTemplateArgumentValue$MH_; }

    static final FunctionDescriptor clang_Cursor_getTemplateArgumentUnsignedValue$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getTemplateArgumentUnsignedValue$FUNC() { return clang_Cursor_getTemplateArgumentUnsignedValue$FUNC_; }

    static final MethodHandle clang_Cursor_getTemplateArgumentUnsignedValue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getTemplateArgumentUnsignedValue",
        "(Ljdk/incubator/foreign/MemorySegment;I)J",
        clang_Cursor_getTemplateArgumentUnsignedValue$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getTemplateArgumentUnsignedValue$MH() { return clang_Cursor_getTemplateArgumentUnsignedValue$MH_; }

    static final FunctionDescriptor clang_equalTypes$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_equalTypes$FUNC() { return clang_equalTypes$FUNC_; }

    static final MethodHandle clang_equalTypes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_equalTypes",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
        clang_equalTypes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_equalTypes$MH() { return clang_equalTypes$MH_; }

    static final FunctionDescriptor clang_getCanonicalType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCanonicalType$FUNC() { return clang_getCanonicalType$FUNC_; }

    static final MethodHandle clang_getCanonicalType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCanonicalType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCanonicalType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCanonicalType$MH() { return clang_getCanonicalType$MH_; }

    static final FunctionDescriptor clang_getLocalUnqualifiedType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getLocalUnqualifiedType$FUNC() { return clang_getLocalUnqualifiedType$FUNC_; }

    static final MethodHandle clang_getLocalUnqualifiedType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getLocalUnqualifiedType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getLocalUnqualifiedType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getLocalUnqualifiedType$MH() { return clang_getLocalUnqualifiedType$MH_; }

    static final FunctionDescriptor clang_isConstQualifiedType$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isConstQualifiedType$FUNC() { return clang_isConstQualifiedType$FUNC_; }

    static final MethodHandle clang_isConstQualifiedType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isConstQualifiedType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_isConstQualifiedType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isConstQualifiedType$MH() { return clang_isConstQualifiedType$MH_; }

    static final FunctionDescriptor clang_Cursor_isMacroFunctionLike$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isMacroFunctionLike$FUNC() { return clang_Cursor_isMacroFunctionLike$FUNC_; }

    static final MethodHandle clang_Cursor_isMacroFunctionLike$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isMacroFunctionLike",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isMacroFunctionLike$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_isMacroFunctionLike$MH() { return clang_Cursor_isMacroFunctionLike$MH_; }

    static final FunctionDescriptor clang_Cursor_isMacroBuiltin$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isMacroBuiltin$FUNC() { return clang_Cursor_isMacroBuiltin$FUNC_; }

    static final MethodHandle clang_Cursor_isMacroBuiltin$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isMacroBuiltin",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isMacroBuiltin$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_isMacroBuiltin$MH() { return clang_Cursor_isMacroBuiltin$MH_; }

    static final FunctionDescriptor clang_Cursor_isFunctionInlined$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isFunctionInlined$FUNC() { return clang_Cursor_isFunctionInlined$FUNC_; }

    static final MethodHandle clang_Cursor_isFunctionInlined$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isFunctionInlined",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isFunctionInlined$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_isFunctionInlined$MH() { return clang_Cursor_isFunctionInlined$MH_; }

    static final FunctionDescriptor clang_isVolatileQualifiedType$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isVolatileQualifiedType$FUNC() { return clang_isVolatileQualifiedType$FUNC_; }

    static final MethodHandle clang_isVolatileQualifiedType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isVolatileQualifiedType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_isVolatileQualifiedType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isVolatileQualifiedType$MH() { return clang_isVolatileQualifiedType$MH_; }

    static final FunctionDescriptor clang_isRestrictQualifiedType$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isRestrictQualifiedType$FUNC() { return clang_isRestrictQualifiedType$FUNC_; }

    static final MethodHandle clang_isRestrictQualifiedType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isRestrictQualifiedType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_isRestrictQualifiedType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isRestrictQualifiedType$MH() { return clang_isRestrictQualifiedType$MH_; }

    static final FunctionDescriptor clang_getAddressSpace$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getAddressSpace$FUNC() { return clang_getAddressSpace$FUNC_; }

    static final MethodHandle clang_getAddressSpace$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getAddressSpace",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getAddressSpace$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getAddressSpace$MH() { return clang_getAddressSpace$MH_; }

    static final FunctionDescriptor clang_getTypedefName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTypedefName$FUNC() { return clang_getTypedefName$FUNC_; }

    static final MethodHandle clang_getTypedefName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypedefName",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTypedefName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTypedefName$MH() { return clang_getTypedefName$MH_; }

    static final FunctionDescriptor clang_getPointeeType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getPointeeType$FUNC() { return clang_getPointeeType$FUNC_; }

    static final MethodHandle clang_getPointeeType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getPointeeType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getPointeeType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getPointeeType$MH() { return clang_getPointeeType$MH_; }

    static final FunctionDescriptor clang_getTypeDeclaration$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTypeDeclaration$FUNC() { return clang_getTypeDeclaration$FUNC_; }

    static final MethodHandle clang_getTypeDeclaration$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypeDeclaration",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTypeDeclaration$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTypeDeclaration$MH() { return clang_getTypeDeclaration$MH_; }

    static final FunctionDescriptor clang_getDeclObjCTypeEncoding$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDeclObjCTypeEncoding$FUNC() { return clang_getDeclObjCTypeEncoding$FUNC_; }

    static final MethodHandle clang_getDeclObjCTypeEncoding$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDeclObjCTypeEncoding",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getDeclObjCTypeEncoding$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDeclObjCTypeEncoding$MH() { return clang_getDeclObjCTypeEncoding$MH_; }

    static final FunctionDescriptor clang_Type_getObjCEncoding$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getObjCEncoding$FUNC() { return clang_Type_getObjCEncoding$FUNC_; }

    static final MethodHandle clang_Type_getObjCEncoding$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getObjCEncoding",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getObjCEncoding$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getObjCEncoding$MH() { return clang_Type_getObjCEncoding$MH_; }

    static final FunctionDescriptor clang_getTypeKindSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTypeKindSpelling$FUNC() { return clang_getTypeKindSpelling$FUNC_; }

    static final MethodHandle clang_getTypeKindSpelling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypeKindSpelling",
        "(I)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTypeKindSpelling$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTypeKindSpelling$MH() { return clang_getTypeKindSpelling$MH_; }

    static final FunctionDescriptor clang_getFunctionTypeCallingConv$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getFunctionTypeCallingConv$FUNC() { return clang_getFunctionTypeCallingConv$FUNC_; }

    static final MethodHandle clang_getFunctionTypeCallingConv$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFunctionTypeCallingConv",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getFunctionTypeCallingConv$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getFunctionTypeCallingConv$MH() { return clang_getFunctionTypeCallingConv$MH_; }

    static final FunctionDescriptor clang_getResultType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getResultType$FUNC() { return clang_getResultType$FUNC_; }

    static final MethodHandle clang_getResultType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getResultType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getResultType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getResultType$MH() { return clang_getResultType$MH_; }

    static final FunctionDescriptor clang_getExceptionSpecificationType$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getExceptionSpecificationType$FUNC() { return clang_getExceptionSpecificationType$FUNC_; }

    static final MethodHandle clang_getExceptionSpecificationType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getExceptionSpecificationType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getExceptionSpecificationType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getExceptionSpecificationType$MH() { return clang_getExceptionSpecificationType$MH_; }

    static final FunctionDescriptor clang_getNumArgTypes$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getNumArgTypes$FUNC() { return clang_getNumArgTypes$FUNC_; }

    static final MethodHandle clang_getNumArgTypes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumArgTypes",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getNumArgTypes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getNumArgTypes$MH() { return clang_getNumArgTypes$MH_; }

    static final FunctionDescriptor clang_getArgType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getArgType$FUNC() { return clang_getArgType$FUNC_; }

    static final MethodHandle clang_getArgType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getArgType",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_getArgType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getArgType$MH() { return clang_getArgType$MH_; }

    static final FunctionDescriptor clang_Type_getObjCObjectBaseType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getObjCObjectBaseType$FUNC() { return clang_Type_getObjCObjectBaseType$FUNC_; }

    static final MethodHandle clang_Type_getObjCObjectBaseType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getObjCObjectBaseType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getObjCObjectBaseType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getObjCObjectBaseType$MH() { return clang_Type_getObjCObjectBaseType$MH_; }

    static final FunctionDescriptor clang_Type_getNumObjCProtocolRefs$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getNumObjCProtocolRefs$FUNC() { return clang_Type_getNumObjCProtocolRefs$FUNC_; }

    static final MethodHandle clang_Type_getNumObjCProtocolRefs$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getNumObjCProtocolRefs",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Type_getNumObjCProtocolRefs$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getNumObjCProtocolRefs$MH() { return clang_Type_getNumObjCProtocolRefs$MH_; }

    static final FunctionDescriptor clang_Type_getObjCProtocolDecl$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getObjCProtocolDecl$FUNC() { return clang_Type_getObjCProtocolDecl$FUNC_; }

    static final MethodHandle clang_Type_getObjCProtocolDecl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getObjCProtocolDecl",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getObjCProtocolDecl$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getObjCProtocolDecl$MH() { return clang_Type_getObjCProtocolDecl$MH_; }

    static final FunctionDescriptor clang_Type_getNumObjCTypeArgs$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getNumObjCTypeArgs$FUNC() { return clang_Type_getNumObjCTypeArgs$FUNC_; }

    static final MethodHandle clang_Type_getNumObjCTypeArgs$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getNumObjCTypeArgs",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Type_getNumObjCTypeArgs$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getNumObjCTypeArgs$MH() { return clang_Type_getNumObjCTypeArgs$MH_; }

    static final FunctionDescriptor clang_Type_getObjCTypeArg$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getObjCTypeArg$FUNC() { return clang_Type_getObjCTypeArg$FUNC_; }

    static final MethodHandle clang_Type_getObjCTypeArg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getObjCTypeArg",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getObjCTypeArg$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getObjCTypeArg$MH() { return clang_Type_getObjCTypeArg$MH_; }

    static final FunctionDescriptor clang_isFunctionTypeVariadic$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isFunctionTypeVariadic$FUNC() { return clang_isFunctionTypeVariadic$FUNC_; }

    static final MethodHandle clang_isFunctionTypeVariadic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isFunctionTypeVariadic",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_isFunctionTypeVariadic$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isFunctionTypeVariadic$MH() { return clang_isFunctionTypeVariadic$MH_; }

    static final FunctionDescriptor clang_getCursorResultType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorResultType$FUNC() { return clang_getCursorResultType$FUNC_; }

    static final MethodHandle clang_getCursorResultType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorResultType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorResultType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorResultType$MH() { return clang_getCursorResultType$MH_; }

    static final FunctionDescriptor clang_getCursorExceptionSpecificationType$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorExceptionSpecificationType$FUNC() { return clang_getCursorExceptionSpecificationType$FUNC_; }

    static final MethodHandle clang_getCursorExceptionSpecificationType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorExceptionSpecificationType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getCursorExceptionSpecificationType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorExceptionSpecificationType$MH() { return clang_getCursorExceptionSpecificationType$MH_; }

    static final FunctionDescriptor clang_isPODType$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isPODType$FUNC() { return clang_isPODType$FUNC_; }

    static final MethodHandle clang_isPODType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isPODType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_isPODType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isPODType$MH() { return clang_isPODType$MH_; }

    static final FunctionDescriptor clang_getElementType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getElementType$FUNC() { return clang_getElementType$FUNC_; }

    static final MethodHandle clang_getElementType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getElementType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getElementType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getElementType$MH() { return clang_getElementType$MH_; }

    static final FunctionDescriptor clang_getNumElements$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getNumElements$FUNC() { return clang_getNumElements$FUNC_; }

    static final MethodHandle clang_getNumElements$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumElements",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        clang_getNumElements$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getNumElements$MH() { return clang_getNumElements$MH_; }

    static final FunctionDescriptor clang_getArrayElementType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getArrayElementType$FUNC() { return clang_getArrayElementType$FUNC_; }

    static final MethodHandle clang_getArrayElementType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getArrayElementType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getArrayElementType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getArrayElementType$MH() { return clang_getArrayElementType$MH_; }

    static final FunctionDescriptor clang_getArraySize$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getArraySize$FUNC() { return clang_getArraySize$FUNC_; }

    static final MethodHandle clang_getArraySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getArraySize",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        clang_getArraySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getArraySize$MH() { return clang_getArraySize$MH_; }

    static final FunctionDescriptor clang_Type_getNamedType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getNamedType$FUNC() { return clang_Type_getNamedType$FUNC_; }

    static final MethodHandle clang_Type_getNamedType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getNamedType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getNamedType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getNamedType$MH() { return clang_Type_getNamedType$MH_; }

    static final FunctionDescriptor clang_Type_isTransparentTagTypedef$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_isTransparentTagTypedef$FUNC() { return clang_Type_isTransparentTagTypedef$FUNC_; }

    static final MethodHandle clang_Type_isTransparentTagTypedef$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_isTransparentTagTypedef",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Type_isTransparentTagTypedef$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_isTransparentTagTypedef$MH() { return clang_Type_isTransparentTagTypedef$MH_; }

    static final int CXTypeNullability_NonNull() { return (int)0L; }

    static final int CXTypeNullability_Nullable() { return (int)1L; }

    static final int CXTypeNullability_Unspecified() { return (int)2L; }

    static final int CXTypeNullability_Invalid() { return (int)3L; }

    static final FunctionDescriptor clang_Type_getNullability$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getNullability$FUNC() { return clang_Type_getNullability$FUNC_; }

    static final MethodHandle clang_Type_getNullability$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getNullability",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Type_getNullability$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getNullability$MH() { return clang_Type_getNullability$MH_; }

    static final int CXTypeLayoutError_Invalid() { return (int)-1L; }

    static final int CXTypeLayoutError_Incomplete() { return (int)-2L; }

    static final int CXTypeLayoutError_Dependent() { return (int)-3L; }

    static final int CXTypeLayoutError_NotConstantSize() { return (int)-4L; }

    static final int CXTypeLayoutError_InvalidFieldName() { return (int)-5L; }

    static final int CXTypeLayoutError_Undeduced() { return (int)-6L; }

    static final FunctionDescriptor clang_Type_getAlignOf$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getAlignOf$FUNC() { return clang_Type_getAlignOf$FUNC_; }

    static final MethodHandle clang_Type_getAlignOf$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getAlignOf",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        clang_Type_getAlignOf$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getAlignOf$MH() { return clang_Type_getAlignOf$MH_; }

    static final FunctionDescriptor clang_Type_getClassType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getClassType$FUNC() { return clang_Type_getClassType$FUNC_; }

    static final MethodHandle clang_Type_getClassType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getClassType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getClassType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getClassType$MH() { return clang_Type_getClassType$MH_; }

    static final FunctionDescriptor clang_Type_getSizeOf$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getSizeOf$FUNC() { return clang_Type_getSizeOf$FUNC_; }

    static final MethodHandle clang_Type_getSizeOf$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getSizeOf",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        clang_Type_getSizeOf$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getSizeOf$MH() { return clang_Type_getSizeOf$MH_; }

    static final FunctionDescriptor clang_Type_getOffsetOf$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getOffsetOf$FUNC() { return clang_Type_getOffsetOf$FUNC_; }

    static final MethodHandle clang_Type_getOffsetOf$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getOffsetOf",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)J",
        clang_Type_getOffsetOf$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getOffsetOf$MH() { return clang_Type_getOffsetOf$MH_; }

    static final FunctionDescriptor clang_Type_getModifiedType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getModifiedType$FUNC() { return clang_Type_getModifiedType$FUNC_; }

    static final MethodHandle clang_Type_getModifiedType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getModifiedType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getModifiedType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getModifiedType$MH() { return clang_Type_getModifiedType$MH_; }

    static final FunctionDescriptor clang_Cursor_getOffsetOfField$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getOffsetOfField$FUNC() { return clang_Cursor_getOffsetOfField$FUNC_; }

    static final MethodHandle clang_Cursor_getOffsetOfField$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getOffsetOfField",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        clang_Cursor_getOffsetOfField$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getOffsetOfField$MH() { return clang_Cursor_getOffsetOfField$MH_; }

    static final FunctionDescriptor clang_Cursor_isAnonymous$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isAnonymous$FUNC() { return clang_Cursor_isAnonymous$FUNC_; }

    static final MethodHandle clang_Cursor_isAnonymous$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isAnonymous",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isAnonymous$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_isAnonymous$MH() { return clang_Cursor_isAnonymous$MH_; }

    static final FunctionDescriptor clang_Cursor_isAnonymousRecordDecl$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isAnonymousRecordDecl$FUNC() { return clang_Cursor_isAnonymousRecordDecl$FUNC_; }

    static final MethodHandle clang_Cursor_isAnonymousRecordDecl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isAnonymousRecordDecl",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isAnonymousRecordDecl$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_isAnonymousRecordDecl$MH() { return clang_Cursor_isAnonymousRecordDecl$MH_; }

}

