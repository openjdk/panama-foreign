/*
 *  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 *  This code is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License version 2 only, as
 *  published by the Free Software Foundation.  Oracle designates this
 *  particular file as subject to the "Classpath" exception as provided
 *  by Oracle in the LICENSE file that accompanied this code.
 *
 *  This code is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 *  version 2 for more details (a copy is included in the LICENSE file that
 *  accompanied this code).
 *
 *  You should have received a copy of the GNU General Public License version
 *  2 along with this work; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 *  or visit www.oracle.com if you need additional information or have any
 *  questions.
 *
 */

// Generated by jextract

package jdk.internal.clang.libclang;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.*;

public class Index_h$constants_1 extends Index_h$constants_0 {
    private static final FunctionDescriptor clang_getCursorType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCursorType$FUNC() { return clang_getCursorType$FUNC_; }

    private static final MethodHandle clang_getCursorType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCursorType$MH() { return clang_getCursorType$MH_; }

    private static final FunctionDescriptor clang_getTypeSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getTypeSpelling$FUNC() { return clang_getTypeSpelling$FUNC_; }

    private static final MethodHandle clang_getTypeSpelling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypeSpelling",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTypeSpelling$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getTypeSpelling$MH() { return clang_getTypeSpelling$MH_; }

    private static final FunctionDescriptor clang_getTypedefDeclUnderlyingType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getTypedefDeclUnderlyingType$FUNC() { return clang_getTypedefDeclUnderlyingType$FUNC_; }

    private static final MethodHandle clang_getTypedefDeclUnderlyingType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypedefDeclUnderlyingType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTypedefDeclUnderlyingType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getTypedefDeclUnderlyingType$MH() { return clang_getTypedefDeclUnderlyingType$MH_; }

    private static final FunctionDescriptor clang_getEnumDeclIntegerType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getEnumDeclIntegerType$FUNC() { return clang_getEnumDeclIntegerType$FUNC_; }

    private static final MethodHandle clang_getEnumDeclIntegerType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getEnumDeclIntegerType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getEnumDeclIntegerType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getEnumDeclIntegerType$MH() { return clang_getEnumDeclIntegerType$MH_; }

    private static final FunctionDescriptor clang_getEnumConstantDeclValue$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getEnumConstantDeclValue$FUNC() { return clang_getEnumConstantDeclValue$FUNC_; }

    private static final MethodHandle clang_getEnumConstantDeclValue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getEnumConstantDeclValue",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        clang_getEnumConstantDeclValue$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getEnumConstantDeclValue$MH() { return clang_getEnumConstantDeclValue$MH_; }

    private static final FunctionDescriptor clang_getEnumConstantDeclUnsignedValue$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getEnumConstantDeclUnsignedValue$FUNC() { return clang_getEnumConstantDeclUnsignedValue$FUNC_; }

    private static final MethodHandle clang_getEnumConstantDeclUnsignedValue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getEnumConstantDeclUnsignedValue",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        clang_getEnumConstantDeclUnsignedValue$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getEnumConstantDeclUnsignedValue$MH() { return clang_getEnumConstantDeclUnsignedValue$MH_; }

    private static final FunctionDescriptor clang_getFieldDeclBitWidth$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getFieldDeclBitWidth$FUNC() { return clang_getFieldDeclBitWidth$FUNC_; }

    private static final MethodHandle clang_getFieldDeclBitWidth$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFieldDeclBitWidth",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getFieldDeclBitWidth$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getFieldDeclBitWidth$MH() { return clang_getFieldDeclBitWidth$MH_; }

    private static final FunctionDescriptor clang_Cursor_getNumArguments$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getNumArguments$FUNC() { return clang_Cursor_getNumArguments$FUNC_; }

    private static final MethodHandle clang_Cursor_getNumArguments$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getNumArguments",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_getNumArguments$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getNumArguments$MH() { return clang_Cursor_getNumArguments$MH_; }

    private static final FunctionDescriptor clang_Cursor_getArgument$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getArgument$FUNC() { return clang_Cursor_getArgument$FUNC_; }

    private static final MethodHandle clang_Cursor_getArgument$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getArgument",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getArgument$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getArgument$MH() { return clang_Cursor_getArgument$MH_; }

    public static int CXTemplateArgumentKind_Null() { return (int)0L; }

    public static int CXTemplateArgumentKind_Type() { return (int)1L; }

    public static int CXTemplateArgumentKind_Declaration() { return (int)2L; }

    public static int CXTemplateArgumentKind_NullPtr() { return (int)3L; }

    public static int CXTemplateArgumentKind_Integral() { return (int)4L; }

    public static int CXTemplateArgumentKind_Template() { return (int)5L; }

    public static int CXTemplateArgumentKind_TemplateExpansion() { return (int)6L; }

    public static int CXTemplateArgumentKind_Expression() { return (int)7L; }

    public static int CXTemplateArgumentKind_Pack() { return (int)8L; }

    public static int CXTemplateArgumentKind_Invalid() { return (int)9L; }

    private static final FunctionDescriptor clang_Cursor_getNumTemplateArguments$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getNumTemplateArguments$FUNC() { return clang_Cursor_getNumTemplateArguments$FUNC_; }

    private static final MethodHandle clang_Cursor_getNumTemplateArguments$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getNumTemplateArguments",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_getNumTemplateArguments$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getNumTemplateArguments$MH() { return clang_Cursor_getNumTemplateArguments$MH_; }

    private static final FunctionDescriptor clang_Cursor_getTemplateArgumentKind$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getTemplateArgumentKind$FUNC() { return clang_Cursor_getTemplateArgumentKind$FUNC_; }

    private static final MethodHandle clang_Cursor_getTemplateArgumentKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getTemplateArgumentKind",
        "(Ljdk/incubator/foreign/MemorySegment;I)I",
        clang_Cursor_getTemplateArgumentKind$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getTemplateArgumentKind$MH() { return clang_Cursor_getTemplateArgumentKind$MH_; }

    private static final FunctionDescriptor clang_Cursor_getTemplateArgumentType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getTemplateArgumentType$FUNC() { return clang_Cursor_getTemplateArgumentType$FUNC_; }

    private static final MethodHandle clang_Cursor_getTemplateArgumentType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getTemplateArgumentType",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getTemplateArgumentType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getTemplateArgumentType$MH() { return clang_Cursor_getTemplateArgumentType$MH_; }

    private static final FunctionDescriptor clang_Cursor_getTemplateArgumentValue$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getTemplateArgumentValue$FUNC() { return clang_Cursor_getTemplateArgumentValue$FUNC_; }

    private static final MethodHandle clang_Cursor_getTemplateArgumentValue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getTemplateArgumentValue",
        "(Ljdk/incubator/foreign/MemorySegment;I)J",
        clang_Cursor_getTemplateArgumentValue$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getTemplateArgumentValue$MH() { return clang_Cursor_getTemplateArgumentValue$MH_; }

    private static final FunctionDescriptor clang_Cursor_getTemplateArgumentUnsignedValue$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getTemplateArgumentUnsignedValue$FUNC() { return clang_Cursor_getTemplateArgumentUnsignedValue$FUNC_; }

    private static final MethodHandle clang_Cursor_getTemplateArgumentUnsignedValue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getTemplateArgumentUnsignedValue",
        "(Ljdk/incubator/foreign/MemorySegment;I)J",
        clang_Cursor_getTemplateArgumentUnsignedValue$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getTemplateArgumentUnsignedValue$MH() { return clang_Cursor_getTemplateArgumentUnsignedValue$MH_; }

    private static final FunctionDescriptor clang_equalTypes$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_equalTypes$FUNC() { return clang_equalTypes$FUNC_; }

    private static final MethodHandle clang_equalTypes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_equalTypes",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
        clang_equalTypes$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_equalTypes$MH() { return clang_equalTypes$MH_; }

    private static final FunctionDescriptor clang_getCanonicalType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCanonicalType$FUNC() { return clang_getCanonicalType$FUNC_; }

    private static final MethodHandle clang_getCanonicalType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCanonicalType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCanonicalType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCanonicalType$MH() { return clang_getCanonicalType$MH_; }

    private static final FunctionDescriptor clang_getLocalUnqualifiedType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getLocalUnqualifiedType$FUNC() { return clang_getLocalUnqualifiedType$FUNC_; }

    private static final MethodHandle clang_getLocalUnqualifiedType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getLocalUnqualifiedType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getLocalUnqualifiedType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getLocalUnqualifiedType$MH() { return clang_getLocalUnqualifiedType$MH_; }

    private static final FunctionDescriptor clang_isConstQualifiedType$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_isConstQualifiedType$FUNC() { return clang_isConstQualifiedType$FUNC_; }

    private static final MethodHandle clang_isConstQualifiedType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isConstQualifiedType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_isConstQualifiedType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_isConstQualifiedType$MH() { return clang_isConstQualifiedType$MH_; }

    private static final FunctionDescriptor clang_Cursor_isMacroFunctionLike$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isMacroFunctionLike$FUNC() { return clang_Cursor_isMacroFunctionLike$FUNC_; }

    private static final MethodHandle clang_Cursor_isMacroFunctionLike$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isMacroFunctionLike",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isMacroFunctionLike$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_isMacroFunctionLike$MH() { return clang_Cursor_isMacroFunctionLike$MH_; }

    private static final FunctionDescriptor clang_Cursor_isMacroBuiltin$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isMacroBuiltin$FUNC() { return clang_Cursor_isMacroBuiltin$FUNC_; }

    private static final MethodHandle clang_Cursor_isMacroBuiltin$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isMacroBuiltin",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isMacroBuiltin$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_isMacroBuiltin$MH() { return clang_Cursor_isMacroBuiltin$MH_; }

    private static final FunctionDescriptor clang_Cursor_isFunctionInlined$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isFunctionInlined$FUNC() { return clang_Cursor_isFunctionInlined$FUNC_; }

    private static final MethodHandle clang_Cursor_isFunctionInlined$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isFunctionInlined",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isFunctionInlined$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_isFunctionInlined$MH() { return clang_Cursor_isFunctionInlined$MH_; }

    private static final FunctionDescriptor clang_isVolatileQualifiedType$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_isVolatileQualifiedType$FUNC() { return clang_isVolatileQualifiedType$FUNC_; }

    private static final MethodHandle clang_isVolatileQualifiedType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isVolatileQualifiedType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_isVolatileQualifiedType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_isVolatileQualifiedType$MH() { return clang_isVolatileQualifiedType$MH_; }

    private static final FunctionDescriptor clang_isRestrictQualifiedType$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_isRestrictQualifiedType$FUNC() { return clang_isRestrictQualifiedType$FUNC_; }

    private static final MethodHandle clang_isRestrictQualifiedType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isRestrictQualifiedType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_isRestrictQualifiedType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_isRestrictQualifiedType$MH() { return clang_isRestrictQualifiedType$MH_; }

    private static final FunctionDescriptor clang_getAddressSpace$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getAddressSpace$FUNC() { return clang_getAddressSpace$FUNC_; }

    private static final MethodHandle clang_getAddressSpace$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getAddressSpace",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getAddressSpace$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getAddressSpace$MH() { return clang_getAddressSpace$MH_; }

    private static final FunctionDescriptor clang_getTypedefName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getTypedefName$FUNC() { return clang_getTypedefName$FUNC_; }

    private static final MethodHandle clang_getTypedefName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypedefName",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTypedefName$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getTypedefName$MH() { return clang_getTypedefName$MH_; }

    private static final FunctionDescriptor clang_getPointeeType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getPointeeType$FUNC() { return clang_getPointeeType$FUNC_; }

    private static final MethodHandle clang_getPointeeType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getPointeeType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getPointeeType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getPointeeType$MH() { return clang_getPointeeType$MH_; }

    private static final FunctionDescriptor clang_getTypeDeclaration$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getTypeDeclaration$FUNC() { return clang_getTypeDeclaration$FUNC_; }

    private static final MethodHandle clang_getTypeDeclaration$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypeDeclaration",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTypeDeclaration$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getTypeDeclaration$MH() { return clang_getTypeDeclaration$MH_; }

    private static final FunctionDescriptor clang_getDeclObjCTypeEncoding$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getDeclObjCTypeEncoding$FUNC() { return clang_getDeclObjCTypeEncoding$FUNC_; }

    private static final MethodHandle clang_getDeclObjCTypeEncoding$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDeclObjCTypeEncoding",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getDeclObjCTypeEncoding$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getDeclObjCTypeEncoding$MH() { return clang_getDeclObjCTypeEncoding$MH_; }

    private static final FunctionDescriptor clang_Type_getObjCEncoding$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getObjCEncoding$FUNC() { return clang_Type_getObjCEncoding$FUNC_; }

    private static final MethodHandle clang_Type_getObjCEncoding$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getObjCEncoding",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getObjCEncoding$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getObjCEncoding$MH() { return clang_Type_getObjCEncoding$MH_; }

    private static final FunctionDescriptor clang_getTypeKindSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getTypeKindSpelling$FUNC() { return clang_getTypeKindSpelling$FUNC_; }

    private static final MethodHandle clang_getTypeKindSpelling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypeKindSpelling",
        "(I)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTypeKindSpelling$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getTypeKindSpelling$MH() { return clang_getTypeKindSpelling$MH_; }

    private static final FunctionDescriptor clang_getFunctionTypeCallingConv$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getFunctionTypeCallingConv$FUNC() { return clang_getFunctionTypeCallingConv$FUNC_; }

    private static final MethodHandle clang_getFunctionTypeCallingConv$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFunctionTypeCallingConv",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getFunctionTypeCallingConv$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getFunctionTypeCallingConv$MH() { return clang_getFunctionTypeCallingConv$MH_; }

    private static final FunctionDescriptor clang_getResultType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getResultType$FUNC() { return clang_getResultType$FUNC_; }

    private static final MethodHandle clang_getResultType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getResultType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getResultType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getResultType$MH() { return clang_getResultType$MH_; }

    private static final FunctionDescriptor clang_getExceptionSpecificationType$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getExceptionSpecificationType$FUNC() { return clang_getExceptionSpecificationType$FUNC_; }

    private static final MethodHandle clang_getExceptionSpecificationType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getExceptionSpecificationType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getExceptionSpecificationType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getExceptionSpecificationType$MH() { return clang_getExceptionSpecificationType$MH_; }

    private static final FunctionDescriptor clang_getNumArgTypes$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getNumArgTypes$FUNC() { return clang_getNumArgTypes$FUNC_; }

    private static final MethodHandle clang_getNumArgTypes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumArgTypes",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getNumArgTypes$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getNumArgTypes$MH() { return clang_getNumArgTypes$MH_; }

    private static final FunctionDescriptor clang_getArgType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getArgType$FUNC() { return clang_getArgType$FUNC_; }

    private static final MethodHandle clang_getArgType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getArgType",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_getArgType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getArgType$MH() { return clang_getArgType$MH_; }

    private static final FunctionDescriptor clang_Type_getObjCObjectBaseType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getObjCObjectBaseType$FUNC() { return clang_Type_getObjCObjectBaseType$FUNC_; }

    private static final MethodHandle clang_Type_getObjCObjectBaseType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getObjCObjectBaseType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getObjCObjectBaseType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getObjCObjectBaseType$MH() { return clang_Type_getObjCObjectBaseType$MH_; }

    private static final FunctionDescriptor clang_Type_getNumObjCProtocolRefs$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getNumObjCProtocolRefs$FUNC() { return clang_Type_getNumObjCProtocolRefs$FUNC_; }

    private static final MethodHandle clang_Type_getNumObjCProtocolRefs$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getNumObjCProtocolRefs",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Type_getNumObjCProtocolRefs$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getNumObjCProtocolRefs$MH() { return clang_Type_getNumObjCProtocolRefs$MH_; }

    private static final FunctionDescriptor clang_Type_getObjCProtocolDecl$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getObjCProtocolDecl$FUNC() { return clang_Type_getObjCProtocolDecl$FUNC_; }

    private static final MethodHandle clang_Type_getObjCProtocolDecl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getObjCProtocolDecl",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getObjCProtocolDecl$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getObjCProtocolDecl$MH() { return clang_Type_getObjCProtocolDecl$MH_; }

    private static final FunctionDescriptor clang_Type_getNumObjCTypeArgs$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getNumObjCTypeArgs$FUNC() { return clang_Type_getNumObjCTypeArgs$FUNC_; }

    private static final MethodHandle clang_Type_getNumObjCTypeArgs$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getNumObjCTypeArgs",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Type_getNumObjCTypeArgs$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getNumObjCTypeArgs$MH() { return clang_Type_getNumObjCTypeArgs$MH_; }

    private static final FunctionDescriptor clang_Type_getObjCTypeArg$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getObjCTypeArg$FUNC() { return clang_Type_getObjCTypeArg$FUNC_; }

    private static final MethodHandle clang_Type_getObjCTypeArg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getObjCTypeArg",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getObjCTypeArg$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getObjCTypeArg$MH() { return clang_Type_getObjCTypeArg$MH_; }

    private static final FunctionDescriptor clang_isFunctionTypeVariadic$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_isFunctionTypeVariadic$FUNC() { return clang_isFunctionTypeVariadic$FUNC_; }

    private static final MethodHandle clang_isFunctionTypeVariadic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isFunctionTypeVariadic",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_isFunctionTypeVariadic$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_isFunctionTypeVariadic$MH() { return clang_isFunctionTypeVariadic$MH_; }

    private static final FunctionDescriptor clang_getCursorResultType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCursorResultType$FUNC() { return clang_getCursorResultType$FUNC_; }

    private static final MethodHandle clang_getCursorResultType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorResultType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorResultType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCursorResultType$MH() { return clang_getCursorResultType$MH_; }

    private static final FunctionDescriptor clang_getCursorExceptionSpecificationType$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCursorExceptionSpecificationType$FUNC() { return clang_getCursorExceptionSpecificationType$FUNC_; }

    private static final MethodHandle clang_getCursorExceptionSpecificationType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorExceptionSpecificationType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getCursorExceptionSpecificationType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCursorExceptionSpecificationType$MH() { return clang_getCursorExceptionSpecificationType$MH_; }

    private static final FunctionDescriptor clang_isPODType$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_isPODType$FUNC() { return clang_isPODType$FUNC_; }

    private static final MethodHandle clang_isPODType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isPODType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_isPODType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_isPODType$MH() { return clang_isPODType$MH_; }

    private static final FunctionDescriptor clang_getElementType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getElementType$FUNC() { return clang_getElementType$FUNC_; }

    private static final MethodHandle clang_getElementType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getElementType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getElementType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getElementType$MH() { return clang_getElementType$MH_; }

    private static final FunctionDescriptor clang_getNumElements$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getNumElements$FUNC() { return clang_getNumElements$FUNC_; }

    private static final MethodHandle clang_getNumElements$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumElements",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        clang_getNumElements$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getNumElements$MH() { return clang_getNumElements$MH_; }

    private static final FunctionDescriptor clang_getArrayElementType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getArrayElementType$FUNC() { return clang_getArrayElementType$FUNC_; }

    private static final MethodHandle clang_getArrayElementType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getArrayElementType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getArrayElementType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getArrayElementType$MH() { return clang_getArrayElementType$MH_; }

    private static final FunctionDescriptor clang_getArraySize$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getArraySize$FUNC() { return clang_getArraySize$FUNC_; }

    private static final MethodHandle clang_getArraySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getArraySize",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        clang_getArraySize$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getArraySize$MH() { return clang_getArraySize$MH_; }

    private static final FunctionDescriptor clang_Type_getNamedType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getNamedType$FUNC() { return clang_Type_getNamedType$FUNC_; }

    private static final MethodHandle clang_Type_getNamedType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getNamedType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getNamedType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getNamedType$MH() { return clang_Type_getNamedType$MH_; }

    private static final FunctionDescriptor clang_Type_isTransparentTagTypedef$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_isTransparentTagTypedef$FUNC() { return clang_Type_isTransparentTagTypedef$FUNC_; }

    private static final MethodHandle clang_Type_isTransparentTagTypedef$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_isTransparentTagTypedef",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Type_isTransparentTagTypedef$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_isTransparentTagTypedef$MH() { return clang_Type_isTransparentTagTypedef$MH_; }

    public static int CXTypeNullability_NonNull() { return (int)0L; }

    public static int CXTypeNullability_Nullable() { return (int)1L; }

    public static int CXTypeNullability_Unspecified() { return (int)2L; }

    public static int CXTypeNullability_Invalid() { return (int)3L; }

    private static final FunctionDescriptor clang_Type_getNullability$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getNullability$FUNC() { return clang_Type_getNullability$FUNC_; }

    private static final MethodHandle clang_Type_getNullability$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getNullability",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Type_getNullability$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getNullability$MH() { return clang_Type_getNullability$MH_; }

    public static int CXTypeLayoutError_Invalid() { return (int)-1L; }

    public static int CXTypeLayoutError_Incomplete() { return (int)-2L; }

    public static int CXTypeLayoutError_Dependent() { return (int)-3L; }

    public static int CXTypeLayoutError_NotConstantSize() { return (int)-4L; }

    public static int CXTypeLayoutError_InvalidFieldName() { return (int)-5L; }

    public static int CXTypeLayoutError_Undeduced() { return (int)-6L; }

    private static final FunctionDescriptor clang_Type_getAlignOf$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getAlignOf$FUNC() { return clang_Type_getAlignOf$FUNC_; }

    private static final MethodHandle clang_Type_getAlignOf$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getAlignOf",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        clang_Type_getAlignOf$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getAlignOf$MH() { return clang_Type_getAlignOf$MH_; }

    private static final FunctionDescriptor clang_Type_getClassType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getClassType$FUNC() { return clang_Type_getClassType$FUNC_; }

    private static final MethodHandle clang_Type_getClassType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getClassType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getClassType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getClassType$MH() { return clang_Type_getClassType$MH_; }

    private static final FunctionDescriptor clang_Type_getSizeOf$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getSizeOf$FUNC() { return clang_Type_getSizeOf$FUNC_; }

    private static final MethodHandle clang_Type_getSizeOf$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getSizeOf",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        clang_Type_getSizeOf$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getSizeOf$MH() { return clang_Type_getSizeOf$MH_; }

    private static final FunctionDescriptor clang_Type_getOffsetOf$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getOffsetOf$FUNC() { return clang_Type_getOffsetOf$FUNC_; }

    private static final MethodHandle clang_Type_getOffsetOf$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getOffsetOf",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)J",
        clang_Type_getOffsetOf$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getOffsetOf$MH() { return clang_Type_getOffsetOf$MH_; }

    private static final FunctionDescriptor clang_Type_getModifiedType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getModifiedType$FUNC() { return clang_Type_getModifiedType$FUNC_; }

    private static final MethodHandle clang_Type_getModifiedType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getModifiedType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getModifiedType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getModifiedType$MH() { return clang_Type_getModifiedType$MH_; }

    private static final FunctionDescriptor clang_Cursor_getOffsetOfField$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getOffsetOfField$FUNC() { return clang_Cursor_getOffsetOfField$FUNC_; }

    private static final MethodHandle clang_Cursor_getOffsetOfField$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getOffsetOfField",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        clang_Cursor_getOffsetOfField$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getOffsetOfField$MH() { return clang_Cursor_getOffsetOfField$MH_; }

    private static final FunctionDescriptor clang_Cursor_isAnonymous$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isAnonymous$FUNC() { return clang_Cursor_isAnonymous$FUNC_; }

    private static final MethodHandle clang_Cursor_isAnonymous$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isAnonymous",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isAnonymous$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_isAnonymous$MH() { return clang_Cursor_isAnonymous$MH_; }

    private static final FunctionDescriptor clang_Cursor_isAnonymousRecordDecl$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isAnonymousRecordDecl$FUNC() { return clang_Cursor_isAnonymousRecordDecl$FUNC_; }

    private static final MethodHandle clang_Cursor_isAnonymousRecordDecl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isAnonymousRecordDecl",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isAnonymousRecordDecl$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_isAnonymousRecordDecl$MH() { return clang_Cursor_isAnonymousRecordDecl$MH_; }

    private static final FunctionDescriptor clang_Cursor_isInlineNamespace$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isInlineNamespace$FUNC() { return clang_Cursor_isInlineNamespace$FUNC_; }

    private static final MethodHandle clang_Cursor_isInlineNamespace$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isInlineNamespace",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isInlineNamespace$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_isInlineNamespace$MH() { return clang_Cursor_isInlineNamespace$MH_; }

    public static int CXRefQualifier_None() { return (int)0L; }

    public static int CXRefQualifier_LValue() { return (int)1L; }

    public static int CXRefQualifier_RValue() { return (int)2L; }

    private static final FunctionDescriptor clang_Type_getNumTemplateArguments$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getNumTemplateArguments$FUNC() { return clang_Type_getNumTemplateArguments$FUNC_; }

    private static final MethodHandle clang_Type_getNumTemplateArguments$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getNumTemplateArguments",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Type_getNumTemplateArguments$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getNumTemplateArguments$MH() { return clang_Type_getNumTemplateArguments$MH_; }

    private static final FunctionDescriptor clang_Type_getTemplateArgumentAsType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getTemplateArgumentAsType$FUNC() { return clang_Type_getTemplateArgumentAsType$FUNC_; }

    private static final MethodHandle clang_Type_getTemplateArgumentAsType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getTemplateArgumentAsType",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getTemplateArgumentAsType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getTemplateArgumentAsType$MH() { return clang_Type_getTemplateArgumentAsType$MH_; }

    private static final FunctionDescriptor clang_Type_getCXXRefQualifier$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_getCXXRefQualifier$FUNC() { return clang_Type_getCXXRefQualifier$FUNC_; }

    private static final MethodHandle clang_Type_getCXXRefQualifier$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getCXXRefQualifier",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Type_getCXXRefQualifier$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_getCXXRefQualifier$MH() { return clang_Type_getCXXRefQualifier$MH_; }

    private static final FunctionDescriptor clang_Cursor_isBitField$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isBitField$FUNC() { return clang_Cursor_isBitField$FUNC_; }

    private static final MethodHandle clang_Cursor_isBitField$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isBitField",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isBitField$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_isBitField$MH() { return clang_Cursor_isBitField$MH_; }

    private static final FunctionDescriptor clang_isVirtualBase$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_isVirtualBase$FUNC() { return clang_isVirtualBase$FUNC_; }

    private static final MethodHandle clang_isVirtualBase$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isVirtualBase",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_isVirtualBase$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_isVirtualBase$MH() { return clang_isVirtualBase$MH_; }

    public static int CX_CXXInvalidAccessSpecifier() { return (int)0L; }

    public static int CX_CXXPublic() { return (int)1L; }

    public static int CX_CXXProtected() { return (int)2L; }

    public static int CX_CXXPrivate() { return (int)3L; }

    private static final FunctionDescriptor clang_getCXXAccessSpecifier$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCXXAccessSpecifier$FUNC() { return clang_getCXXAccessSpecifier$FUNC_; }

    private static final MethodHandle clang_getCXXAccessSpecifier$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCXXAccessSpecifier",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getCXXAccessSpecifier$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCXXAccessSpecifier$MH() { return clang_getCXXAccessSpecifier$MH_; }

    public static int CX_SC_Invalid() { return (int)0L; }

    public static int CX_SC_None() { return (int)1L; }

    public static int CX_SC_Extern() { return (int)2L; }

    public static int CX_SC_Static() { return (int)3L; }

    public static int CX_SC_PrivateExtern() { return (int)4L; }

    public static int CX_SC_OpenCLWorkGroupLocal() { return (int)5L; }

    public static int CX_SC_Auto() { return (int)6L; }

    public static int CX_SC_Register() { return (int)7L; }

    private static final FunctionDescriptor clang_Cursor_getStorageClass$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getStorageClass$FUNC() { return clang_Cursor_getStorageClass$FUNC_; }

    private static final MethodHandle clang_Cursor_getStorageClass$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getStorageClass",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_getStorageClass$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getStorageClass$MH() { return clang_Cursor_getStorageClass$MH_; }

    private static final FunctionDescriptor clang_getNumOverloadedDecls$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getNumOverloadedDecls$FUNC() { return clang_getNumOverloadedDecls$FUNC_; }

    private static final MethodHandle clang_getNumOverloadedDecls$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumOverloadedDecls",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getNumOverloadedDecls$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getNumOverloadedDecls$MH() { return clang_getNumOverloadedDecls$MH_; }

    private static final FunctionDescriptor clang_getOverloadedDecl$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getOverloadedDecl$FUNC() { return clang_getOverloadedDecl$FUNC_; }

    private static final MethodHandle clang_getOverloadedDecl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getOverloadedDecl",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_getOverloadedDecl$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getOverloadedDecl$MH() { return clang_getOverloadedDecl$MH_; }

    private static final FunctionDescriptor clang_getIBOutletCollectionType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getIBOutletCollectionType$FUNC() { return clang_getIBOutletCollectionType$FUNC_; }

    private static final MethodHandle clang_getIBOutletCollectionType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getIBOutletCollectionType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getIBOutletCollectionType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getIBOutletCollectionType$MH() { return clang_getIBOutletCollectionType$MH_; }

    public static int CXChildVisit_Break() { return (int)0L; }

    public static int CXChildVisit_Continue() { return (int)1L; }

    public static int CXChildVisit_Recurse() { return (int)2L; }

    private static final FunctionDescriptor clang_visitChildren$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_visitChildren$FUNC() { return clang_visitChildren$FUNC_; }

    private static final MethodHandle clang_visitChildren$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_visitChildren",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_visitChildren$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_visitChildren$MH() { return clang_visitChildren$MH_; }

    private static final FunctionDescriptor clang_visitChildren$visitor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_visitChildren$visitor$FUNC() { return clang_visitChildren$visitor$FUNC_; }

    private static final FunctionDescriptor clang_visitTemplateSpecializations$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_visitTemplateSpecializations$FUNC() { return clang_visitTemplateSpecializations$FUNC_; }

    private static final MethodHandle clang_visitTemplateSpecializations$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_visitTemplateSpecializations",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_visitTemplateSpecializations$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_visitTemplateSpecializations$MH() { return clang_visitTemplateSpecializations$MH_; }

    private static final FunctionDescriptor clang_visitTemplateSpecializations$visitor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_visitTemplateSpecializations$visitor$FUNC() { return clang_visitTemplateSpecializations$visitor$FUNC_; }

    private static final FunctionDescriptor clang_visitTemplateSpecializationChildren$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_visitTemplateSpecializationChildren$FUNC() { return clang_visitTemplateSpecializationChildren$FUNC_; }

    private static final MethodHandle clang_visitTemplateSpecializationChildren$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_visitTemplateSpecializationChildren",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_visitTemplateSpecializationChildren$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_visitTemplateSpecializationChildren$MH() { return clang_visitTemplateSpecializationChildren$MH_; }

    private static final FunctionDescriptor clang_visitTemplateSpecializationChildren$visitor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_visitTemplateSpecializationChildren$visitor$FUNC() { return clang_visitTemplateSpecializationChildren$visitor$FUNC_; }

    private static final FunctionDescriptor clang_visitChildrenWithBlock$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_visitChildrenWithBlock$FUNC() { return clang_visitChildrenWithBlock$FUNC_; }

    private static final MethodHandle clang_visitChildrenWithBlock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_visitChildrenWithBlock",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_visitChildrenWithBlock$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_visitChildrenWithBlock$MH() { return clang_visitChildrenWithBlock$MH_; }

    private static final FunctionDescriptor clang_visitChildrenWithBlock$block$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_visitChildrenWithBlock$block$FUNC() { return clang_visitChildrenWithBlock$block$FUNC_; }

    private static final FunctionDescriptor clang_getCursorUSR$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCursorUSR$FUNC() { return clang_getCursorUSR$FUNC_; }

    private static final MethodHandle clang_getCursorUSR$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorUSR",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorUSR$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCursorUSR$MH() { return clang_getCursorUSR$MH_; }

    private static final FunctionDescriptor clang_constructUSR_ObjCClass$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCClass$FUNC() { return clang_constructUSR_ObjCClass$FUNC_; }

    private static final MethodHandle clang_constructUSR_ObjCClass$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCClass",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_constructUSR_ObjCClass$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_constructUSR_ObjCClass$MH() { return clang_constructUSR_ObjCClass$MH_; }

    private static final FunctionDescriptor clang_constructUSR_ObjCCategory$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCCategory$FUNC() { return clang_constructUSR_ObjCCategory$FUNC_; }

    private static final MethodHandle clang_constructUSR_ObjCCategory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCCategory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_constructUSR_ObjCCategory$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_constructUSR_ObjCCategory$MH() { return clang_constructUSR_ObjCCategory$MH_; }

    private static final FunctionDescriptor clang_constructUSR_ObjCProtocol$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCProtocol$FUNC() { return clang_constructUSR_ObjCProtocol$FUNC_; }

    private static final MethodHandle clang_constructUSR_ObjCProtocol$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCProtocol",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_constructUSR_ObjCProtocol$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_constructUSR_ObjCProtocol$MH() { return clang_constructUSR_ObjCProtocol$MH_; }

    private static final FunctionDescriptor clang_constructUSR_ObjCIvar$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCIvar$FUNC() { return clang_constructUSR_ObjCIvar$FUNC_; }

    private static final MethodHandle clang_constructUSR_ObjCIvar$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCIvar",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_constructUSR_ObjCIvar$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_constructUSR_ObjCIvar$MH() { return clang_constructUSR_ObjCIvar$MH_; }

    private static final FunctionDescriptor clang_constructUSR_ObjCMethod$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_INT,
        MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCMethod$FUNC() { return clang_constructUSR_ObjCMethod$FUNC_; }

    private static final MethodHandle clang_constructUSR_ObjCMethod$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCMethod",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_constructUSR_ObjCMethod$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_constructUSR_ObjCMethod$MH() { return clang_constructUSR_ObjCMethod$MH_; }

    private static final FunctionDescriptor clang_constructUSR_ObjCProperty$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCProperty$FUNC() { return clang_constructUSR_ObjCProperty$FUNC_; }

    private static final MethodHandle clang_constructUSR_ObjCProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_constructUSR_ObjCProperty$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_constructUSR_ObjCProperty$MH() { return clang_constructUSR_ObjCProperty$MH_; }

    private static final FunctionDescriptor clang_getCursorSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCursorSpelling$FUNC() { return clang_getCursorSpelling$FUNC_; }

    private static final MethodHandle clang_getCursorSpelling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorSpelling",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorSpelling$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCursorSpelling$MH() { return clang_getCursorSpelling$MH_; }

    private static final FunctionDescriptor clang_Cursor_getSpellingNameRange$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("begin_int_data"),
        C_INT.withName("end_int_data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getSpellingNameRange$FUNC() { return clang_Cursor_getSpellingNameRange$FUNC_; }

    private static final MethodHandle clang_Cursor_getSpellingNameRange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getSpellingNameRange",
        "(Ljdk/incubator/foreign/MemorySegment;II)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getSpellingNameRange$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getSpellingNameRange$MH() { return clang_Cursor_getSpellingNameRange$MH_; }

    public static int CXPrintingPolicy_Indentation() { return (int)0L; }

    public static int CXPrintingPolicy_SuppressSpecifiers() { return (int)1L; }

    public static int CXPrintingPolicy_SuppressTagKeyword() { return (int)2L; }

    public static int CXPrintingPolicy_IncludeTagDefinition() { return (int)3L; }

    public static int CXPrintingPolicy_SuppressScope() { return (int)4L; }

    public static int CXPrintingPolicy_SuppressUnwrittenScope() { return (int)5L; }

    public static int CXPrintingPolicy_SuppressInitializers() { return (int)6L; }

    public static int CXPrintingPolicy_ConstantArraySizeAsWritten() { return (int)7L; }

    public static int CXPrintingPolicy_AnonymousTagLocations() { return (int)8L; }

    public static int CXPrintingPolicy_SuppressStrongLifetime() { return (int)9L; }

    public static int CXPrintingPolicy_SuppressLifetimeQualifiers() { return (int)10L; }

    public static int CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors() { return (int)11L; }

    public static int CXPrintingPolicy_Bool() { return (int)12L; }

    public static int CXPrintingPolicy_Restrict() { return (int)13L; }

    public static int CXPrintingPolicy_Alignof() { return (int)14L; }

    public static int CXPrintingPolicy_UnderscoreAlignof() { return (int)15L; }

    public static int CXPrintingPolicy_UseVoidForZeroParams() { return (int)16L; }

    public static int CXPrintingPolicy_TerseOutput() { return (int)17L; }

    public static int CXPrintingPolicy_PolishForDeclaration() { return (int)18L; }

    public static int CXPrintingPolicy_Half() { return (int)19L; }

    public static int CXPrintingPolicy_MSWChar() { return (int)20L; }

    public static int CXPrintingPolicy_IncludeNewlines() { return (int)21L; }

    public static int CXPrintingPolicy_MSVCFormatting() { return (int)22L; }

    public static int CXPrintingPolicy_ConstantsAsWritten() { return (int)23L; }

    public static int CXPrintingPolicy_SuppressImplicitBase() { return (int)24L; }

    public static int CXPrintingPolicy_FullyQualifiedName() { return (int)25L; }

    public static int CXPrintingPolicy_LastProperty() { return (int)25L; }

    private static final FunctionDescriptor clang_PrintingPolicy_getProperty$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_PrintingPolicy_getProperty$FUNC() { return clang_PrintingPolicy_getProperty$FUNC_; }

    private static final MethodHandle clang_PrintingPolicy_getProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_PrintingPolicy_getProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        clang_PrintingPolicy_getProperty$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_PrintingPolicy_getProperty$MH() { return clang_PrintingPolicy_getProperty$MH_; }

    private static final FunctionDescriptor clang_PrintingPolicy_setProperty$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_PrintingPolicy_setProperty$FUNC() { return clang_PrintingPolicy_setProperty$FUNC_; }

    private static final MethodHandle clang_PrintingPolicy_setProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_PrintingPolicy_setProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;II)V",
        clang_PrintingPolicy_setProperty$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_PrintingPolicy_setProperty$MH() { return clang_PrintingPolicy_setProperty$MH_; }

    private static final FunctionDescriptor clang_getCursorPrintingPolicy$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCursorPrintingPolicy$FUNC() { return clang_getCursorPrintingPolicy$FUNC_; }

    private static final MethodHandle clang_getCursorPrintingPolicy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorPrintingPolicy",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getCursorPrintingPolicy$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCursorPrintingPolicy$MH() { return clang_getCursorPrintingPolicy$MH_; }

    private static final FunctionDescriptor clang_PrintingPolicy_dispose$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_PrintingPolicy_dispose$FUNC() { return clang_PrintingPolicy_dispose$FUNC_; }

    private static final MethodHandle clang_PrintingPolicy_dispose$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_PrintingPolicy_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_PrintingPolicy_dispose$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_PrintingPolicy_dispose$MH() { return clang_PrintingPolicy_dispose$MH_; }

    private static final FunctionDescriptor clang_getCursorPrettyPrinted$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCursorPrettyPrinted$FUNC() { return clang_getCursorPrettyPrinted$FUNC_; }

    private static final MethodHandle clang_getCursorPrettyPrinted$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorPrettyPrinted",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorPrettyPrinted$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCursorPrettyPrinted$MH() { return clang_getCursorPrettyPrinted$MH_; }

    private static final FunctionDescriptor clang_getTypePrintingPolicy$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getTypePrintingPolicy$FUNC() { return clang_getTypePrintingPolicy$FUNC_; }

    private static final MethodHandle clang_getTypePrintingPolicy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypePrintingPolicy",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getTypePrintingPolicy$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getTypePrintingPolicy$MH() { return clang_getTypePrintingPolicy$MH_; }

    private static final FunctionDescriptor clang_getTypePrettyPrinted$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getTypePrettyPrinted$FUNC() { return clang_getTypePrettyPrinted$FUNC_; }

    private static final MethodHandle clang_getTypePrettyPrinted$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypePrettyPrinted",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTypePrettyPrinted$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getTypePrettyPrinted$MH() { return clang_getTypePrettyPrinted$MH_; }

    private static final FunctionDescriptor clang_getCursorDisplayName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCursorDisplayName$FUNC() { return clang_getCursorDisplayName$FUNC_; }

    private static final MethodHandle clang_getCursorDisplayName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorDisplayName",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorDisplayName$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCursorDisplayName$MH() { return clang_getCursorDisplayName$MH_; }

    private static final FunctionDescriptor clang_getCursorReferenced$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCursorReferenced$FUNC() { return clang_getCursorReferenced$FUNC_; }

    private static final MethodHandle clang_getCursorReferenced$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorReferenced",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorReferenced$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCursorReferenced$MH() { return clang_getCursorReferenced$MH_; }

    private static final FunctionDescriptor clang_getCursorDefinition$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCursorDefinition$FUNC() { return clang_getCursorDefinition$FUNC_; }

    private static final MethodHandle clang_getCursorDefinition$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorDefinition",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorDefinition$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCursorDefinition$MH() { return clang_getCursorDefinition$MH_; }

    private static final FunctionDescriptor clang_isCursorDefinition$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_isCursorDefinition$FUNC() { return clang_isCursorDefinition$FUNC_; }

    private static final MethodHandle clang_isCursorDefinition$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isCursorDefinition",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_isCursorDefinition$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_isCursorDefinition$MH() { return clang_isCursorDefinition$MH_; }

    private static final FunctionDescriptor clang_getCanonicalCursor$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCanonicalCursor$FUNC() { return clang_getCanonicalCursor$FUNC_; }

    private static final MethodHandle clang_getCanonicalCursor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCanonicalCursor",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCanonicalCursor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCanonicalCursor$MH() { return clang_getCanonicalCursor$MH_; }

    private static final FunctionDescriptor clang_Cursor_getObjCSelectorIndex$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCSelectorIndex$FUNC() { return clang_Cursor_getObjCSelectorIndex$FUNC_; }

    private static final MethodHandle clang_Cursor_getObjCSelectorIndex$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCSelectorIndex",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_getObjCSelectorIndex$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getObjCSelectorIndex$MH() { return clang_Cursor_getObjCSelectorIndex$MH_; }

    private static final FunctionDescriptor clang_Cursor_isDynamicCall$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isDynamicCall$FUNC() { return clang_Cursor_isDynamicCall$FUNC_; }

    private static final MethodHandle clang_Cursor_isDynamicCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isDynamicCall",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isDynamicCall$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_isDynamicCall$MH() { return clang_Cursor_isDynamicCall$MH_; }

    private static final FunctionDescriptor clang_Cursor_getReceiverType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getReceiverType$FUNC() { return clang_Cursor_getReceiverType$FUNC_; }

    private static final MethodHandle clang_Cursor_getReceiverType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getReceiverType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getReceiverType$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getReceiverType$MH() { return clang_Cursor_getReceiverType$MH_; }

    public static int CXObjCPropertyAttr_noattr() { return (int)0L; }

    public static int CXObjCPropertyAttr_readonly() { return (int)1L; }

    public static int CXObjCPropertyAttr_getter() { return (int)2L; }

    public static int CXObjCPropertyAttr_assign() { return (int)4L; }

    public static int CXObjCPropertyAttr_readwrite() { return (int)8L; }

    public static int CXObjCPropertyAttr_retain() { return (int)16L; }

    public static int CXObjCPropertyAttr_copy() { return (int)32L; }

    public static int CXObjCPropertyAttr_nonatomic() { return (int)64L; }

    public static int CXObjCPropertyAttr_setter() { return (int)128L; }

    public static int CXObjCPropertyAttr_atomic() { return (int)256L; }

    public static int CXObjCPropertyAttr_weak() { return (int)512L; }

    public static int CXObjCPropertyAttr_strong() { return (int)1024L; }

    public static int CXObjCPropertyAttr_unsafe_unretained() { return (int)2048L; }

    public static int CXObjCPropertyAttr_class() { return (int)4096L; }

    private static final FunctionDescriptor clang_Cursor_getObjCPropertyAttributes$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCPropertyAttributes$FUNC() { return clang_Cursor_getObjCPropertyAttributes$FUNC_; }

    private static final MethodHandle clang_Cursor_getObjCPropertyAttributes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCPropertyAttributes",
        "(Ljdk/incubator/foreign/MemorySegment;I)I",
        clang_Cursor_getObjCPropertyAttributes$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getObjCPropertyAttributes$MH() { return clang_Cursor_getObjCPropertyAttributes$MH_; }

    private static final FunctionDescriptor clang_Cursor_getObjCPropertyGetterName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCPropertyGetterName$FUNC() { return clang_Cursor_getObjCPropertyGetterName$FUNC_; }

    private static final MethodHandle clang_Cursor_getObjCPropertyGetterName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCPropertyGetterName",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getObjCPropertyGetterName$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getObjCPropertyGetterName$MH() { return clang_Cursor_getObjCPropertyGetterName$MH_; }

    private static final FunctionDescriptor clang_Cursor_getObjCPropertySetterName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCPropertySetterName$FUNC() { return clang_Cursor_getObjCPropertySetterName$FUNC_; }

    private static final MethodHandle clang_Cursor_getObjCPropertySetterName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCPropertySetterName",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getObjCPropertySetterName$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getObjCPropertySetterName$MH() { return clang_Cursor_getObjCPropertySetterName$MH_; }

    public static int CXObjCDeclQualifier_None() { return (int)0L; }

    public static int CXObjCDeclQualifier_In() { return (int)1L; }

    public static int CXObjCDeclQualifier_Inout() { return (int)2L; }

    public static int CXObjCDeclQualifier_Out() { return (int)4L; }

    public static int CXObjCDeclQualifier_Bycopy() { return (int)8L; }

    public static int CXObjCDeclQualifier_Byref() { return (int)16L; }

    public static int CXObjCDeclQualifier_Oneway() { return (int)32L; }

    private static final FunctionDescriptor clang_Cursor_getObjCDeclQualifiers$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCDeclQualifiers$FUNC() { return clang_Cursor_getObjCDeclQualifiers$FUNC_; }

    private static final MethodHandle clang_Cursor_getObjCDeclQualifiers$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCDeclQualifiers",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_getObjCDeclQualifiers$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getObjCDeclQualifiers$MH() { return clang_Cursor_getObjCDeclQualifiers$MH_; }

    private static final FunctionDescriptor clang_Cursor_isObjCOptional$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isObjCOptional$FUNC() { return clang_Cursor_isObjCOptional$FUNC_; }

    private static final MethodHandle clang_Cursor_isObjCOptional$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isObjCOptional",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isObjCOptional$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_isObjCOptional$MH() { return clang_Cursor_isObjCOptional$MH_; }

    private static final FunctionDescriptor clang_Cursor_isVariadic$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isVariadic$FUNC() { return clang_Cursor_isVariadic$FUNC_; }

    private static final MethodHandle clang_Cursor_isVariadic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isVariadic",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isVariadic$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_isVariadic$MH() { return clang_Cursor_isVariadic$MH_; }

    private static final FunctionDescriptor clang_Cursor_isExternalSymbol$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isExternalSymbol$FUNC() { return clang_Cursor_isExternalSymbol$FUNC_; }

    private static final MethodHandle clang_Cursor_isExternalSymbol$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isExternalSymbol",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_Cursor_isExternalSymbol$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_isExternalSymbol$MH() { return clang_Cursor_isExternalSymbol$MH_; }

    private static final FunctionDescriptor clang_Cursor_getCommentRange$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("begin_int_data"),
        C_INT.withName("end_int_data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getCommentRange$FUNC() { return clang_Cursor_getCommentRange$FUNC_; }

    private static final MethodHandle clang_Cursor_getCommentRange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getCommentRange",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getCommentRange$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getCommentRange$MH() { return clang_Cursor_getCommentRange$MH_; }

    private static final FunctionDescriptor clang_Cursor_getRawCommentText$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getRawCommentText$FUNC() { return clang_Cursor_getRawCommentText$FUNC_; }

    private static final MethodHandle clang_Cursor_getRawCommentText$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getRawCommentText",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getRawCommentText$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getRawCommentText$MH() { return clang_Cursor_getRawCommentText$MH_; }

    private static final FunctionDescriptor clang_Cursor_getBriefCommentText$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getBriefCommentText$FUNC() { return clang_Cursor_getBriefCommentText$FUNC_; }

    private static final MethodHandle clang_Cursor_getBriefCommentText$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getBriefCommentText",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getBriefCommentText$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getBriefCommentText$MH() { return clang_Cursor_getBriefCommentText$MH_; }

    private static final FunctionDescriptor clang_Cursor_getMangling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getMangling$FUNC() { return clang_Cursor_getMangling$FUNC_; }

    private static final MethodHandle clang_Cursor_getMangling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getMangling",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getMangling$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getMangling$MH() { return clang_Cursor_getMangling$MH_; }

    private static final FunctionDescriptor clang_Cursor_getCXXManglings$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getCXXManglings$FUNC() { return clang_Cursor_getCXXManglings$FUNC_; }

    private static final MethodHandle clang_Cursor_getCXXManglings$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getCXXManglings",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_Cursor_getCXXManglings$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getCXXManglings$MH() { return clang_Cursor_getCXXManglings$MH_; }

    private static final FunctionDescriptor clang_Cursor_getObjCManglings$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCManglings$FUNC() { return clang_Cursor_getObjCManglings$FUNC_; }

    private static final MethodHandle clang_Cursor_getObjCManglings$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCManglings",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_Cursor_getObjCManglings$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getObjCManglings$MH() { return clang_Cursor_getObjCManglings$MH_; }

    private static final FunctionDescriptor clang_Cursor_getModule$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getModule$FUNC() { return clang_Cursor_getModule$FUNC_; }

    private static final MethodHandle clang_Cursor_getModule$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getModule",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_Cursor_getModule$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_getModule$MH() { return clang_Cursor_getModule$MH_; }

    private static final FunctionDescriptor clang_getModuleForFile$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getModuleForFile$FUNC() { return clang_getModuleForFile$FUNC_; }

    private static final MethodHandle clang_getModuleForFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getModuleForFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getModuleForFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getModuleForFile$MH() { return clang_getModuleForFile$MH_; }

    private static final FunctionDescriptor clang_Module_getASTFile$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Module_getASTFile$FUNC() { return clang_Module_getASTFile$FUNC_; }

    private static final MethodHandle clang_Module_getASTFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getASTFile",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_Module_getASTFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Module_getASTFile$MH() { return clang_Module_getASTFile$MH_; }

    private static final FunctionDescriptor clang_Module_getParent$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Module_getParent$FUNC() { return clang_Module_getParent$FUNC_; }

    private static final MethodHandle clang_Module_getParent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getParent",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_Module_getParent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Module_getParent$MH() { return clang_Module_getParent$MH_; }

    private static final FunctionDescriptor clang_Module_getName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Module_getName$FUNC() { return clang_Module_getName$FUNC_; }

    private static final MethodHandle clang_Module_getName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getName",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Module_getName$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Module_getName$MH() { return clang_Module_getName$MH_; }

    private static final FunctionDescriptor clang_Module_getFullName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Module_getFullName$FUNC() { return clang_Module_getFullName$FUNC_; }

    private static final MethodHandle clang_Module_getFullName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getFullName",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Module_getFullName$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Module_getFullName$MH() { return clang_Module_getFullName$MH_; }

    private static final FunctionDescriptor clang_Module_isSystem$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Module_isSystem$FUNC() { return clang_Module_isSystem$FUNC_; }

    private static final MethodHandle clang_Module_isSystem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_isSystem",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_Module_isSystem$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Module_isSystem$MH() { return clang_Module_isSystem$MH_; }

    private static final FunctionDescriptor clang_Module_getNumTopLevelHeaders$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Module_getNumTopLevelHeaders$FUNC() { return clang_Module_getNumTopLevelHeaders$FUNC_; }

    private static final MethodHandle clang_Module_getNumTopLevelHeaders$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getNumTopLevelHeaders",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_Module_getNumTopLevelHeaders$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Module_getNumTopLevelHeaders$MH() { return clang_Module_getNumTopLevelHeaders$MH_; }

    private static final FunctionDescriptor clang_Module_getTopLevelHeader$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Module_getTopLevelHeader$FUNC() { return clang_Module_getTopLevelHeader$FUNC_; }

    private static final MethodHandle clang_Module_getTopLevelHeader$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getTopLevelHeader",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        clang_Module_getTopLevelHeader$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Module_getTopLevelHeader$MH() { return clang_Module_getTopLevelHeader$MH_; }

    private static final FunctionDescriptor clang_CXXConstructor_isConvertingConstructor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_CXXConstructor_isConvertingConstructor$FUNC() { return clang_CXXConstructor_isConvertingConstructor$FUNC_; }

    private static final MethodHandle clang_CXXConstructor_isConvertingConstructor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXConstructor_isConvertingConstructor",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXConstructor_isConvertingConstructor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_CXXConstructor_isConvertingConstructor$MH() { return clang_CXXConstructor_isConvertingConstructor$MH_; }

    private static final FunctionDescriptor clang_CXXConstructor_isCopyConstructor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_CXXConstructor_isCopyConstructor$FUNC() { return clang_CXXConstructor_isCopyConstructor$FUNC_; }

    private static final MethodHandle clang_CXXConstructor_isCopyConstructor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXConstructor_isCopyConstructor",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXConstructor_isCopyConstructor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_CXXConstructor_isCopyConstructor$MH() { return clang_CXXConstructor_isCopyConstructor$MH_; }

    private static final FunctionDescriptor clang_CXXConstructor_isDefaultConstructor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_CXXConstructor_isDefaultConstructor$FUNC() { return clang_CXXConstructor_isDefaultConstructor$FUNC_; }

    private static final MethodHandle clang_CXXConstructor_isDefaultConstructor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXConstructor_isDefaultConstructor",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXConstructor_isDefaultConstructor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_CXXConstructor_isDefaultConstructor$MH() { return clang_CXXConstructor_isDefaultConstructor$MH_; }

    private static final FunctionDescriptor clang_CXXConstructor_isMoveConstructor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_CXXConstructor_isMoveConstructor$FUNC() { return clang_CXXConstructor_isMoveConstructor$FUNC_; }

    private static final MethodHandle clang_CXXConstructor_isMoveConstructor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXConstructor_isMoveConstructor",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXConstructor_isMoveConstructor$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_CXXConstructor_isMoveConstructor$MH() { return clang_CXXConstructor_isMoveConstructor$MH_; }

    private static final FunctionDescriptor clang_CXXField_isMutable$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_CXXField_isMutable$FUNC() { return clang_CXXField_isMutable$FUNC_; }

    private static final MethodHandle clang_CXXField_isMutable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXField_isMutable",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXField_isMutable$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_CXXField_isMutable$MH() { return clang_CXXField_isMutable$MH_; }

    private static final FunctionDescriptor clang_CXXMethod_isDefaulted$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_CXXMethod_isDefaulted$FUNC() { return clang_CXXMethod_isDefaulted$FUNC_; }

    private static final MethodHandle clang_CXXMethod_isDefaulted$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXMethod_isDefaulted",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXMethod_isDefaulted$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_CXXMethod_isDefaulted$MH() { return clang_CXXMethod_isDefaulted$MH_; }

    private static final FunctionDescriptor clang_CXXMethod_isPureVirtual$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_CXXMethod_isPureVirtual$FUNC() { return clang_CXXMethod_isPureVirtual$FUNC_; }

    private static final MethodHandle clang_CXXMethod_isPureVirtual$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXMethod_isPureVirtual",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXMethod_isPureVirtual$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_CXXMethod_isPureVirtual$MH() { return clang_CXXMethod_isPureVirtual$MH_; }

    private static final FunctionDescriptor clang_CXXMethod_isStatic$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_CXXMethod_isStatic$FUNC() { return clang_CXXMethod_isStatic$FUNC_; }

    private static final MethodHandle clang_CXXMethod_isStatic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXMethod_isStatic",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXMethod_isStatic$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_CXXMethod_isStatic$MH() { return clang_CXXMethod_isStatic$MH_; }

    private static final FunctionDescriptor clang_CXXMethod_isVirtual$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_CXXMethod_isVirtual$FUNC() { return clang_CXXMethod_isVirtual$FUNC_; }

    private static final MethodHandle clang_CXXMethod_isVirtual$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXMethod_isVirtual",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXMethod_isVirtual$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_CXXMethod_isVirtual$MH() { return clang_CXXMethod_isVirtual$MH_; }

    private static final FunctionDescriptor clang_CXXRecord_isAbstract$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_CXXRecord_isAbstract$FUNC() { return clang_CXXRecord_isAbstract$FUNC_; }

    private static final MethodHandle clang_CXXRecord_isAbstract$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXRecord_isAbstract",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXRecord_isAbstract$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_CXXRecord_isAbstract$MH() { return clang_CXXRecord_isAbstract$MH_; }

    private static final FunctionDescriptor clang_EnumDecl_isScoped$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_EnumDecl_isScoped$FUNC() { return clang_EnumDecl_isScoped$FUNC_; }

    private static final MethodHandle clang_EnumDecl_isScoped$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EnumDecl_isScoped",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_EnumDecl_isScoped$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_EnumDecl_isScoped$MH() { return clang_EnumDecl_isScoped$MH_; }

    private static final FunctionDescriptor clang_CXXMethod_isConst$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_CXXMethod_isConst$FUNC() { return clang_CXXMethod_isConst$FUNC_; }

    private static final MethodHandle clang_CXXMethod_isConst$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXMethod_isConst",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXMethod_isConst$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_CXXMethod_isConst$MH() { return clang_CXXMethod_isConst$MH_; }

    private static final FunctionDescriptor clang_getTemplateCursorKind$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getTemplateCursorKind$FUNC() { return clang_getTemplateCursorKind$FUNC_; }

    private static final MethodHandle clang_getTemplateCursorKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTemplateCursorKind",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getTemplateCursorKind$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getTemplateCursorKind$MH() { return clang_getTemplateCursorKind$MH_; }

    private static final FunctionDescriptor clang_getTemplateSpecializationKind$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getTemplateSpecializationKind$FUNC() { return clang_getTemplateSpecializationKind$FUNC_; }

    private static final MethodHandle clang_getTemplateSpecializationKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTemplateSpecializationKind",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getTemplateSpecializationKind$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getTemplateSpecializationKind$MH() { return clang_getTemplateSpecializationKind$MH_; }

    private static final FunctionDescriptor clang_getSpecializedCursorTemplate$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getSpecializedCursorTemplate$FUNC() { return clang_getSpecializedCursorTemplate$FUNC_; }

    private static final MethodHandle clang_getSpecializedCursorTemplate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getSpecializedCursorTemplate",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getSpecializedCursorTemplate$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getSpecializedCursorTemplate$MH() { return clang_getSpecializedCursorTemplate$MH_; }

    private static final FunctionDescriptor clang_getCursorReferenceNameRange$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("begin_int_data"),
        C_INT.withName("end_int_data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCursorReferenceNameRange$FUNC() { return clang_getCursorReferenceNameRange$FUNC_; }

    private static final MethodHandle clang_getCursorReferenceNameRange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorReferenceNameRange",
        "(Ljdk/incubator/foreign/MemorySegment;II)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorReferenceNameRange$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCursorReferenceNameRange$MH() { return clang_getCursorReferenceNameRange$MH_; }

    public static int CXNameRange_WantQualifier() { return (int)1L; }

    public static int CXNameRange_WantTemplateArgs() { return (int)2L; }

    public static int CXNameRange_WantSinglePiece() { return (int)4L; }

    public static int CXToken_Punctuation() { return (int)0L; }

    public static int CXToken_Keyword() { return (int)1L; }

    public static int CXToken_Identifier() { return (int)2L; }

    public static int CXToken_Literal() { return (int)3L; }

    public static int CXToken_Comment() { return (int)4L; }

    private static final MemoryLayout CXToken$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
        C_POINTER.withName("ptr_data")
    );
    public static jdk.incubator.foreign.MemoryLayout CXToken$struct$LAYOUT() { return CXToken$struct$LAYOUT_; }

    private static final MemoryLayout ptr_data$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ptr_data$LAYOUT() { return ptr_data$LAYOUT_; }

    private static final VarHandle ptr_data$VH_ = MemoryHandles.asAddressVarHandle(ptr_data$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle ptr_data$VH() { return ptr_data$VH_; }

    private static final FunctionDescriptor clang_getToken$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getToken$FUNC() { return clang_getToken$FUNC_; }

    private static final MethodHandle clang_getToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getToken",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getToken$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getToken$MH() { return clang_getToken$MH_; }

    private static final FunctionDescriptor clang_getTokenKind$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
            C_POINTER.withName("ptr_data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getTokenKind$FUNC() { return clang_getTokenKind$FUNC_; }

    private static final MethodHandle clang_getTokenKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTokenKind",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getTokenKind$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getTokenKind$MH() { return clang_getTokenKind$MH_; }

    private static final FunctionDescriptor clang_getTokenSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
            C_POINTER.withName("ptr_data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getTokenSpelling$FUNC() { return clang_getTokenSpelling$FUNC_; }

    private static final MethodHandle clang_getTokenSpelling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTokenSpelling",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTokenSpelling$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getTokenSpelling$MH() { return clang_getTokenSpelling$MH_; }

    private static final FunctionDescriptor clang_getTokenLocation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
            C_POINTER.withName("ptr_data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getTokenLocation$FUNC() { return clang_getTokenLocation$FUNC_; }

    private static final MethodHandle clang_getTokenLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTokenLocation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTokenLocation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getTokenLocation$MH() { return clang_getTokenLocation$MH_; }

    private static final FunctionDescriptor clang_getTokenExtent$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("begin_int_data"),
        C_INT.withName("end_int_data")
    ),
        C_POINTER,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
            C_POINTER.withName("ptr_data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getTokenExtent$FUNC() { return clang_getTokenExtent$FUNC_; }

    private static final MethodHandle clang_getTokenExtent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTokenExtent",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTokenExtent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getTokenExtent$MH() { return clang_getTokenExtent$MH_; }

    private static final FunctionDescriptor clang_tokenize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        ),
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_tokenize$FUNC() { return clang_tokenize$FUNC_; }

    private static final MethodHandle clang_tokenize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_tokenize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_tokenize$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_tokenize$MH() { return clang_tokenize$MH_; }

    private static final FunctionDescriptor clang_annotateTokens$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_annotateTokens$FUNC() { return clang_annotateTokens$FUNC_; }

    private static final MethodHandle clang_annotateTokens$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_annotateTokens",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V",
        clang_annotateTokens$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_annotateTokens$MH() { return clang_annotateTokens$MH_; }

    private static final FunctionDescriptor clang_disposeTokens$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_disposeTokens$FUNC() { return clang_disposeTokens$FUNC_; }

    private static final MethodHandle clang_disposeTokens$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeTokens",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        clang_disposeTokens$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_disposeTokens$MH() { return clang_disposeTokens$MH_; }

    private static final FunctionDescriptor clang_getCursorKindSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCursorKindSpelling$FUNC() { return clang_getCursorKindSpelling$FUNC_; }

    private static final MethodHandle clang_getCursorKindSpelling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorKindSpelling",
        "(I)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorKindSpelling$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCursorKindSpelling$MH() { return clang_getCursorKindSpelling$MH_; }

    private static final FunctionDescriptor clang_getDefinitionSpellingAndExtent$FUNC_ = FunctionDescriptor.ofVoid(
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getDefinitionSpellingAndExtent$FUNC() { return clang_getDefinitionSpellingAndExtent$FUNC_; }

    private static final MethodHandle clang_getDefinitionSpellingAndExtent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDefinitionSpellingAndExtent",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_getDefinitionSpellingAndExtent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getDefinitionSpellingAndExtent$MH() { return clang_getDefinitionSpellingAndExtent$MH_; }

    private static final FunctionDescriptor clang_enableStackTraces$FUNC_ = FunctionDescriptor.ofVoid();
    public static jdk.incubator.foreign.FunctionDescriptor clang_enableStackTraces$FUNC() { return clang_enableStackTraces$FUNC_; }

    private static final MethodHandle clang_enableStackTraces$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_enableStackTraces",
        "()V",
        clang_enableStackTraces$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_enableStackTraces$MH() { return clang_enableStackTraces$MH_; }

    private static final FunctionDescriptor clang_executeOnThread$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_executeOnThread$FUNC() { return clang_executeOnThread$FUNC_; }

    private static final MethodHandle clang_executeOnThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_executeOnThread",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        clang_executeOnThread$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_executeOnThread$MH() { return clang_executeOnThread$MH_; }

    private static final FunctionDescriptor clang_executeOnThread$fn$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_executeOnThread$fn$FUNC() { return clang_executeOnThread$fn$FUNC_; }

    private static final MemoryLayout CXCompletionResult$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("CursorKind"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("CompletionString")
    );
    public static jdk.incubator.foreign.MemoryLayout CXCompletionResult$struct$LAYOUT() { return CXCompletionResult$struct$LAYOUT_; }

    private static final MemoryLayout CursorKind$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout CursorKind$LAYOUT() { return CursorKind$LAYOUT_; }

    private static final VarHandle CursorKind$VH_ = CursorKind$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle CursorKind$VH() { return CursorKind$VH_; }

    private static final MemoryLayout CompletionString$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout CompletionString$LAYOUT() { return CompletionString$LAYOUT_; }

    private static final VarHandle CompletionString$VH_ = MemoryHandles.asAddressVarHandle(CompletionString$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle CompletionString$VH() { return CompletionString$VH_; }

    public static int CXCompletionChunk_Optional() { return (int)0L; }

    public static int CXCompletionChunk_TypedText() { return (int)1L; }

    public static int CXCompletionChunk_Text() { return (int)2L; }

    public static int CXCompletionChunk_Placeholder() { return (int)3L; }

    public static int CXCompletionChunk_Informative() { return (int)4L; }

    public static int CXCompletionChunk_CurrentParameter() { return (int)5L; }

    public static int CXCompletionChunk_LeftParen() { return (int)6L; }

    public static int CXCompletionChunk_RightParen() { return (int)7L; }

    public static int CXCompletionChunk_LeftBracket() { return (int)8L; }

    public static int CXCompletionChunk_RightBracket() { return (int)9L; }

    public static int CXCompletionChunk_LeftBrace() { return (int)10L; }

    public static int CXCompletionChunk_RightBrace() { return (int)11L; }

    public static int CXCompletionChunk_LeftAngle() { return (int)12L; }

    public static int CXCompletionChunk_RightAngle() { return (int)13L; }

    public static int CXCompletionChunk_Comma() { return (int)14L; }

    public static int CXCompletionChunk_ResultType() { return (int)15L; }

    public static int CXCompletionChunk_Colon() { return (int)16L; }

    public static int CXCompletionChunk_SemiColon() { return (int)17L; }

    public static int CXCompletionChunk_Equal() { return (int)18L; }

    public static int CXCompletionChunk_HorizontalSpace() { return (int)19L; }

    public static int CXCompletionChunk_VerticalSpace() { return (int)20L; }

    private static final FunctionDescriptor clang_getCompletionChunkKind$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCompletionChunkKind$FUNC() { return clang_getCompletionChunkKind$FUNC_; }

    private static final MethodHandle clang_getCompletionChunkKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionChunkKind",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        clang_getCompletionChunkKind$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCompletionChunkKind$MH() { return clang_getCompletionChunkKind$MH_; }

    private static final FunctionDescriptor clang_getCompletionChunkText$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCompletionChunkText$FUNC() { return clang_getCompletionChunkText$FUNC_; }

    private static final MethodHandle clang_getCompletionChunkText$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionChunkText",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCompletionChunkText$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCompletionChunkText$MH() { return clang_getCompletionChunkText$MH_; }

    private static final FunctionDescriptor clang_getCompletionChunkCompletionString$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCompletionChunkCompletionString$FUNC() { return clang_getCompletionChunkCompletionString$FUNC_; }

    private static final MethodHandle clang_getCompletionChunkCompletionString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionChunkCompletionString",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getCompletionChunkCompletionString$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCompletionChunkCompletionString$MH() { return clang_getCompletionChunkCompletionString$MH_; }

    private static final FunctionDescriptor clang_getNumCompletionChunks$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getNumCompletionChunks$FUNC() { return clang_getNumCompletionChunks$FUNC_; }

    private static final MethodHandle clang_getNumCompletionChunks$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumCompletionChunks",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_getNumCompletionChunks$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getNumCompletionChunks$MH() { return clang_getNumCompletionChunks$MH_; }

    private static final FunctionDescriptor clang_getCompletionPriority$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCompletionPriority$FUNC() { return clang_getCompletionPriority$FUNC_; }

    private static final MethodHandle clang_getCompletionPriority$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionPriority",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_getCompletionPriority$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCompletionPriority$MH() { return clang_getCompletionPriority$MH_; }

    private static final FunctionDescriptor clang_getCompletionAvailability$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCompletionAvailability$FUNC() { return clang_getCompletionAvailability$FUNC_; }

    private static final MethodHandle clang_getCompletionAvailability$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionAvailability",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_getCompletionAvailability$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCompletionAvailability$MH() { return clang_getCompletionAvailability$MH_; }

    private static final FunctionDescriptor clang_getCompletionNumAnnotations$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCompletionNumAnnotations$FUNC() { return clang_getCompletionNumAnnotations$FUNC_; }

    private static final MethodHandle clang_getCompletionNumAnnotations$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionNumAnnotations",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_getCompletionNumAnnotations$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCompletionNumAnnotations$MH() { return clang_getCompletionNumAnnotations$MH_; }

    private static final FunctionDescriptor clang_getCompletionAnnotation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCompletionAnnotation$FUNC() { return clang_getCompletionAnnotation$FUNC_; }

    private static final MethodHandle clang_getCompletionAnnotation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionAnnotation",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCompletionAnnotation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCompletionAnnotation$MH() { return clang_getCompletionAnnotation$MH_; }

    private static final FunctionDescriptor clang_getCompletionParent$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCompletionParent$FUNC() { return clang_getCompletionParent$FUNC_; }

    private static final MethodHandle clang_getCompletionParent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionParent",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCompletionParent$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCompletionParent$MH() { return clang_getCompletionParent$MH_; }

    private static final FunctionDescriptor clang_getCompletionBriefComment$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCompletionBriefComment$FUNC() { return clang_getCompletionBriefComment$FUNC_; }

    private static final MethodHandle clang_getCompletionBriefComment$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionBriefComment",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCompletionBriefComment$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCompletionBriefComment$MH() { return clang_getCompletionBriefComment$MH_; }

    private static final FunctionDescriptor clang_getCursorCompletionString$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCursorCompletionString$FUNC() { return clang_getCursorCompletionString$FUNC_; }

    private static final MethodHandle clang_getCursorCompletionString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorCompletionString",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getCursorCompletionString$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCursorCompletionString$MH() { return clang_getCursorCompletionString$MH_; }

    private static final MemoryLayout CXCodeCompleteResults$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Results"),
        C_INT.withName("NumResults"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static jdk.incubator.foreign.MemoryLayout CXCodeCompleteResults$struct$LAYOUT() { return CXCodeCompleteResults$struct$LAYOUT_; }

    private static final MemoryLayout Results$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout Results$LAYOUT() { return Results$LAYOUT_; }

    private static final VarHandle Results$VH_ = MemoryHandles.asAddressVarHandle(Results$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle Results$VH() { return Results$VH_; }

    private static final MemoryLayout NumResults$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout NumResults$LAYOUT() { return NumResults$LAYOUT_; }

    private static final VarHandle NumResults$VH_ = NumResults$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle NumResults$VH() { return NumResults$VH_; }

    private static final FunctionDescriptor clang_getCompletionNumFixIts$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCompletionNumFixIts$FUNC() { return clang_getCompletionNumFixIts$FUNC_; }

    private static final MethodHandle clang_getCompletionNumFixIts$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionNumFixIts",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        clang_getCompletionNumFixIts$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCompletionNumFixIts$MH() { return clang_getCompletionNumFixIts$MH_; }

    private static final FunctionDescriptor clang_getCompletionFixIt$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getCompletionFixIt$FUNC() { return clang_getCompletionFixIt$FUNC_; }

    private static final MethodHandle clang_getCompletionFixIt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionFixIt",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCompletionFixIt$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getCompletionFixIt$MH() { return clang_getCompletionFixIt$MH_; }

    public static int CXCodeComplete_IncludeMacros() { return (int)1L; }

    public static int CXCodeComplete_IncludeCodePatterns() { return (int)2L; }

    public static int CXCodeComplete_IncludeBriefComments() { return (int)4L; }

    public static int CXCodeComplete_SkipPreamble() { return (int)8L; }

    public static int CXCodeComplete_IncludeCompletionsWithFixIts() { return (int)16L; }

    public static int CXCompletionContext_Unexposed() { return (int)0L; }

    public static int CXCompletionContext_AnyType() { return (int)1L; }

    public static int CXCompletionContext_AnyValue() { return (int)2L; }

    public static int CXCompletionContext_ObjCObjectValue() { return (int)4L; }

    public static int CXCompletionContext_ObjCSelectorValue() { return (int)8L; }

    public static int CXCompletionContext_CXXClassTypeValue() { return (int)16L; }

    public static int CXCompletionContext_DotMemberAccess() { return (int)32L; }

    public static int CXCompletionContext_ArrowMemberAccess() { return (int)64L; }

    public static int CXCompletionContext_ObjCPropertyAccess() { return (int)128L; }

    public static int CXCompletionContext_EnumTag() { return (int)256L; }

    public static int CXCompletionContext_UnionTag() { return (int)512L; }

    public static int CXCompletionContext_StructTag() { return (int)1024L; }

    public static int CXCompletionContext_ClassTag() { return (int)2048L; }

    public static int CXCompletionContext_Namespace() { return (int)4096L; }

    public static int CXCompletionContext_NestedNameSpecifier() { return (int)8192L; }

    public static int CXCompletionContext_ObjCInterface() { return (int)16384L; }

    public static int CXCompletionContext_ObjCProtocol() { return (int)32768L; }

    public static int CXCompletionContext_ObjCCategory() { return (int)65536L; }

    public static int CXCompletionContext_ObjCInstanceMessage() { return (int)131072L; }

    public static int CXCompletionContext_ObjCClassMessage() { return (int)262144L; }

    public static int CXCompletionContext_ObjCSelectorName() { return (int)524288L; }

    public static int CXCompletionContext_MacroName() { return (int)1048576L; }

    public static int CXCompletionContext_NaturalLanguage() { return (int)2097152L; }

    public static int CXCompletionContext_IncludedFile() { return (int)4194304L; }

    public static int CXCompletionContext_Unknown() { return (int)8388607L; }

    private static final FunctionDescriptor clang_defaultCodeCompleteOptions$FUNC_ = FunctionDescriptor.of(C_INT);
    public static jdk.incubator.foreign.FunctionDescriptor clang_defaultCodeCompleteOptions$FUNC() { return clang_defaultCodeCompleteOptions$FUNC_; }

    private static final MethodHandle clang_defaultCodeCompleteOptions$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_defaultCodeCompleteOptions",
        "()I",
        clang_defaultCodeCompleteOptions$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_defaultCodeCompleteOptions$MH() { return clang_defaultCodeCompleteOptions$MH_; }

    private static final FunctionDescriptor clang_codeCompleteAt$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteAt$FUNC() { return clang_codeCompleteAt$FUNC_; }

    private static final MethodHandle clang_codeCompleteAt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteAt",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        clang_codeCompleteAt$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_codeCompleteAt$MH() { return clang_codeCompleteAt$MH_; }

    private static final FunctionDescriptor clang_sortCodeCompletionResults$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_sortCodeCompletionResults$FUNC() { return clang_sortCodeCompletionResults$FUNC_; }

    private static final MethodHandle clang_sortCodeCompletionResults$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_sortCodeCompletionResults",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        clang_sortCodeCompletionResults$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_sortCodeCompletionResults$MH() { return clang_sortCodeCompletionResults$MH_; }

    private static final FunctionDescriptor clang_disposeCodeCompleteResults$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_disposeCodeCompleteResults$FUNC() { return clang_disposeCodeCompleteResults$FUNC_; }

    private static final MethodHandle clang_disposeCodeCompleteResults$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeCodeCompleteResults",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_disposeCodeCompleteResults$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_disposeCodeCompleteResults$MH() { return clang_disposeCodeCompleteResults$MH_; }

    private static final FunctionDescriptor clang_codeCompleteGetNumDiagnostics$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetNumDiagnostics$FUNC() { return clang_codeCompleteGetNumDiagnostics$FUNC_; }

    private static final MethodHandle clang_codeCompleteGetNumDiagnostics$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetNumDiagnostics",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_codeCompleteGetNumDiagnostics$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_codeCompleteGetNumDiagnostics$MH() { return clang_codeCompleteGetNumDiagnostics$MH_; }

    private static final FunctionDescriptor clang_codeCompleteGetDiagnostic$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetDiagnostic$FUNC() { return clang_codeCompleteGetDiagnostic$FUNC_; }

    private static final MethodHandle clang_codeCompleteGetDiagnostic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetDiagnostic",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        clang_codeCompleteGetDiagnostic$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_codeCompleteGetDiagnostic$MH() { return clang_codeCompleteGetDiagnostic$MH_; }

    private static final FunctionDescriptor clang_codeCompleteGetContexts$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetContexts$FUNC() { return clang_codeCompleteGetContexts$FUNC_; }

    private static final MethodHandle clang_codeCompleteGetContexts$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetContexts",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        clang_codeCompleteGetContexts$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_codeCompleteGetContexts$MH() { return clang_codeCompleteGetContexts$MH_; }

    private static final FunctionDescriptor clang_codeCompleteGetContainerKind$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetContainerKind$FUNC() { return clang_codeCompleteGetContainerKind$FUNC_; }

    private static final MethodHandle clang_codeCompleteGetContainerKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetContainerKind",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_codeCompleteGetContainerKind$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_codeCompleteGetContainerKind$MH() { return clang_codeCompleteGetContainerKind$MH_; }

    private static final FunctionDescriptor clang_codeCompleteGetContainerUSR$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetContainerUSR$FUNC() { return clang_codeCompleteGetContainerUSR$FUNC_; }

    private static final MethodHandle clang_codeCompleteGetContainerUSR$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetContainerUSR",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_codeCompleteGetContainerUSR$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_codeCompleteGetContainerUSR$MH() { return clang_codeCompleteGetContainerUSR$MH_; }

    private static final FunctionDescriptor clang_codeCompleteGetObjCSelector$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetObjCSelector$FUNC() { return clang_codeCompleteGetObjCSelector$FUNC_; }

    private static final MethodHandle clang_codeCompleteGetObjCSelector$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetObjCSelector",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_codeCompleteGetObjCSelector$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_codeCompleteGetObjCSelector$MH() { return clang_codeCompleteGetObjCSelector$MH_; }

    private static final FunctionDescriptor clang_getClangVersion$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ));
    public static jdk.incubator.foreign.FunctionDescriptor clang_getClangVersion$FUNC() { return clang_getClangVersion$FUNC_; }

    private static final MethodHandle clang_getClangVersion$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getClangVersion",
        "()Ljdk/incubator/foreign/MemorySegment;",
        clang_getClangVersion$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getClangVersion$MH() { return clang_getClangVersion$MH_; }

    private static final FunctionDescriptor clang_toggleCrashRecovery$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_toggleCrashRecovery$FUNC() { return clang_toggleCrashRecovery$FUNC_; }

    private static final MethodHandle clang_toggleCrashRecovery$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_toggleCrashRecovery",
        "(I)V",
        clang_toggleCrashRecovery$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_toggleCrashRecovery$MH() { return clang_toggleCrashRecovery$MH_; }

    private static final FunctionDescriptor clang_getInclusions$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getInclusions$FUNC() { return clang_getInclusions$FUNC_; }

    private static final MethodHandle clang_getInclusions$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getInclusions",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_getInclusions$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getInclusions$MH() { return clang_getInclusions$MH_; }

    private static final FunctionDescriptor clang_getInclusions$visitor$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getInclusions$visitor$FUNC() { return clang_getInclusions$visitor$FUNC_; }

    public static int CXEval_Int() { return (int)1L; }

    public static int CXEval_Float() { return (int)2L; }

    public static int CXEval_ObjCStrLiteral() { return (int)3L; }

    public static int CXEval_StrLiteral() { return (int)4L; }

    public static int CXEval_CFStr() { return (int)5L; }

    public static int CXEval_Other() { return (int)6L; }

    public static int CXEval_UnExposed() { return (int)0L; }

    private static final FunctionDescriptor clang_Cursor_Evaluate$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Cursor_Evaluate$FUNC() { return clang_Cursor_Evaluate$FUNC_; }

    private static final MethodHandle clang_Cursor_Evaluate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_Evaluate",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_Cursor_Evaluate$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Cursor_Evaluate$MH() { return clang_Cursor_Evaluate$MH_; }

    private static final FunctionDescriptor clang_EvalResult_getKind$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getKind$FUNC() { return clang_EvalResult_getKind$FUNC_; }

    private static final MethodHandle clang_EvalResult_getKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getKind",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_EvalResult_getKind$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_EvalResult_getKind$MH() { return clang_EvalResult_getKind$MH_; }

    private static final FunctionDescriptor clang_EvalResult_getAsInt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getAsInt$FUNC() { return clang_EvalResult_getAsInt$FUNC_; }

    private static final MethodHandle clang_EvalResult_getAsInt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getAsInt",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_EvalResult_getAsInt$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_EvalResult_getAsInt$MH() { return clang_EvalResult_getAsInt$MH_; }

    private static final FunctionDescriptor clang_EvalResult_getAsLongLong$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getAsLongLong$FUNC() { return clang_EvalResult_getAsLongLong$FUNC_; }

    private static final MethodHandle clang_EvalResult_getAsLongLong$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getAsLongLong",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        clang_EvalResult_getAsLongLong$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_EvalResult_getAsLongLong$MH() { return clang_EvalResult_getAsLongLong$MH_; }

    private static final FunctionDescriptor clang_EvalResult_isUnsignedInt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_isUnsignedInt$FUNC() { return clang_EvalResult_isUnsignedInt$FUNC_; }

    private static final MethodHandle clang_EvalResult_isUnsignedInt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_isUnsignedInt",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_EvalResult_isUnsignedInt$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_EvalResult_isUnsignedInt$MH() { return clang_EvalResult_isUnsignedInt$MH_; }

    private static final FunctionDescriptor clang_EvalResult_getAsUnsigned$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getAsUnsigned$FUNC() { return clang_EvalResult_getAsUnsigned$FUNC_; }

    private static final MethodHandle clang_EvalResult_getAsUnsigned$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getAsUnsigned",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        clang_EvalResult_getAsUnsigned$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_EvalResult_getAsUnsigned$MH() { return clang_EvalResult_getAsUnsigned$MH_; }

    private static final FunctionDescriptor clang_EvalResult_getAsDouble$FUNC_ = FunctionDescriptor.of(C_DOUBLE,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getAsDouble$FUNC() { return clang_EvalResult_getAsDouble$FUNC_; }

    private static final MethodHandle clang_EvalResult_getAsDouble$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getAsDouble",
        "(Ljdk/incubator/foreign/MemoryAddress;)D",
        clang_EvalResult_getAsDouble$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_EvalResult_getAsDouble$MH() { return clang_EvalResult_getAsDouble$MH_; }

    private static final FunctionDescriptor clang_EvalResult_getAsStr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getAsStr$FUNC() { return clang_EvalResult_getAsStr$FUNC_; }

    private static final MethodHandle clang_EvalResult_getAsStr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getAsStr",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_EvalResult_getAsStr$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_EvalResult_getAsStr$MH() { return clang_EvalResult_getAsStr$MH_; }

    private static final FunctionDescriptor clang_EvalResult_dispose$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_dispose$FUNC() { return clang_EvalResult_dispose$FUNC_; }

    private static final MethodHandle clang_EvalResult_dispose$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_EvalResult_dispose$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_EvalResult_dispose$MH() { return clang_EvalResult_dispose$MH_; }

    private static final FunctionDescriptor clang_getRemappings$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getRemappings$FUNC() { return clang_getRemappings$FUNC_; }

    private static final MethodHandle clang_getRemappings$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getRemappings",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getRemappings$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getRemappings$MH() { return clang_getRemappings$MH_; }

    private static final FunctionDescriptor clang_getRemappingsFromFileList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_getRemappingsFromFileList$FUNC() { return clang_getRemappingsFromFileList$FUNC_; }

    private static final MethodHandle clang_getRemappingsFromFileList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getRemappingsFromFileList",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getRemappingsFromFileList$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_getRemappingsFromFileList$MH() { return clang_getRemappingsFromFileList$MH_; }

    private static final FunctionDescriptor clang_remap_getNumFiles$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_remap_getNumFiles$FUNC() { return clang_remap_getNumFiles$FUNC_; }

    private static final MethodHandle clang_remap_getNumFiles$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_remap_getNumFiles",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_remap_getNumFiles$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_remap_getNumFiles$MH() { return clang_remap_getNumFiles$MH_; }

    private static final FunctionDescriptor clang_remap_getFilenames$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_remap_getFilenames$FUNC() { return clang_remap_getFilenames$FUNC_; }

    private static final MethodHandle clang_remap_getFilenames$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_remap_getFilenames",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_remap_getFilenames$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_remap_getFilenames$MH() { return clang_remap_getFilenames$MH_; }

    private static final FunctionDescriptor clang_remap_dispose$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_remap_dispose$FUNC() { return clang_remap_dispose$FUNC_; }

    private static final MethodHandle clang_remap_dispose$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_remap_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_remap_dispose$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_remap_dispose$MH() { return clang_remap_dispose$MH_; }

    public static int CXVisit_Break() { return (int)0L; }

    public static int CXVisit_Continue() { return (int)1L; }

    private static final MemoryLayout CXCursorAndRangeVisitor$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("context"),
        C_POINTER.withName("visit")
    ).withName("CXCursorAndRangeVisitor");
    public static jdk.incubator.foreign.MemoryLayout CXCursorAndRangeVisitor$struct$LAYOUT() { return CXCursorAndRangeVisitor$struct$LAYOUT_; }

    private static final MemoryLayout context$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout context$LAYOUT() { return context$LAYOUT_; }

    private static final VarHandle context$VH_ = MemoryHandles.asAddressVarHandle(context$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle context$VH() { return context$VH_; }

    private static final MemoryLayout visit$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout visit$LAYOUT() { return visit$LAYOUT_; }

    private static final VarHandle visit$VH_ = MemoryHandles.asAddressVarHandle(visit$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle visit$VH() { return visit$VH_; }

    public static int CXResult_Success() { return (int)0L; }

    public static int CXResult_Invalid() { return (int)1L; }

    public static int CXResult_VisitBreak() { return (int)2L; }

    private static final FunctionDescriptor clang_findReferencesInFile$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        MemoryLayout.ofStruct(
            C_POINTER.withName("context"),
            C_POINTER.withName("visit")
        ).withName("CXCursorAndRangeVisitor")
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_findReferencesInFile$FUNC() { return clang_findReferencesInFile$FUNC_; }

    private static final MethodHandle clang_findReferencesInFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_findReferencesInFile",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        clang_findReferencesInFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_findReferencesInFile$MH() { return clang_findReferencesInFile$MH_; }

    private static final FunctionDescriptor clang_findIncludesInFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_POINTER.withName("context"),
            C_POINTER.withName("visit")
        ).withName("CXCursorAndRangeVisitor")
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_findIncludesInFile$FUNC() { return clang_findIncludesInFile$FUNC_; }

    private static final MethodHandle clang_findIncludesInFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_findIncludesInFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        clang_findIncludesInFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_findIncludesInFile$MH() { return clang_findIncludesInFile$MH_; }

    private static final FunctionDescriptor clang_findReferencesInFileWithBlock$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_findReferencesInFileWithBlock$FUNC() { return clang_findReferencesInFileWithBlock$FUNC_; }

    private static final MethodHandle clang_findReferencesInFileWithBlock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_findReferencesInFileWithBlock",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_findReferencesInFileWithBlock$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_findReferencesInFileWithBlock$MH() { return clang_findReferencesInFileWithBlock$MH_; }

    private static final FunctionDescriptor clang_findReferencesInFileWithBlock$x0$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_findReferencesInFileWithBlock$x0$FUNC() { return clang_findReferencesInFileWithBlock$x0$FUNC_; }

    private static final FunctionDescriptor clang_findIncludesInFileWithBlock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_findIncludesInFileWithBlock$FUNC() { return clang_findIncludesInFileWithBlock$FUNC_; }

    private static final MethodHandle clang_findIncludesInFileWithBlock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_findIncludesInFileWithBlock",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_findIncludesInFileWithBlock$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_findIncludesInFileWithBlock$MH() { return clang_findIncludesInFileWithBlock$MH_; }

    private static final FunctionDescriptor clang_findIncludesInFileWithBlock$x0$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_findIncludesInFileWithBlock$x0$FUNC() { return clang_findIncludesInFileWithBlock$x0$FUNC_; }

    private static final MemoryLayout CXIdxLoc$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxLoc$struct$LAYOUT() { return CXIdxLoc$struct$LAYOUT_; }

    private static final MemoryLayout CXIdxIncludedFileInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("hashLoc"),
        C_POINTER.withName("filename"),
        C_POINTER.withName("file"),
        C_INT.withName("isImport"),
        C_INT.withName("isAngled"),
        C_INT.withName("isModuleImport"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxIncludedFileInfo$struct$LAYOUT() { return CXIdxIncludedFileInfo$struct$LAYOUT_; }

    private static final MemoryLayout filename$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout filename$LAYOUT() { return filename$LAYOUT_; }

    private static final VarHandle filename$VH_ = MemoryHandles.asAddressVarHandle(filename$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle filename$VH() { return filename$VH_; }

    private static final MemoryLayout file$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout file$LAYOUT() { return file$LAYOUT_; }

    private static final VarHandle file$VH_ = MemoryHandles.asAddressVarHandle(file$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle file$VH() { return file$VH_; }

    private static final MemoryLayout isImport$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout isImport$LAYOUT() { return isImport$LAYOUT_; }

    private static final VarHandle isImport$VH_ = isImport$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle isImport$VH() { return isImport$VH_; }

    private static final MemoryLayout isAngled$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout isAngled$LAYOUT() { return isAngled$LAYOUT_; }

    private static final VarHandle isAngled$VH_ = isAngled$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle isAngled$VH() { return isAngled$VH_; }

    private static final MemoryLayout isModuleImport$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout isModuleImport$LAYOUT() { return isModuleImport$LAYOUT_; }

    private static final VarHandle isModuleImport$VH_ = isModuleImport$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle isModuleImport$VH() { return isModuleImport$VH_; }

    private static final MemoryLayout CXIdxImportedASTFileInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("file"),
        C_POINTER.withName("module"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc"),
        C_INT.withName("isImplicit"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxImportedASTFileInfo$struct$LAYOUT() { return CXIdxImportedASTFileInfo$struct$LAYOUT_; }

    private static final MemoryLayout module$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout module$LAYOUT() { return module$LAYOUT_; }

    private static final VarHandle module$VH_ = MemoryHandles.asAddressVarHandle(module$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle module$VH() { return module$VH_; }

    private static final MemoryLayout isImplicit$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout isImplicit$LAYOUT() { return isImplicit$LAYOUT_; }

    private static final VarHandle isImplicit$VH_ = isImplicit$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle isImplicit$VH() { return isImplicit$VH_; }

    public static int CXIdxEntity_Unexposed() { return (int)0L; }

    public static int CXIdxEntity_Typedef() { return (int)1L; }

    public static int CXIdxEntity_Function() { return (int)2L; }

    public static int CXIdxEntity_Variable() { return (int)3L; }

    public static int CXIdxEntity_Field() { return (int)4L; }

    public static int CXIdxEntity_EnumConstant() { return (int)5L; }

    public static int CXIdxEntity_ObjCClass() { return (int)6L; }

    public static int CXIdxEntity_ObjCProtocol() { return (int)7L; }

    public static int CXIdxEntity_ObjCCategory() { return (int)8L; }

    public static int CXIdxEntity_ObjCInstanceMethod() { return (int)9L; }

    public static int CXIdxEntity_ObjCClassMethod() { return (int)10L; }

    public static int CXIdxEntity_ObjCProperty() { return (int)11L; }

    public static int CXIdxEntity_ObjCIvar() { return (int)12L; }

    public static int CXIdxEntity_Enum() { return (int)13L; }

    public static int CXIdxEntity_Struct() { return (int)14L; }

    public static int CXIdxEntity_Union() { return (int)15L; }

    public static int CXIdxEntity_CXXClass() { return (int)16L; }

    public static int CXIdxEntity_CXXNamespace() { return (int)17L; }

    public static int CXIdxEntity_CXXNamespaceAlias() { return (int)18L; }

    public static int CXIdxEntity_CXXStaticVariable() { return (int)19L; }

    public static int CXIdxEntity_CXXStaticMethod() { return (int)20L; }

    public static int CXIdxEntity_CXXInstanceMethod() { return (int)21L; }

    public static int CXIdxEntity_CXXConstructor() { return (int)22L; }

    public static int CXIdxEntity_CXXDestructor() { return (int)23L; }

    public static int CXIdxEntity_CXXConversionFunction() { return (int)24L; }

    public static int CXIdxEntity_CXXTypeAlias() { return (int)25L; }

    public static int CXIdxEntity_CXXInterface() { return (int)26L; }

    public static int CXIdxEntityLang_None() { return (int)0L; }

    public static int CXIdxEntityLang_C() { return (int)1L; }

    public static int CXIdxEntityLang_ObjC() { return (int)2L; }

    public static int CXIdxEntityLang_CXX() { return (int)3L; }

    public static int CXIdxEntityLang_Swift() { return (int)4L; }

    public static int CXIdxEntity_NonTemplate() { return (int)0L; }

    public static int CXIdxEntity_Template() { return (int)1L; }

    public static int CXIdxEntity_TemplatePartialSpecialization() { return (int)2L; }

    public static int CXIdxEntity_TemplateSpecialization() { return (int)3L; }

    public static int CXIdxAttr_Unexposed() { return (int)0L; }

    public static int CXIdxAttr_IBAction() { return (int)1L; }

    public static int CXIdxAttr_IBOutlet() { return (int)2L; }

    public static int CXIdxAttr_IBOutletCollection() { return (int)3L; }

    private static final MemoryLayout CXIdxAttrInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc")
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxAttrInfo$struct$LAYOUT() { return CXIdxAttrInfo$struct$LAYOUT_; }

    private static final MemoryLayout CXIdxEntityInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("templateKind"),
        C_INT.withName("lang"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("name"),
        C_POINTER.withName("USR"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        C_POINTER.withName("attributes"),
        C_INT.withName("numAttributes"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$struct$LAYOUT() { return CXIdxEntityInfo$struct$LAYOUT_; }

    private static final MemoryLayout templateKind$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout templateKind$LAYOUT() { return templateKind$LAYOUT_; }

    private static final VarHandle templateKind$VH_ = templateKind$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle templateKind$VH() { return templateKind$VH_; }

    private static final MemoryLayout lang$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout lang$LAYOUT() { return lang$LAYOUT_; }

    private static final VarHandle lang$VH_ = lang$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle lang$VH() { return lang$VH_; }

    private static final MemoryLayout name$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout name$LAYOUT() { return name$LAYOUT_; }

    private static final VarHandle name$VH_ = MemoryHandles.asAddressVarHandle(name$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle name$VH() { return name$VH_; }

    private static final MemoryLayout USR$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout USR$LAYOUT() { return USR$LAYOUT_; }

    private static final VarHandle USR$VH_ = MemoryHandles.asAddressVarHandle(USR$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle USR$VH() { return USR$VH_; }

    private static final MemoryLayout attributes$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout attributes$LAYOUT() { return attributes$LAYOUT_; }

    private static final VarHandle attributes$VH_ = MemoryHandles.asAddressVarHandle(attributes$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle attributes$VH() { return attributes$VH_; }

    private static final MemoryLayout numAttributes$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout numAttributes$LAYOUT() { return numAttributes$LAYOUT_; }

    private static final VarHandle numAttributes$VH_ = numAttributes$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle numAttributes$VH() { return numAttributes$VH_; }

    private static final MemoryLayout CXIdxContainerInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor")
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxContainerInfo$struct$LAYOUT() { return CXIdxContainerInfo$struct$LAYOUT_; }

    private static final MemoryLayout CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("attrInfo"),
        C_POINTER.withName("objcClass"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("classCursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("classLoc")
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT() { return CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT_; }

    private static final MemoryLayout attrInfo$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout attrInfo$LAYOUT() { return attrInfo$LAYOUT_; }

    private static final VarHandle attrInfo$VH_ = MemoryHandles.asAddressVarHandle(attrInfo$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle attrInfo$VH() { return attrInfo$VH_; }

    private static final MemoryLayout objcClass$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout objcClass$LAYOUT() { return objcClass$LAYOUT_; }

    private static final VarHandle objcClass$VH_ = MemoryHandles.asAddressVarHandle(objcClass$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle objcClass$VH() { return objcClass$VH_; }

    public static int CXIdxDeclFlag_Skipped() { return (int)1L; }

    private static final MemoryLayout CXIdxDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("entityInfo"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc"),
        C_POINTER.withName("semanticContainer"),
        C_POINTER.withName("lexicalContainer"),
        C_INT.withName("isRedeclaration"),
        C_INT.withName("isDefinition"),
        C_INT.withName("isContainer"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("declAsContainer"),
        C_INT.withName("isImplicit"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("attributes"),
        C_INT.withName("numAttributes"),
        C_INT.withName("flags")
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$struct$LAYOUT() { return CXIdxDeclInfo$struct$LAYOUT_; }

    private static final MemoryLayout entityInfo$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout entityInfo$LAYOUT() { return entityInfo$LAYOUT_; }

    private static final VarHandle entityInfo$VH_ = MemoryHandles.asAddressVarHandle(entityInfo$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle entityInfo$VH() { return entityInfo$VH_; }

    private static final MemoryLayout semanticContainer$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout semanticContainer$LAYOUT() { return semanticContainer$LAYOUT_; }

    private static final VarHandle semanticContainer$VH_ = MemoryHandles.asAddressVarHandle(semanticContainer$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle semanticContainer$VH() { return semanticContainer$VH_; }

    private static final MemoryLayout lexicalContainer$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout lexicalContainer$LAYOUT() { return lexicalContainer$LAYOUT_; }

    private static final VarHandle lexicalContainer$VH_ = MemoryHandles.asAddressVarHandle(lexicalContainer$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle lexicalContainer$VH() { return lexicalContainer$VH_; }

    private static final MemoryLayout isRedeclaration$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout isRedeclaration$LAYOUT() { return isRedeclaration$LAYOUT_; }

    private static final VarHandle isRedeclaration$VH_ = isRedeclaration$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle isRedeclaration$VH() { return isRedeclaration$VH_; }

    private static final MemoryLayout isDefinition$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout isDefinition$LAYOUT() { return isDefinition$LAYOUT_; }

    private static final VarHandle isDefinition$VH_ = isDefinition$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle isDefinition$VH() { return isDefinition$VH_; }

    private static final MemoryLayout isContainer$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout isContainer$LAYOUT() { return isContainer$LAYOUT_; }

    private static final VarHandle isContainer$VH_ = isContainer$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle isContainer$VH() { return isContainer$VH_; }

    private static final MemoryLayout declAsContainer$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout declAsContainer$LAYOUT() { return declAsContainer$LAYOUT_; }

    private static final VarHandle declAsContainer$VH_ = MemoryHandles.asAddressVarHandle(declAsContainer$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle declAsContainer$VH() { return declAsContainer$VH_; }

}

