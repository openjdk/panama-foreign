/*
 *  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 *  This code is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License version 2 only, as
 *  published by the Free Software Foundation.  Oracle designates this
 *  particular file as subject to the "Classpath" exception as provided
 *  by Oracle in the LICENSE file that accompanied this code.
 *
 *  This code is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 *  version 2 for more details (a copy is included in the LICENSE file that
 *  accompanied this code).
 *
 *  You should have received a copy of the GNU General Public License version
 *  2 along with this work; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 *  or visit www.oracle.com if you need additional information or have any
 *  questions.
 *
 */

// Generated by jextract

package jdk.internal.clang.libclang;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;

class Index_h$constants_1 extends Index_h$constants_0 {
    Index_h$constants_1() {}
    static final FunctionDescriptor clang_Cursor_isInlineNamespace$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isInlineNamespace$FUNC() { return clang_Cursor_isInlineNamespace$FUNC_; }

    static final MethodHandle clang_Cursor_isInlineNamespace$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isInlineNamespace",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isInlineNamespace$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_isInlineNamespace$MH() { return clang_Cursor_isInlineNamespace$MH_; }

    static final int CXRefQualifier_None() { return (int)0L; }

    static final int CXRefQualifier_LValue() { return (int)1L; }

    static final int CXRefQualifier_RValue() { return (int)2L; }

    static final FunctionDescriptor clang_Type_getNumTemplateArguments$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getNumTemplateArguments$FUNC() { return clang_Type_getNumTemplateArguments$FUNC_; }

    static final MethodHandle clang_Type_getNumTemplateArguments$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getNumTemplateArguments",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Type_getNumTemplateArguments$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getNumTemplateArguments$MH() { return clang_Type_getNumTemplateArguments$MH_; }

    static final FunctionDescriptor clang_Type_getTemplateArgumentAsType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getTemplateArgumentAsType$FUNC() { return clang_Type_getTemplateArgumentAsType$FUNC_; }

    static final MethodHandle clang_Type_getTemplateArgumentAsType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getTemplateArgumentAsType",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_Type_getTemplateArgumentAsType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getTemplateArgumentAsType$MH() { return clang_Type_getTemplateArgumentAsType$MH_; }

    static final FunctionDescriptor clang_Type_getCXXRefQualifier$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getCXXRefQualifier$FUNC() { return clang_Type_getCXXRefQualifier$FUNC_; }

    static final MethodHandle clang_Type_getCXXRefQualifier$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getCXXRefQualifier",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Type_getCXXRefQualifier$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_getCXXRefQualifier$MH() { return clang_Type_getCXXRefQualifier$MH_; }

    static final FunctionDescriptor clang_Cursor_isBitField$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isBitField$FUNC() { return clang_Cursor_isBitField$FUNC_; }

    static final MethodHandle clang_Cursor_isBitField$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isBitField",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isBitField$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_isBitField$MH() { return clang_Cursor_isBitField$MH_; }

    static final FunctionDescriptor clang_isVirtualBase$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isVirtualBase$FUNC() { return clang_isVirtualBase$FUNC_; }

    static final MethodHandle clang_isVirtualBase$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isVirtualBase",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_isVirtualBase$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isVirtualBase$MH() { return clang_isVirtualBase$MH_; }

    static final int CX_CXXInvalidAccessSpecifier() { return (int)0L; }

    static final int CX_CXXPublic() { return (int)1L; }

    static final int CX_CXXProtected() { return (int)2L; }

    static final int CX_CXXPrivate() { return (int)3L; }

    static final FunctionDescriptor clang_getCXXAccessSpecifier$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCXXAccessSpecifier$FUNC() { return clang_getCXXAccessSpecifier$FUNC_; }

    static final MethodHandle clang_getCXXAccessSpecifier$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCXXAccessSpecifier",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getCXXAccessSpecifier$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCXXAccessSpecifier$MH() { return clang_getCXXAccessSpecifier$MH_; }

    static final int CX_SC_Invalid() { return (int)0L; }

    static final int CX_SC_None() { return (int)1L; }

    static final int CX_SC_Extern() { return (int)2L; }

    static final int CX_SC_Static() { return (int)3L; }

    static final int CX_SC_PrivateExtern() { return (int)4L; }

    static final int CX_SC_OpenCLWorkGroupLocal() { return (int)5L; }

    static final int CX_SC_Auto() { return (int)6L; }

    static final int CX_SC_Register() { return (int)7L; }

    static final FunctionDescriptor clang_Cursor_getStorageClass$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getStorageClass$FUNC() { return clang_Cursor_getStorageClass$FUNC_; }

    static final MethodHandle clang_Cursor_getStorageClass$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getStorageClass",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_getStorageClass$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getStorageClass$MH() { return clang_Cursor_getStorageClass$MH_; }

    static final FunctionDescriptor clang_getNumOverloadedDecls$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getNumOverloadedDecls$FUNC() { return clang_getNumOverloadedDecls$FUNC_; }

    static final MethodHandle clang_getNumOverloadedDecls$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumOverloadedDecls",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getNumOverloadedDecls$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getNumOverloadedDecls$MH() { return clang_getNumOverloadedDecls$MH_; }

    static final FunctionDescriptor clang_getOverloadedDecl$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getOverloadedDecl$FUNC() { return clang_getOverloadedDecl$FUNC_; }

    static final MethodHandle clang_getOverloadedDecl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getOverloadedDecl",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_getOverloadedDecl$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getOverloadedDecl$MH() { return clang_getOverloadedDecl$MH_; }

    static final FunctionDescriptor clang_getIBOutletCollectionType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getIBOutletCollectionType$FUNC() { return clang_getIBOutletCollectionType$FUNC_; }

    static final MethodHandle clang_getIBOutletCollectionType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getIBOutletCollectionType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getIBOutletCollectionType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getIBOutletCollectionType$MH() { return clang_getIBOutletCollectionType$MH_; }

    static final int CXChildVisit_Break() { return (int)0L; }

    static final int CXChildVisit_Continue() { return (int)1L; }

    static final int CXChildVisit_Recurse() { return (int)2L; }

    static final FunctionDescriptor clang_visitChildren$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_visitChildren$FUNC() { return clang_visitChildren$FUNC_; }

    static final MethodHandle clang_visitChildren$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_visitChildren",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_visitChildren$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_visitChildren$MH() { return clang_visitChildren$MH_; }

    static final FunctionDescriptor clang_visitChildren$visitor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_visitChildren$visitor$FUNC() { return clang_visitChildren$visitor$FUNC_; }

    static final FunctionDescriptor clang_visitTemplateSpecializations$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_visitTemplateSpecializations$FUNC() { return clang_visitTemplateSpecializations$FUNC_; }

    static final MethodHandle clang_visitTemplateSpecializations$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_visitTemplateSpecializations",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_visitTemplateSpecializations$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_visitTemplateSpecializations$MH() { return clang_visitTemplateSpecializations$MH_; }

    static final FunctionDescriptor clang_visitTemplateSpecializations$visitor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_visitTemplateSpecializations$visitor$FUNC() { return clang_visitTemplateSpecializations$visitor$FUNC_; }

    static final FunctionDescriptor clang_visitTemplateSpecializationChildren$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_visitTemplateSpecializationChildren$FUNC() { return clang_visitTemplateSpecializationChildren$FUNC_; }

    static final MethodHandle clang_visitTemplateSpecializationChildren$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_visitTemplateSpecializationChildren",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_visitTemplateSpecializationChildren$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_visitTemplateSpecializationChildren$MH() { return clang_visitTemplateSpecializationChildren$MH_; }

    static final FunctionDescriptor clang_visitTemplateSpecializationChildren$visitor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_visitTemplateSpecializationChildren$visitor$FUNC() { return clang_visitTemplateSpecializationChildren$visitor$FUNC_; }

    static final FunctionDescriptor clang_visitChildrenWithBlock$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_visitChildrenWithBlock$FUNC() { return clang_visitChildrenWithBlock$FUNC_; }

    static final MethodHandle clang_visitChildrenWithBlock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_visitChildrenWithBlock",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_visitChildrenWithBlock$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_visitChildrenWithBlock$MH() { return clang_visitChildrenWithBlock$MH_; }

    static final FunctionDescriptor clang_visitChildrenWithBlock$block$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_visitChildrenWithBlock$block$FUNC() { return clang_visitChildrenWithBlock$block$FUNC_; }

    static final FunctionDescriptor clang_getCursorUSR$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorUSR$FUNC() { return clang_getCursorUSR$FUNC_; }

    static final MethodHandle clang_getCursorUSR$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorUSR",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorUSR$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorUSR$MH() { return clang_getCursorUSR$MH_; }

    static final FunctionDescriptor clang_constructUSR_ObjCClass$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCClass$FUNC() { return clang_constructUSR_ObjCClass$FUNC_; }

    static final MethodHandle clang_constructUSR_ObjCClass$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCClass",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_constructUSR_ObjCClass$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_constructUSR_ObjCClass$MH() { return clang_constructUSR_ObjCClass$MH_; }

    static final FunctionDescriptor clang_constructUSR_ObjCCategory$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCCategory$FUNC() { return clang_constructUSR_ObjCCategory$FUNC_; }

    static final MethodHandle clang_constructUSR_ObjCCategory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCCategory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_constructUSR_ObjCCategory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_constructUSR_ObjCCategory$MH() { return clang_constructUSR_ObjCCategory$MH_; }

    static final FunctionDescriptor clang_constructUSR_ObjCProtocol$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCProtocol$FUNC() { return clang_constructUSR_ObjCProtocol$FUNC_; }

    static final MethodHandle clang_constructUSR_ObjCProtocol$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCProtocol",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_constructUSR_ObjCProtocol$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_constructUSR_ObjCProtocol$MH() { return clang_constructUSR_ObjCProtocol$MH_; }

    static final FunctionDescriptor clang_constructUSR_ObjCIvar$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCIvar$FUNC() { return clang_constructUSR_ObjCIvar$FUNC_; }

    static final MethodHandle clang_constructUSR_ObjCIvar$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCIvar",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_constructUSR_ObjCIvar$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_constructUSR_ObjCIvar$MH() { return clang_constructUSR_ObjCIvar$MH_; }

    static final FunctionDescriptor clang_constructUSR_ObjCMethod$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_INT,
        MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCMethod$FUNC() { return clang_constructUSR_ObjCMethod$FUNC_; }

    static final MethodHandle clang_constructUSR_ObjCMethod$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCMethod",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_constructUSR_ObjCMethod$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_constructUSR_ObjCMethod$MH() { return clang_constructUSR_ObjCMethod$MH_; }

    static final FunctionDescriptor clang_constructUSR_ObjCProperty$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCProperty$FUNC() { return clang_constructUSR_ObjCProperty$FUNC_; }

    static final MethodHandle clang_constructUSR_ObjCProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_constructUSR_ObjCProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_constructUSR_ObjCProperty$MH() { return clang_constructUSR_ObjCProperty$MH_; }

    static final FunctionDescriptor clang_getCursorSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorSpelling$FUNC() { return clang_getCursorSpelling$FUNC_; }

    static final MethodHandle clang_getCursorSpelling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorSpelling",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorSpelling$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorSpelling$MH() { return clang_getCursorSpelling$MH_; }

    static final FunctionDescriptor clang_Cursor_getSpellingNameRange$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("begin_int_data"),
        C_INT.withName("end_int_data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getSpellingNameRange$FUNC() { return clang_Cursor_getSpellingNameRange$FUNC_; }

    static final MethodHandle clang_Cursor_getSpellingNameRange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getSpellingNameRange",
        "(Ljdk/incubator/foreign/MemorySegment;II)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getSpellingNameRange$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getSpellingNameRange$MH() { return clang_Cursor_getSpellingNameRange$MH_; }

    static final int CXPrintingPolicy_Indentation() { return (int)0L; }

    static final int CXPrintingPolicy_SuppressSpecifiers() { return (int)1L; }

    static final int CXPrintingPolicy_SuppressTagKeyword() { return (int)2L; }

    static final int CXPrintingPolicy_IncludeTagDefinition() { return (int)3L; }

    static final int CXPrintingPolicy_SuppressScope() { return (int)4L; }

    static final int CXPrintingPolicy_SuppressUnwrittenScope() { return (int)5L; }

    static final int CXPrintingPolicy_SuppressInitializers() { return (int)6L; }

    static final int CXPrintingPolicy_ConstantArraySizeAsWritten() { return (int)7L; }

    static final int CXPrintingPolicy_AnonymousTagLocations() { return (int)8L; }

    static final int CXPrintingPolicy_SuppressStrongLifetime() { return (int)9L; }

    static final int CXPrintingPolicy_SuppressLifetimeQualifiers() { return (int)10L; }

    static final int CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors() { return (int)11L; }

    static final int CXPrintingPolicy_Bool() { return (int)12L; }

    static final int CXPrintingPolicy_Restrict() { return (int)13L; }

    static final int CXPrintingPolicy_Alignof() { return (int)14L; }

    static final int CXPrintingPolicy_UnderscoreAlignof() { return (int)15L; }

    static final int CXPrintingPolicy_UseVoidForZeroParams() { return (int)16L; }

    static final int CXPrintingPolicy_TerseOutput() { return (int)17L; }

    static final int CXPrintingPolicy_PolishForDeclaration() { return (int)18L; }

    static final int CXPrintingPolicy_Half() { return (int)19L; }

    static final int CXPrintingPolicy_MSWChar() { return (int)20L; }

    static final int CXPrintingPolicy_IncludeNewlines() { return (int)21L; }

    static final int CXPrintingPolicy_MSVCFormatting() { return (int)22L; }

    static final int CXPrintingPolicy_ConstantsAsWritten() { return (int)23L; }

    static final int CXPrintingPolicy_SuppressImplicitBase() { return (int)24L; }

    static final int CXPrintingPolicy_FullyQualifiedName() { return (int)25L; }

    static final int CXPrintingPolicy_LastProperty() { return (int)25L; }

    static final FunctionDescriptor clang_PrintingPolicy_getProperty$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_PrintingPolicy_getProperty$FUNC() { return clang_PrintingPolicy_getProperty$FUNC_; }

    static final MethodHandle clang_PrintingPolicy_getProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_PrintingPolicy_getProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        clang_PrintingPolicy_getProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_PrintingPolicy_getProperty$MH() { return clang_PrintingPolicy_getProperty$MH_; }

    static final FunctionDescriptor clang_PrintingPolicy_setProperty$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_PrintingPolicy_setProperty$FUNC() { return clang_PrintingPolicy_setProperty$FUNC_; }

    static final MethodHandle clang_PrintingPolicy_setProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_PrintingPolicy_setProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;II)V",
        clang_PrintingPolicy_setProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_PrintingPolicy_setProperty$MH() { return clang_PrintingPolicy_setProperty$MH_; }

    static final FunctionDescriptor clang_getCursorPrintingPolicy$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorPrintingPolicy$FUNC() { return clang_getCursorPrintingPolicy$FUNC_; }

    static final MethodHandle clang_getCursorPrintingPolicy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorPrintingPolicy",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getCursorPrintingPolicy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorPrintingPolicy$MH() { return clang_getCursorPrintingPolicy$MH_; }

    static final FunctionDescriptor clang_PrintingPolicy_dispose$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_PrintingPolicy_dispose$FUNC() { return clang_PrintingPolicy_dispose$FUNC_; }

    static final MethodHandle clang_PrintingPolicy_dispose$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_PrintingPolicy_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_PrintingPolicy_dispose$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_PrintingPolicy_dispose$MH() { return clang_PrintingPolicy_dispose$MH_; }

    static final FunctionDescriptor clang_getCursorPrettyPrinted$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorPrettyPrinted$FUNC() { return clang_getCursorPrettyPrinted$FUNC_; }

    static final MethodHandle clang_getCursorPrettyPrinted$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorPrettyPrinted",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorPrettyPrinted$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorPrettyPrinted$MH() { return clang_getCursorPrettyPrinted$MH_; }

    static final FunctionDescriptor clang_getTypePrintingPolicy$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTypePrintingPolicy$FUNC() { return clang_getTypePrintingPolicy$FUNC_; }

    static final MethodHandle clang_getTypePrintingPolicy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypePrintingPolicy",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getTypePrintingPolicy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTypePrintingPolicy$MH() { return clang_getTypePrintingPolicy$MH_; }

    static final FunctionDescriptor clang_getTypePrettyPrinted$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTypePrettyPrinted$FUNC() { return clang_getTypePrettyPrinted$FUNC_; }

    static final MethodHandle clang_getTypePrettyPrinted$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypePrettyPrinted",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTypePrettyPrinted$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTypePrettyPrinted$MH() { return clang_getTypePrettyPrinted$MH_; }

    static final FunctionDescriptor clang_getCursorDisplayName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorDisplayName$FUNC() { return clang_getCursorDisplayName$FUNC_; }

    static final MethodHandle clang_getCursorDisplayName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorDisplayName",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorDisplayName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorDisplayName$MH() { return clang_getCursorDisplayName$MH_; }

    static final FunctionDescriptor clang_getCursorReferenced$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorReferenced$FUNC() { return clang_getCursorReferenced$FUNC_; }

    static final MethodHandle clang_getCursorReferenced$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorReferenced",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorReferenced$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorReferenced$MH() { return clang_getCursorReferenced$MH_; }

    static final FunctionDescriptor clang_getCursorDefinition$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorDefinition$FUNC() { return clang_getCursorDefinition$FUNC_; }

    static final MethodHandle clang_getCursorDefinition$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorDefinition",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorDefinition$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorDefinition$MH() { return clang_getCursorDefinition$MH_; }

    static final FunctionDescriptor clang_isCursorDefinition$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_isCursorDefinition$FUNC() { return clang_isCursorDefinition$FUNC_; }

    static final MethodHandle clang_isCursorDefinition$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isCursorDefinition",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_isCursorDefinition$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_isCursorDefinition$MH() { return clang_isCursorDefinition$MH_; }

    static final FunctionDescriptor clang_getCanonicalCursor$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCanonicalCursor$FUNC() { return clang_getCanonicalCursor$FUNC_; }

    static final MethodHandle clang_getCanonicalCursor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCanonicalCursor",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCanonicalCursor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCanonicalCursor$MH() { return clang_getCanonicalCursor$MH_; }

    static final FunctionDescriptor clang_Cursor_getObjCSelectorIndex$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCSelectorIndex$FUNC() { return clang_Cursor_getObjCSelectorIndex$FUNC_; }

    static final MethodHandle clang_Cursor_getObjCSelectorIndex$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCSelectorIndex",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_getObjCSelectorIndex$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getObjCSelectorIndex$MH() { return clang_Cursor_getObjCSelectorIndex$MH_; }

    static final FunctionDescriptor clang_Cursor_isDynamicCall$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isDynamicCall$FUNC() { return clang_Cursor_isDynamicCall$FUNC_; }

    static final MethodHandle clang_Cursor_isDynamicCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isDynamicCall",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isDynamicCall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_isDynamicCall$MH() { return clang_Cursor_isDynamicCall$MH_; }

    static final FunctionDescriptor clang_Cursor_getReceiverType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getReceiverType$FUNC() { return clang_Cursor_getReceiverType$FUNC_; }

    static final MethodHandle clang_Cursor_getReceiverType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getReceiverType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getReceiverType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getReceiverType$MH() { return clang_Cursor_getReceiverType$MH_; }

    static final int CXObjCPropertyAttr_noattr() { return (int)0L; }

    static final int CXObjCPropertyAttr_readonly() { return (int)1L; }

    static final int CXObjCPropertyAttr_getter() { return (int)2L; }

    static final int CXObjCPropertyAttr_assign() { return (int)4L; }

    static final int CXObjCPropertyAttr_readwrite() { return (int)8L; }

    static final int CXObjCPropertyAttr_retain() { return (int)16L; }

    static final int CXObjCPropertyAttr_copy() { return (int)32L; }

    static final int CXObjCPropertyAttr_nonatomic() { return (int)64L; }

    static final int CXObjCPropertyAttr_setter() { return (int)128L; }

    static final int CXObjCPropertyAttr_atomic() { return (int)256L; }

    static final int CXObjCPropertyAttr_weak() { return (int)512L; }

    static final int CXObjCPropertyAttr_strong() { return (int)1024L; }

    static final int CXObjCPropertyAttr_unsafe_unretained() { return (int)2048L; }

    static final int CXObjCPropertyAttr_class() { return (int)4096L; }

    static final FunctionDescriptor clang_Cursor_getObjCPropertyAttributes$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCPropertyAttributes$FUNC() { return clang_Cursor_getObjCPropertyAttributes$FUNC_; }

    static final MethodHandle clang_Cursor_getObjCPropertyAttributes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCPropertyAttributes",
        "(Ljdk/incubator/foreign/MemorySegment;I)I",
        clang_Cursor_getObjCPropertyAttributes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getObjCPropertyAttributes$MH() { return clang_Cursor_getObjCPropertyAttributes$MH_; }

    static final FunctionDescriptor clang_Cursor_getObjCPropertyGetterName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCPropertyGetterName$FUNC() { return clang_Cursor_getObjCPropertyGetterName$FUNC_; }

    static final MethodHandle clang_Cursor_getObjCPropertyGetterName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCPropertyGetterName",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getObjCPropertyGetterName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getObjCPropertyGetterName$MH() { return clang_Cursor_getObjCPropertyGetterName$MH_; }

    static final FunctionDescriptor clang_Cursor_getObjCPropertySetterName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCPropertySetterName$FUNC() { return clang_Cursor_getObjCPropertySetterName$FUNC_; }

    static final MethodHandle clang_Cursor_getObjCPropertySetterName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCPropertySetterName",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getObjCPropertySetterName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getObjCPropertySetterName$MH() { return clang_Cursor_getObjCPropertySetterName$MH_; }

    static final int CXObjCDeclQualifier_None() { return (int)0L; }

    static final int CXObjCDeclQualifier_In() { return (int)1L; }

    static final int CXObjCDeclQualifier_Inout() { return (int)2L; }

    static final int CXObjCDeclQualifier_Out() { return (int)4L; }

    static final int CXObjCDeclQualifier_Bycopy() { return (int)8L; }

    static final int CXObjCDeclQualifier_Byref() { return (int)16L; }

    static final int CXObjCDeclQualifier_Oneway() { return (int)32L; }

    static final FunctionDescriptor clang_Cursor_getObjCDeclQualifiers$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCDeclQualifiers$FUNC() { return clang_Cursor_getObjCDeclQualifiers$FUNC_; }

    static final MethodHandle clang_Cursor_getObjCDeclQualifiers$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCDeclQualifiers",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_getObjCDeclQualifiers$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getObjCDeclQualifiers$MH() { return clang_Cursor_getObjCDeclQualifiers$MH_; }

    static final FunctionDescriptor clang_Cursor_isObjCOptional$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isObjCOptional$FUNC() { return clang_Cursor_isObjCOptional$FUNC_; }

    static final MethodHandle clang_Cursor_isObjCOptional$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isObjCOptional",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isObjCOptional$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_isObjCOptional$MH() { return clang_Cursor_isObjCOptional$MH_; }

    static final FunctionDescriptor clang_Cursor_isVariadic$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isVariadic$FUNC() { return clang_Cursor_isVariadic$FUNC_; }

    static final MethodHandle clang_Cursor_isVariadic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isVariadic",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_Cursor_isVariadic$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_isVariadic$MH() { return clang_Cursor_isVariadic$MH_; }

    static final FunctionDescriptor clang_Cursor_isExternalSymbol$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isExternalSymbol$FUNC() { return clang_Cursor_isExternalSymbol$FUNC_; }

    static final MethodHandle clang_Cursor_isExternalSymbol$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isExternalSymbol",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_Cursor_isExternalSymbol$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_isExternalSymbol$MH() { return clang_Cursor_isExternalSymbol$MH_; }

    static final FunctionDescriptor clang_Cursor_getCommentRange$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("begin_int_data"),
        C_INT.withName("end_int_data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getCommentRange$FUNC() { return clang_Cursor_getCommentRange$FUNC_; }

    static final MethodHandle clang_Cursor_getCommentRange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getCommentRange",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getCommentRange$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getCommentRange$MH() { return clang_Cursor_getCommentRange$MH_; }

    static final FunctionDescriptor clang_Cursor_getRawCommentText$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getRawCommentText$FUNC() { return clang_Cursor_getRawCommentText$FUNC_; }

    static final MethodHandle clang_Cursor_getRawCommentText$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getRawCommentText",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getRawCommentText$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getRawCommentText$MH() { return clang_Cursor_getRawCommentText$MH_; }

    static final FunctionDescriptor clang_Cursor_getBriefCommentText$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getBriefCommentText$FUNC() { return clang_Cursor_getBriefCommentText$FUNC_; }

    static final MethodHandle clang_Cursor_getBriefCommentText$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getBriefCommentText",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getBriefCommentText$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getBriefCommentText$MH() { return clang_Cursor_getBriefCommentText$MH_; }

    static final FunctionDescriptor clang_Cursor_getMangling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getMangling$FUNC() { return clang_Cursor_getMangling$FUNC_; }

    static final MethodHandle clang_Cursor_getMangling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getMangling",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Cursor_getMangling$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getMangling$MH() { return clang_Cursor_getMangling$MH_; }

    static final FunctionDescriptor clang_Cursor_getCXXManglings$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getCXXManglings$FUNC() { return clang_Cursor_getCXXManglings$FUNC_; }

    static final MethodHandle clang_Cursor_getCXXManglings$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getCXXManglings",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_Cursor_getCXXManglings$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getCXXManglings$MH() { return clang_Cursor_getCXXManglings$MH_; }

    static final FunctionDescriptor clang_Cursor_getObjCManglings$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCManglings$FUNC() { return clang_Cursor_getObjCManglings$FUNC_; }

    static final MethodHandle clang_Cursor_getObjCManglings$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCManglings",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_Cursor_getObjCManglings$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getObjCManglings$MH() { return clang_Cursor_getObjCManglings$MH_; }

    static final FunctionDescriptor clang_Cursor_getModule$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getModule$FUNC() { return clang_Cursor_getModule$FUNC_; }

    static final MethodHandle clang_Cursor_getModule$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getModule",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_Cursor_getModule$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_getModule$MH() { return clang_Cursor_getModule$MH_; }

    static final FunctionDescriptor clang_getModuleForFile$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getModuleForFile$FUNC() { return clang_getModuleForFile$FUNC_; }

    static final MethodHandle clang_getModuleForFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getModuleForFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getModuleForFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getModuleForFile$MH() { return clang_getModuleForFile$MH_; }

    static final FunctionDescriptor clang_Module_getASTFile$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Module_getASTFile$FUNC() { return clang_Module_getASTFile$FUNC_; }

    static final MethodHandle clang_Module_getASTFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getASTFile",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_Module_getASTFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Module_getASTFile$MH() { return clang_Module_getASTFile$MH_; }

    static final FunctionDescriptor clang_Module_getParent$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Module_getParent$FUNC() { return clang_Module_getParent$FUNC_; }

    static final MethodHandle clang_Module_getParent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getParent",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_Module_getParent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Module_getParent$MH() { return clang_Module_getParent$MH_; }

    static final FunctionDescriptor clang_Module_getName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Module_getName$FUNC() { return clang_Module_getName$FUNC_; }

    static final MethodHandle clang_Module_getName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getName",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Module_getName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Module_getName$MH() { return clang_Module_getName$MH_; }

    static final FunctionDescriptor clang_Module_getFullName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Module_getFullName$FUNC() { return clang_Module_getFullName$FUNC_; }

    static final MethodHandle clang_Module_getFullName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getFullName",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_Module_getFullName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Module_getFullName$MH() { return clang_Module_getFullName$MH_; }

    static final FunctionDescriptor clang_Module_isSystem$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Module_isSystem$FUNC() { return clang_Module_isSystem$FUNC_; }

    static final MethodHandle clang_Module_isSystem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_isSystem",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_Module_isSystem$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Module_isSystem$MH() { return clang_Module_isSystem$MH_; }

    static final FunctionDescriptor clang_Module_getNumTopLevelHeaders$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Module_getNumTopLevelHeaders$FUNC() { return clang_Module_getNumTopLevelHeaders$FUNC_; }

    static final MethodHandle clang_Module_getNumTopLevelHeaders$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getNumTopLevelHeaders",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_Module_getNumTopLevelHeaders$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Module_getNumTopLevelHeaders$MH() { return clang_Module_getNumTopLevelHeaders$MH_; }

    static final FunctionDescriptor clang_Module_getTopLevelHeader$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Module_getTopLevelHeader$FUNC() { return clang_Module_getTopLevelHeader$FUNC_; }

    static final MethodHandle clang_Module_getTopLevelHeader$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getTopLevelHeader",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        clang_Module_getTopLevelHeader$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Module_getTopLevelHeader$MH() { return clang_Module_getTopLevelHeader$MH_; }

    static final FunctionDescriptor clang_CXXConstructor_isConvertingConstructor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXConstructor_isConvertingConstructor$FUNC() { return clang_CXXConstructor_isConvertingConstructor$FUNC_; }

    static final MethodHandle clang_CXXConstructor_isConvertingConstructor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXConstructor_isConvertingConstructor",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXConstructor_isConvertingConstructor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXXConstructor_isConvertingConstructor$MH() { return clang_CXXConstructor_isConvertingConstructor$MH_; }

    static final FunctionDescriptor clang_CXXConstructor_isCopyConstructor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXConstructor_isCopyConstructor$FUNC() { return clang_CXXConstructor_isCopyConstructor$FUNC_; }

    static final MethodHandle clang_CXXConstructor_isCopyConstructor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXConstructor_isCopyConstructor",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXConstructor_isCopyConstructor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXXConstructor_isCopyConstructor$MH() { return clang_CXXConstructor_isCopyConstructor$MH_; }

    static final FunctionDescriptor clang_CXXConstructor_isDefaultConstructor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXConstructor_isDefaultConstructor$FUNC() { return clang_CXXConstructor_isDefaultConstructor$FUNC_; }

    static final MethodHandle clang_CXXConstructor_isDefaultConstructor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXConstructor_isDefaultConstructor",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXConstructor_isDefaultConstructor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXXConstructor_isDefaultConstructor$MH() { return clang_CXXConstructor_isDefaultConstructor$MH_; }

    static final FunctionDescriptor clang_CXXConstructor_isMoveConstructor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXConstructor_isMoveConstructor$FUNC() { return clang_CXXConstructor_isMoveConstructor$FUNC_; }

    static final MethodHandle clang_CXXConstructor_isMoveConstructor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXConstructor_isMoveConstructor",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXConstructor_isMoveConstructor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXXConstructor_isMoveConstructor$MH() { return clang_CXXConstructor_isMoveConstructor$MH_; }

    static final FunctionDescriptor clang_CXXField_isMutable$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXField_isMutable$FUNC() { return clang_CXXField_isMutable$FUNC_; }

    static final MethodHandle clang_CXXField_isMutable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXField_isMutable",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXField_isMutable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXXField_isMutable$MH() { return clang_CXXField_isMutable$MH_; }

    static final FunctionDescriptor clang_CXXMethod_isDefaulted$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXMethod_isDefaulted$FUNC() { return clang_CXXMethod_isDefaulted$FUNC_; }

    static final MethodHandle clang_CXXMethod_isDefaulted$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXMethod_isDefaulted",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXMethod_isDefaulted$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXXMethod_isDefaulted$MH() { return clang_CXXMethod_isDefaulted$MH_; }

    static final FunctionDescriptor clang_CXXMethod_isPureVirtual$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXMethod_isPureVirtual$FUNC() { return clang_CXXMethod_isPureVirtual$FUNC_; }

    static final MethodHandle clang_CXXMethod_isPureVirtual$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXMethod_isPureVirtual",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXMethod_isPureVirtual$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXXMethod_isPureVirtual$MH() { return clang_CXXMethod_isPureVirtual$MH_; }

    static final FunctionDescriptor clang_CXXMethod_isStatic$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXMethod_isStatic$FUNC() { return clang_CXXMethod_isStatic$FUNC_; }

    static final MethodHandle clang_CXXMethod_isStatic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXMethod_isStatic",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXMethod_isStatic$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXXMethod_isStatic$MH() { return clang_CXXMethod_isStatic$MH_; }

    static final FunctionDescriptor clang_CXXMethod_isVirtual$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXMethod_isVirtual$FUNC() { return clang_CXXMethod_isVirtual$FUNC_; }

    static final MethodHandle clang_CXXMethod_isVirtual$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXMethod_isVirtual",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXMethod_isVirtual$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXXMethod_isVirtual$MH() { return clang_CXXMethod_isVirtual$MH_; }

    static final FunctionDescriptor clang_CXXRecord_isAbstract$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXRecord_isAbstract$FUNC() { return clang_CXXRecord_isAbstract$FUNC_; }

    static final MethodHandle clang_CXXRecord_isAbstract$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXRecord_isAbstract",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXRecord_isAbstract$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXXRecord_isAbstract$MH() { return clang_CXXRecord_isAbstract$MH_; }

    static final FunctionDescriptor clang_EnumDecl_isScoped$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_EnumDecl_isScoped$FUNC() { return clang_EnumDecl_isScoped$FUNC_; }

    static final MethodHandle clang_EnumDecl_isScoped$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EnumDecl_isScoped",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_EnumDecl_isScoped$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_EnumDecl_isScoped$MH() { return clang_EnumDecl_isScoped$MH_; }

    static final FunctionDescriptor clang_CXXMethod_isConst$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXMethod_isConst$FUNC() { return clang_CXXMethod_isConst$FUNC_; }

    static final MethodHandle clang_CXXMethod_isConst$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXMethod_isConst",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_CXXMethod_isConst$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_CXXMethod_isConst$MH() { return clang_CXXMethod_isConst$MH_; }

    static final FunctionDescriptor clang_getTemplateCursorKind$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTemplateCursorKind$FUNC() { return clang_getTemplateCursorKind$FUNC_; }

    static final MethodHandle clang_getTemplateCursorKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTemplateCursorKind",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getTemplateCursorKind$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTemplateCursorKind$MH() { return clang_getTemplateCursorKind$MH_; }

    static final FunctionDescriptor clang_getTemplateSpecializationKind$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTemplateSpecializationKind$FUNC() { return clang_getTemplateSpecializationKind$FUNC_; }

    static final MethodHandle clang_getTemplateSpecializationKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTemplateSpecializationKind",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getTemplateSpecializationKind$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTemplateSpecializationKind$MH() { return clang_getTemplateSpecializationKind$MH_; }

    static final FunctionDescriptor clang_getSpecializedCursorTemplate$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getSpecializedCursorTemplate$FUNC() { return clang_getSpecializedCursorTemplate$FUNC_; }

    static final MethodHandle clang_getSpecializedCursorTemplate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getSpecializedCursorTemplate",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getSpecializedCursorTemplate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getSpecializedCursorTemplate$MH() { return clang_getSpecializedCursorTemplate$MH_; }

    static final FunctionDescriptor clang_getCursorReferenceNameRange$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("begin_int_data"),
        C_INT.withName("end_int_data")
    ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorReferenceNameRange$FUNC() { return clang_getCursorReferenceNameRange$FUNC_; }

    static final MethodHandle clang_getCursorReferenceNameRange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorReferenceNameRange",
        "(Ljdk/incubator/foreign/MemorySegment;II)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorReferenceNameRange$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorReferenceNameRange$MH() { return clang_getCursorReferenceNameRange$MH_; }

    static final int CXNameRange_WantQualifier() { return (int)1L; }

    static final int CXNameRange_WantTemplateArgs() { return (int)2L; }

    static final int CXNameRange_WantSinglePiece() { return (int)4L; }

    static final int CXToken_Punctuation() { return (int)0L; }

    static final int CXToken_Keyword() { return (int)1L; }

    static final int CXToken_Identifier() { return (int)2L; }

    static final int CXToken_Literal() { return (int)3L; }

    static final int CXToken_Comment() { return (int)4L; }

    static final MemoryLayout CXToken$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
        C_POINTER.withName("ptr_data")
    );
    static final jdk.incubator.foreign.MemoryLayout CXToken$struct$LAYOUT() { return CXToken$struct$LAYOUT_; }

    static final MemoryLayout CXToken$ptr_data$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXToken$ptr_data$LAYOUT() { return CXToken$ptr_data$LAYOUT_; }

    static final VarHandle CXToken$ptr_data$VH_ = MemoryHandles.asAddressVarHandle(CXToken$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ptr_data")));
    static final java.lang.invoke.VarHandle CXToken$ptr_data$VH() { return CXToken$ptr_data$VH_; }

    static final FunctionDescriptor clang_getToken$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getToken$FUNC() { return clang_getToken$FUNC_; }

    static final MethodHandle clang_getToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getToken",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getToken$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getToken$MH() { return clang_getToken$MH_; }

    static final FunctionDescriptor clang_getTokenKind$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
            C_POINTER.withName("ptr_data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTokenKind$FUNC() { return clang_getTokenKind$FUNC_; }

    static final MethodHandle clang_getTokenKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTokenKind",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        clang_getTokenKind$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTokenKind$MH() { return clang_getTokenKind$MH_; }

    static final FunctionDescriptor clang_getTokenSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
            C_POINTER.withName("ptr_data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTokenSpelling$FUNC() { return clang_getTokenSpelling$FUNC_; }

    static final MethodHandle clang_getTokenSpelling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTokenSpelling",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTokenSpelling$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTokenSpelling$MH() { return clang_getTokenSpelling$MH_; }

    static final FunctionDescriptor clang_getTokenLocation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
            C_POINTER.withName("ptr_data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTokenLocation$FUNC() { return clang_getTokenLocation$FUNC_; }

    static final MethodHandle clang_getTokenLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTokenLocation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTokenLocation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTokenLocation$MH() { return clang_getTokenLocation$MH_; }

    static final FunctionDescriptor clang_getTokenExtent$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("begin_int_data"),
        C_INT.withName("end_int_data")
    ),
        C_POINTER,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
            C_POINTER.withName("ptr_data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getTokenExtent$FUNC() { return clang_getTokenExtent$FUNC_; }

    static final MethodHandle clang_getTokenExtent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTokenExtent",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getTokenExtent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getTokenExtent$MH() { return clang_getTokenExtent$MH_; }

    static final FunctionDescriptor clang_tokenize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        ),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_tokenize$FUNC() { return clang_tokenize$FUNC_; }

    static final MethodHandle clang_tokenize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_tokenize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_tokenize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_tokenize$MH() { return clang_tokenize$MH_; }

    static final FunctionDescriptor clang_annotateTokens$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_annotateTokens$FUNC() { return clang_annotateTokens$FUNC_; }

    static final MethodHandle clang_annotateTokens$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_annotateTokens",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V",
        clang_annotateTokens$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_annotateTokens$MH() { return clang_annotateTokens$MH_; }

    static final FunctionDescriptor clang_disposeTokens$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeTokens$FUNC() { return clang_disposeTokens$FUNC_; }

    static final MethodHandle clang_disposeTokens$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeTokens",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        clang_disposeTokens$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_disposeTokens$MH() { return clang_disposeTokens$MH_; }

    static final FunctionDescriptor clang_getCursorKindSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorKindSpelling$FUNC() { return clang_getCursorKindSpelling$FUNC_; }

    static final MethodHandle clang_getCursorKindSpelling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorKindSpelling",
        "(I)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCursorKindSpelling$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorKindSpelling$MH() { return clang_getCursorKindSpelling$MH_; }

    static final FunctionDescriptor clang_getDefinitionSpellingAndExtent$FUNC_ = FunctionDescriptor.ofVoid(
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getDefinitionSpellingAndExtent$FUNC() { return clang_getDefinitionSpellingAndExtent$FUNC_; }

    static final MethodHandle clang_getDefinitionSpellingAndExtent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDefinitionSpellingAndExtent",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_getDefinitionSpellingAndExtent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getDefinitionSpellingAndExtent$MH() { return clang_getDefinitionSpellingAndExtent$MH_; }

    static final FunctionDescriptor clang_enableStackTraces$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor clang_enableStackTraces$FUNC() { return clang_enableStackTraces$FUNC_; }

    static final MethodHandle clang_enableStackTraces$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_enableStackTraces",
        "()V",
        clang_enableStackTraces$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_enableStackTraces$MH() { return clang_enableStackTraces$MH_; }

    static final FunctionDescriptor clang_executeOnThread$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_executeOnThread$FUNC() { return clang_executeOnThread$FUNC_; }

    static final MethodHandle clang_executeOnThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_executeOnThread",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        clang_executeOnThread$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_executeOnThread$MH() { return clang_executeOnThread$MH_; }

    static final FunctionDescriptor clang_executeOnThread$fn$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_executeOnThread$fn$FUNC() { return clang_executeOnThread$fn$FUNC_; }

    static final MemoryLayout CXCompletionResult$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("CursorKind"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("CompletionString")
    );
    static final jdk.incubator.foreign.MemoryLayout CXCompletionResult$struct$LAYOUT() { return CXCompletionResult$struct$LAYOUT_; }

    static final MemoryLayout CXCompletionResult$CursorKind$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXCompletionResult$CursorKind$LAYOUT() { return CXCompletionResult$CursorKind$LAYOUT_; }

    static final VarHandle CXCompletionResult$CursorKind$VH_ = CXCompletionResult$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CursorKind"));
    static final java.lang.invoke.VarHandle CXCompletionResult$CursorKind$VH() { return CXCompletionResult$CursorKind$VH_; }

    static final MemoryLayout CXCompletionResult$CompletionString$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXCompletionResult$CompletionString$LAYOUT() { return CXCompletionResult$CompletionString$LAYOUT_; }

    static final VarHandle CXCompletionResult$CompletionString$VH_ = MemoryHandles.asAddressVarHandle(CXCompletionResult$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CompletionString")));
    static final java.lang.invoke.VarHandle CXCompletionResult$CompletionString$VH() { return CXCompletionResult$CompletionString$VH_; }

    static final int CXCompletionChunk_Optional() { return (int)0L; }

    static final int CXCompletionChunk_TypedText() { return (int)1L; }

    static final int CXCompletionChunk_Text() { return (int)2L; }

    static final int CXCompletionChunk_Placeholder() { return (int)3L; }

    static final int CXCompletionChunk_Informative() { return (int)4L; }

    static final int CXCompletionChunk_CurrentParameter() { return (int)5L; }

    static final int CXCompletionChunk_LeftParen() { return (int)6L; }

    static final int CXCompletionChunk_RightParen() { return (int)7L; }

    static final int CXCompletionChunk_LeftBracket() { return (int)8L; }

    static final int CXCompletionChunk_RightBracket() { return (int)9L; }

    static final int CXCompletionChunk_LeftBrace() { return (int)10L; }

    static final int CXCompletionChunk_RightBrace() { return (int)11L; }

    static final int CXCompletionChunk_LeftAngle() { return (int)12L; }

    static final int CXCompletionChunk_RightAngle() { return (int)13L; }

    static final int CXCompletionChunk_Comma() { return (int)14L; }

    static final int CXCompletionChunk_ResultType() { return (int)15L; }

    static final int CXCompletionChunk_Colon() { return (int)16L; }

    static final int CXCompletionChunk_SemiColon() { return (int)17L; }

    static final int CXCompletionChunk_Equal() { return (int)18L; }

    static final int CXCompletionChunk_HorizontalSpace() { return (int)19L; }

    static final int CXCompletionChunk_VerticalSpace() { return (int)20L; }

    static final FunctionDescriptor clang_getCompletionChunkKind$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionChunkKind$FUNC() { return clang_getCompletionChunkKind$FUNC_; }

    static final MethodHandle clang_getCompletionChunkKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionChunkKind",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        clang_getCompletionChunkKind$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCompletionChunkKind$MH() { return clang_getCompletionChunkKind$MH_; }

    static final FunctionDescriptor clang_getCompletionChunkText$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionChunkText$FUNC() { return clang_getCompletionChunkText$FUNC_; }

    static final MethodHandle clang_getCompletionChunkText$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionChunkText",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCompletionChunkText$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCompletionChunkText$MH() { return clang_getCompletionChunkText$MH_; }

    static final FunctionDescriptor clang_getCompletionChunkCompletionString$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionChunkCompletionString$FUNC() { return clang_getCompletionChunkCompletionString$FUNC_; }

    static final MethodHandle clang_getCompletionChunkCompletionString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionChunkCompletionString",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getCompletionChunkCompletionString$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCompletionChunkCompletionString$MH() { return clang_getCompletionChunkCompletionString$MH_; }

    static final FunctionDescriptor clang_getNumCompletionChunks$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getNumCompletionChunks$FUNC() { return clang_getNumCompletionChunks$FUNC_; }

    static final MethodHandle clang_getNumCompletionChunks$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumCompletionChunks",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_getNumCompletionChunks$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getNumCompletionChunks$MH() { return clang_getNumCompletionChunks$MH_; }

    static final FunctionDescriptor clang_getCompletionPriority$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionPriority$FUNC() { return clang_getCompletionPriority$FUNC_; }

    static final MethodHandle clang_getCompletionPriority$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionPriority",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_getCompletionPriority$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCompletionPriority$MH() { return clang_getCompletionPriority$MH_; }

    static final FunctionDescriptor clang_getCompletionAvailability$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionAvailability$FUNC() { return clang_getCompletionAvailability$FUNC_; }

    static final MethodHandle clang_getCompletionAvailability$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionAvailability",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_getCompletionAvailability$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCompletionAvailability$MH() { return clang_getCompletionAvailability$MH_; }

    static final FunctionDescriptor clang_getCompletionNumAnnotations$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionNumAnnotations$FUNC() { return clang_getCompletionNumAnnotations$FUNC_; }

    static final MethodHandle clang_getCompletionNumAnnotations$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionNumAnnotations",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_getCompletionNumAnnotations$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCompletionNumAnnotations$MH() { return clang_getCompletionNumAnnotations$MH_; }

    static final FunctionDescriptor clang_getCompletionAnnotation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionAnnotation$FUNC() { return clang_getCompletionAnnotation$FUNC_; }

    static final MethodHandle clang_getCompletionAnnotation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionAnnotation",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCompletionAnnotation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCompletionAnnotation$MH() { return clang_getCompletionAnnotation$MH_; }

    static final FunctionDescriptor clang_getCompletionParent$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionParent$FUNC() { return clang_getCompletionParent$FUNC_; }

    static final MethodHandle clang_getCompletionParent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionParent",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCompletionParent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCompletionParent$MH() { return clang_getCompletionParent$MH_; }

    static final FunctionDescriptor clang_getCompletionBriefComment$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionBriefComment$FUNC() { return clang_getCompletionBriefComment$FUNC_; }

    static final MethodHandle clang_getCompletionBriefComment$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionBriefComment",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCompletionBriefComment$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCompletionBriefComment$MH() { return clang_getCompletionBriefComment$MH_; }

    static final FunctionDescriptor clang_getCursorCompletionString$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorCompletionString$FUNC() { return clang_getCursorCompletionString$FUNC_; }

    static final MethodHandle clang_getCursorCompletionString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorCompletionString",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getCursorCompletionString$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCursorCompletionString$MH() { return clang_getCursorCompletionString$MH_; }

    static final MemoryLayout CXCodeCompleteResults$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Results"),
        C_INT.withName("NumResults"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout CXCodeCompleteResults$struct$LAYOUT() { return CXCodeCompleteResults$struct$LAYOUT_; }

    static final MemoryLayout CXCodeCompleteResults$Results$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXCodeCompleteResults$Results$LAYOUT() { return CXCodeCompleteResults$Results$LAYOUT_; }

    static final VarHandle CXCodeCompleteResults$Results$VH_ = MemoryHandles.asAddressVarHandle(CXCodeCompleteResults$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Results")));
    static final java.lang.invoke.VarHandle CXCodeCompleteResults$Results$VH() { return CXCodeCompleteResults$Results$VH_; }

    static final MemoryLayout CXCodeCompleteResults$NumResults$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXCodeCompleteResults$NumResults$LAYOUT() { return CXCodeCompleteResults$NumResults$LAYOUT_; }

    static final VarHandle CXCodeCompleteResults$NumResults$VH_ = CXCodeCompleteResults$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumResults"));
    static final java.lang.invoke.VarHandle CXCodeCompleteResults$NumResults$VH() { return CXCodeCompleteResults$NumResults$VH_; }

    static final FunctionDescriptor clang_getCompletionNumFixIts$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionNumFixIts$FUNC() { return clang_getCompletionNumFixIts$FUNC_; }

    static final MethodHandle clang_getCompletionNumFixIts$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionNumFixIts",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        clang_getCompletionNumFixIts$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCompletionNumFixIts$MH() { return clang_getCompletionNumFixIts$MH_; }

    static final FunctionDescriptor clang_getCompletionFixIt$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionFixIt$FUNC() { return clang_getCompletionFixIt$FUNC_; }

    static final MethodHandle clang_getCompletionFixIt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionFixIt",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_getCompletionFixIt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getCompletionFixIt$MH() { return clang_getCompletionFixIt$MH_; }

    static final int CXCodeComplete_IncludeMacros() { return (int)1L; }

    static final int CXCodeComplete_IncludeCodePatterns() { return (int)2L; }

    static final int CXCodeComplete_IncludeBriefComments() { return (int)4L; }

    static final int CXCodeComplete_SkipPreamble() { return (int)8L; }

    static final int CXCodeComplete_IncludeCompletionsWithFixIts() { return (int)16L; }

    static final int CXCompletionContext_Unexposed() { return (int)0L; }

    static final int CXCompletionContext_AnyType() { return (int)1L; }

    static final int CXCompletionContext_AnyValue() { return (int)2L; }

    static final int CXCompletionContext_ObjCObjectValue() { return (int)4L; }

    static final int CXCompletionContext_ObjCSelectorValue() { return (int)8L; }

    static final int CXCompletionContext_CXXClassTypeValue() { return (int)16L; }

    static final int CXCompletionContext_DotMemberAccess() { return (int)32L; }

    static final int CXCompletionContext_ArrowMemberAccess() { return (int)64L; }

    static final int CXCompletionContext_ObjCPropertyAccess() { return (int)128L; }

    static final int CXCompletionContext_EnumTag() { return (int)256L; }

    static final int CXCompletionContext_UnionTag() { return (int)512L; }

    static final int CXCompletionContext_StructTag() { return (int)1024L; }

    static final int CXCompletionContext_ClassTag() { return (int)2048L; }

    static final int CXCompletionContext_Namespace() { return (int)4096L; }

    static final int CXCompletionContext_NestedNameSpecifier() { return (int)8192L; }

    static final int CXCompletionContext_ObjCInterface() { return (int)16384L; }

    static final int CXCompletionContext_ObjCProtocol() { return (int)32768L; }

    static final int CXCompletionContext_ObjCCategory() { return (int)65536L; }

    static final int CXCompletionContext_ObjCInstanceMessage() { return (int)131072L; }

    static final int CXCompletionContext_ObjCClassMessage() { return (int)262144L; }

    static final int CXCompletionContext_ObjCSelectorName() { return (int)524288L; }

    static final int CXCompletionContext_MacroName() { return (int)1048576L; }

    static final int CXCompletionContext_NaturalLanguage() { return (int)2097152L; }

    static final int CXCompletionContext_IncludedFile() { return (int)4194304L; }

    static final int CXCompletionContext_Unknown() { return (int)8388607L; }

    static final FunctionDescriptor clang_defaultCodeCompleteOptions$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor clang_defaultCodeCompleteOptions$FUNC() { return clang_defaultCodeCompleteOptions$FUNC_; }

    static final MethodHandle clang_defaultCodeCompleteOptions$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_defaultCodeCompleteOptions",
        "()I",
        clang_defaultCodeCompleteOptions$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_defaultCodeCompleteOptions$MH() { return clang_defaultCodeCompleteOptions$MH_; }

    static final FunctionDescriptor clang_codeCompleteAt$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteAt$FUNC() { return clang_codeCompleteAt$FUNC_; }

    static final MethodHandle clang_codeCompleteAt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteAt",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        clang_codeCompleteAt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_codeCompleteAt$MH() { return clang_codeCompleteAt$MH_; }

    static final FunctionDescriptor clang_sortCodeCompletionResults$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_sortCodeCompletionResults$FUNC() { return clang_sortCodeCompletionResults$FUNC_; }

    static final MethodHandle clang_sortCodeCompletionResults$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_sortCodeCompletionResults",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        clang_sortCodeCompletionResults$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_sortCodeCompletionResults$MH() { return clang_sortCodeCompletionResults$MH_; }

    static final FunctionDescriptor clang_disposeCodeCompleteResults$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeCodeCompleteResults$FUNC() { return clang_disposeCodeCompleteResults$FUNC_; }

    static final MethodHandle clang_disposeCodeCompleteResults$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeCodeCompleteResults",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_disposeCodeCompleteResults$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_disposeCodeCompleteResults$MH() { return clang_disposeCodeCompleteResults$MH_; }

    static final FunctionDescriptor clang_codeCompleteGetNumDiagnostics$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetNumDiagnostics$FUNC() { return clang_codeCompleteGetNumDiagnostics$FUNC_; }

    static final MethodHandle clang_codeCompleteGetNumDiagnostics$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetNumDiagnostics",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_codeCompleteGetNumDiagnostics$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_codeCompleteGetNumDiagnostics$MH() { return clang_codeCompleteGetNumDiagnostics$MH_; }

    static final FunctionDescriptor clang_codeCompleteGetDiagnostic$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetDiagnostic$FUNC() { return clang_codeCompleteGetDiagnostic$FUNC_; }

    static final MethodHandle clang_codeCompleteGetDiagnostic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetDiagnostic",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        clang_codeCompleteGetDiagnostic$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_codeCompleteGetDiagnostic$MH() { return clang_codeCompleteGetDiagnostic$MH_; }

    static final FunctionDescriptor clang_codeCompleteGetContexts$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetContexts$FUNC() { return clang_codeCompleteGetContexts$FUNC_; }

    static final MethodHandle clang_codeCompleteGetContexts$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetContexts",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        clang_codeCompleteGetContexts$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_codeCompleteGetContexts$MH() { return clang_codeCompleteGetContexts$MH_; }

    static final FunctionDescriptor clang_codeCompleteGetContainerKind$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetContainerKind$FUNC() { return clang_codeCompleteGetContainerKind$FUNC_; }

    static final MethodHandle clang_codeCompleteGetContainerKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetContainerKind",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_codeCompleteGetContainerKind$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_codeCompleteGetContainerKind$MH() { return clang_codeCompleteGetContainerKind$MH_; }

    static final FunctionDescriptor clang_codeCompleteGetContainerUSR$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetContainerUSR$FUNC() { return clang_codeCompleteGetContainerUSR$FUNC_; }

    static final MethodHandle clang_codeCompleteGetContainerUSR$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetContainerUSR",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_codeCompleteGetContainerUSR$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_codeCompleteGetContainerUSR$MH() { return clang_codeCompleteGetContainerUSR$MH_; }

    static final FunctionDescriptor clang_codeCompleteGetObjCSelector$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetObjCSelector$FUNC() { return clang_codeCompleteGetObjCSelector$FUNC_; }

    static final MethodHandle clang_codeCompleteGetObjCSelector$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetObjCSelector",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        clang_codeCompleteGetObjCSelector$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_codeCompleteGetObjCSelector$MH() { return clang_codeCompleteGetObjCSelector$MH_; }

    static final FunctionDescriptor clang_getClangVersion$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    ));
    static final jdk.incubator.foreign.FunctionDescriptor clang_getClangVersion$FUNC() { return clang_getClangVersion$FUNC_; }

    static final MethodHandle clang_getClangVersion$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getClangVersion",
        "()Ljdk/incubator/foreign/MemorySegment;",
        clang_getClangVersion$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getClangVersion$MH() { return clang_getClangVersion$MH_; }

    static final FunctionDescriptor clang_toggleCrashRecovery$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_toggleCrashRecovery$FUNC() { return clang_toggleCrashRecovery$FUNC_; }

    static final MethodHandle clang_toggleCrashRecovery$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_toggleCrashRecovery",
        "(I)V",
        clang_toggleCrashRecovery$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_toggleCrashRecovery$MH() { return clang_toggleCrashRecovery$MH_; }

    static final FunctionDescriptor clang_getInclusions$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getInclusions$FUNC() { return clang_getInclusions$FUNC_; }

    static final MethodHandle clang_getInclusions$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getInclusions",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_getInclusions$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getInclusions$MH() { return clang_getInclusions$MH_; }

    static final FunctionDescriptor clang_getInclusions$visitor$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getInclusions$visitor$FUNC() { return clang_getInclusions$visitor$FUNC_; }

    static final int CXEval_Int() { return (int)1L; }

    static final int CXEval_Float() { return (int)2L; }

    static final int CXEval_ObjCStrLiteral() { return (int)3L; }

    static final int CXEval_StrLiteral() { return (int)4L; }

    static final int CXEval_CFStr() { return (int)5L; }

    static final int CXEval_Other() { return (int)6L; }

    static final int CXEval_UnExposed() { return (int)0L; }

    static final FunctionDescriptor clang_Cursor_Evaluate$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_Evaluate$FUNC() { return clang_Cursor_Evaluate$FUNC_; }

    static final MethodHandle clang_Cursor_Evaluate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_Evaluate",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_Cursor_Evaluate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Cursor_Evaluate$MH() { return clang_Cursor_Evaluate$MH_; }

    static final FunctionDescriptor clang_EvalResult_getKind$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getKind$FUNC() { return clang_EvalResult_getKind$FUNC_; }

    static final MethodHandle clang_EvalResult_getKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getKind",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_EvalResult_getKind$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_EvalResult_getKind$MH() { return clang_EvalResult_getKind$MH_; }

    static final FunctionDescriptor clang_EvalResult_getAsInt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getAsInt$FUNC() { return clang_EvalResult_getAsInt$FUNC_; }

    static final MethodHandle clang_EvalResult_getAsInt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getAsInt",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_EvalResult_getAsInt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_EvalResult_getAsInt$MH() { return clang_EvalResult_getAsInt$MH_; }

    static final FunctionDescriptor clang_EvalResult_getAsLongLong$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getAsLongLong$FUNC() { return clang_EvalResult_getAsLongLong$FUNC_; }

    static final MethodHandle clang_EvalResult_getAsLongLong$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getAsLongLong",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        clang_EvalResult_getAsLongLong$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_EvalResult_getAsLongLong$MH() { return clang_EvalResult_getAsLongLong$MH_; }

    static final FunctionDescriptor clang_EvalResult_isUnsignedInt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_isUnsignedInt$FUNC() { return clang_EvalResult_isUnsignedInt$FUNC_; }

    static final MethodHandle clang_EvalResult_isUnsignedInt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_isUnsignedInt",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_EvalResult_isUnsignedInt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_EvalResult_isUnsignedInt$MH() { return clang_EvalResult_isUnsignedInt$MH_; }

    static final FunctionDescriptor clang_EvalResult_getAsUnsigned$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getAsUnsigned$FUNC() { return clang_EvalResult_getAsUnsigned$FUNC_; }

    static final MethodHandle clang_EvalResult_getAsUnsigned$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getAsUnsigned",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        clang_EvalResult_getAsUnsigned$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_EvalResult_getAsUnsigned$MH() { return clang_EvalResult_getAsUnsigned$MH_; }

    static final FunctionDescriptor clang_EvalResult_getAsDouble$FUNC_ = FunctionDescriptor.of(C_DOUBLE,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getAsDouble$FUNC() { return clang_EvalResult_getAsDouble$FUNC_; }

    static final MethodHandle clang_EvalResult_getAsDouble$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getAsDouble",
        "(Ljdk/incubator/foreign/MemoryAddress;)D",
        clang_EvalResult_getAsDouble$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_EvalResult_getAsDouble$MH() { return clang_EvalResult_getAsDouble$MH_; }

    static final FunctionDescriptor clang_EvalResult_getAsStr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getAsStr$FUNC() { return clang_EvalResult_getAsStr$FUNC_; }

    static final MethodHandle clang_EvalResult_getAsStr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getAsStr",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_EvalResult_getAsStr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_EvalResult_getAsStr$MH() { return clang_EvalResult_getAsStr$MH_; }

    static final FunctionDescriptor clang_EvalResult_dispose$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_dispose$FUNC() { return clang_EvalResult_dispose$FUNC_; }

    static final MethodHandle clang_EvalResult_dispose$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_EvalResult_dispose$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_EvalResult_dispose$MH() { return clang_EvalResult_dispose$MH_; }

    static final FunctionDescriptor clang_getRemappings$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getRemappings$FUNC() { return clang_getRemappings$FUNC_; }

    static final MethodHandle clang_getRemappings$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getRemappings",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getRemappings$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getRemappings$MH() { return clang_getRemappings$MH_; }

    static final FunctionDescriptor clang_getRemappingsFromFileList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_getRemappingsFromFileList$FUNC() { return clang_getRemappingsFromFileList$FUNC_; }

    static final MethodHandle clang_getRemappingsFromFileList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getRemappingsFromFileList",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        clang_getRemappingsFromFileList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_getRemappingsFromFileList$MH() { return clang_getRemappingsFromFileList$MH_; }

    static final FunctionDescriptor clang_remap_getNumFiles$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_remap_getNumFiles$FUNC() { return clang_remap_getNumFiles$FUNC_; }

    static final MethodHandle clang_remap_getNumFiles$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_remap_getNumFiles",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_remap_getNumFiles$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_remap_getNumFiles$MH() { return clang_remap_getNumFiles$MH_; }

    static final FunctionDescriptor clang_remap_getFilenames$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_remap_getFilenames$FUNC() { return clang_remap_getFilenames$FUNC_; }

    static final MethodHandle clang_remap_getFilenames$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_remap_getFilenames",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_remap_getFilenames$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_remap_getFilenames$MH() { return clang_remap_getFilenames$MH_; }

    static final FunctionDescriptor clang_remap_dispose$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_remap_dispose$FUNC() { return clang_remap_dispose$FUNC_; }

    static final MethodHandle clang_remap_dispose$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_remap_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_remap_dispose$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_remap_dispose$MH() { return clang_remap_dispose$MH_; }

    static final int CXVisit_Break() { return (int)0L; }

    static final int CXVisit_Continue() { return (int)1L; }

    static final MemoryLayout CXCursorAndRangeVisitor$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("context"),
        C_POINTER.withName("visit")
    ).withName("CXCursorAndRangeVisitor");
    static final jdk.incubator.foreign.MemoryLayout CXCursorAndRangeVisitor$struct$LAYOUT() { return CXCursorAndRangeVisitor$struct$LAYOUT_; }

    static final MemoryLayout CXCursorAndRangeVisitor$context$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXCursorAndRangeVisitor$context$LAYOUT() { return CXCursorAndRangeVisitor$context$LAYOUT_; }

    static final VarHandle CXCursorAndRangeVisitor$context$VH_ = MemoryHandles.asAddressVarHandle(CXCursorAndRangeVisitor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("context")));
    static final java.lang.invoke.VarHandle CXCursorAndRangeVisitor$context$VH() { return CXCursorAndRangeVisitor$context$VH_; }

    static final MemoryLayout CXCursorAndRangeVisitor$visit$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXCursorAndRangeVisitor$visit$LAYOUT() { return CXCursorAndRangeVisitor$visit$LAYOUT_; }

    static final VarHandle CXCursorAndRangeVisitor$visit$VH_ = MemoryHandles.asAddressVarHandle(CXCursorAndRangeVisitor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("visit")));
    static final java.lang.invoke.VarHandle CXCursorAndRangeVisitor$visit$VH() { return CXCursorAndRangeVisitor$visit$VH_; }

    static final int CXResult_Success() { return (int)0L; }

    static final int CXResult_Invalid() { return (int)1L; }

    static final int CXResult_VisitBreak() { return (int)2L; }

    static final FunctionDescriptor clang_findReferencesInFile$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        MemoryLayout.ofStruct(
            C_POINTER.withName("context"),
            C_POINTER.withName("visit")
        ).withName("CXCursorAndRangeVisitor")
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_findReferencesInFile$FUNC() { return clang_findReferencesInFile$FUNC_; }

    static final MethodHandle clang_findReferencesInFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_findReferencesInFile",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        clang_findReferencesInFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_findReferencesInFile$MH() { return clang_findReferencesInFile$MH_; }

    static final FunctionDescriptor clang_findIncludesInFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_POINTER.withName("context"),
            C_POINTER.withName("visit")
        ).withName("CXCursorAndRangeVisitor")
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_findIncludesInFile$FUNC() { return clang_findIncludesInFile$FUNC_; }

    static final MethodHandle clang_findIncludesInFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_findIncludesInFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        clang_findIncludesInFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_findIncludesInFile$MH() { return clang_findIncludesInFile$MH_; }

    static final FunctionDescriptor clang_findReferencesInFileWithBlock$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_findReferencesInFileWithBlock$FUNC() { return clang_findReferencesInFileWithBlock$FUNC_; }

    static final MethodHandle clang_findReferencesInFileWithBlock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_findReferencesInFileWithBlock",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_findReferencesInFileWithBlock$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_findReferencesInFileWithBlock$MH() { return clang_findReferencesInFileWithBlock$MH_; }

    static final FunctionDescriptor clang_findReferencesInFileWithBlock$x0$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_findReferencesInFileWithBlock$x0$FUNC() { return clang_findReferencesInFileWithBlock$x0$FUNC_; }

    static final FunctionDescriptor clang_findIncludesInFileWithBlock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_findIncludesInFileWithBlock$FUNC() { return clang_findIncludesInFileWithBlock$FUNC_; }

    static final MethodHandle clang_findIncludesInFileWithBlock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_findIncludesInFileWithBlock",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_findIncludesInFileWithBlock$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_findIncludesInFileWithBlock$MH() { return clang_findIncludesInFileWithBlock$MH_; }

    static final FunctionDescriptor clang_findIncludesInFileWithBlock$x0$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_findIncludesInFileWithBlock$x0$FUNC() { return clang_findIncludesInFileWithBlock$x0$FUNC_; }

    static final MemoryLayout CXIdxLoc$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxLoc$struct$LAYOUT() { return CXIdxLoc$struct$LAYOUT_; }

    static final MemoryLayout CXIdxLoc$int_data$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxLoc$int_data$LAYOUT() { return CXIdxLoc$int_data$LAYOUT_; }

    static final VarHandle CXIdxLoc$int_data$VH_ = CXIdxLoc$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("int_data"));
    static final java.lang.invoke.VarHandle CXIdxLoc$int_data$VH() { return CXIdxLoc$int_data$VH_; }

    static final MemoryLayout CXIdxIncludedFileInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("hashLoc"),
        C_POINTER.withName("filename"),
        C_POINTER.withName("file"),
        C_INT.withName("isImport"),
        C_INT.withName("isAngled"),
        C_INT.withName("isModuleImport"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxIncludedFileInfo$struct$LAYOUT() { return CXIdxIncludedFileInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxIncludedFileInfo$filename$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxIncludedFileInfo$filename$LAYOUT() { return CXIdxIncludedFileInfo$filename$LAYOUT_; }

    static final VarHandle CXIdxIncludedFileInfo$filename$VH_ = MemoryHandles.asAddressVarHandle(CXIdxIncludedFileInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("filename")));
    static final java.lang.invoke.VarHandle CXIdxIncludedFileInfo$filename$VH() { return CXIdxIncludedFileInfo$filename$VH_; }

    static final MemoryLayout CXIdxIncludedFileInfo$file$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxIncludedFileInfo$file$LAYOUT() { return CXIdxIncludedFileInfo$file$LAYOUT_; }

    static final VarHandle CXIdxIncludedFileInfo$file$VH_ = MemoryHandles.asAddressVarHandle(CXIdxIncludedFileInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("file")));
    static final java.lang.invoke.VarHandle CXIdxIncludedFileInfo$file$VH() { return CXIdxIncludedFileInfo$file$VH_; }

    static final MemoryLayout CXIdxIncludedFileInfo$isImport$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxIncludedFileInfo$isImport$LAYOUT() { return CXIdxIncludedFileInfo$isImport$LAYOUT_; }

    static final VarHandle CXIdxIncludedFileInfo$isImport$VH_ = CXIdxIncludedFileInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("isImport"));
    static final java.lang.invoke.VarHandle CXIdxIncludedFileInfo$isImport$VH() { return CXIdxIncludedFileInfo$isImport$VH_; }

    static final MemoryLayout CXIdxIncludedFileInfo$isAngled$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxIncludedFileInfo$isAngled$LAYOUT() { return CXIdxIncludedFileInfo$isAngled$LAYOUT_; }

    static final VarHandle CXIdxIncludedFileInfo$isAngled$VH_ = CXIdxIncludedFileInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("isAngled"));
    static final java.lang.invoke.VarHandle CXIdxIncludedFileInfo$isAngled$VH() { return CXIdxIncludedFileInfo$isAngled$VH_; }

    static final MemoryLayout CXIdxIncludedFileInfo$isModuleImport$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxIncludedFileInfo$isModuleImport$LAYOUT() { return CXIdxIncludedFileInfo$isModuleImport$LAYOUT_; }

    static final VarHandle CXIdxIncludedFileInfo$isModuleImport$VH_ = CXIdxIncludedFileInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("isModuleImport"));
    static final java.lang.invoke.VarHandle CXIdxIncludedFileInfo$isModuleImport$VH() { return CXIdxIncludedFileInfo$isModuleImport$VH_; }

    static final MemoryLayout CXIdxImportedASTFileInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("file"),
        C_POINTER.withName("module"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc"),
        C_INT.withName("isImplicit"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxImportedASTFileInfo$struct$LAYOUT() { return CXIdxImportedASTFileInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxImportedASTFileInfo$file$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxImportedASTFileInfo$file$LAYOUT() { return CXIdxImportedASTFileInfo$file$LAYOUT_; }

    static final VarHandle CXIdxImportedASTFileInfo$file$VH_ = MemoryHandles.asAddressVarHandle(CXIdxImportedASTFileInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("file")));
    static final java.lang.invoke.VarHandle CXIdxImportedASTFileInfo$file$VH() { return CXIdxImportedASTFileInfo$file$VH_; }

    static final MemoryLayout CXIdxImportedASTFileInfo$module$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxImportedASTFileInfo$module$LAYOUT() { return CXIdxImportedASTFileInfo$module$LAYOUT_; }

    static final VarHandle CXIdxImportedASTFileInfo$module$VH_ = MemoryHandles.asAddressVarHandle(CXIdxImportedASTFileInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("module")));
    static final java.lang.invoke.VarHandle CXIdxImportedASTFileInfo$module$VH() { return CXIdxImportedASTFileInfo$module$VH_; }

    static final MemoryLayout CXIdxImportedASTFileInfo$isImplicit$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxImportedASTFileInfo$isImplicit$LAYOUT() { return CXIdxImportedASTFileInfo$isImplicit$LAYOUT_; }

    static final VarHandle CXIdxImportedASTFileInfo$isImplicit$VH_ = CXIdxImportedASTFileInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("isImplicit"));
    static final java.lang.invoke.VarHandle CXIdxImportedASTFileInfo$isImplicit$VH() { return CXIdxImportedASTFileInfo$isImplicit$VH_; }

    static final int CXIdxEntity_Unexposed() { return (int)0L; }

    static final int CXIdxEntity_Typedef() { return (int)1L; }

    static final int CXIdxEntity_Function() { return (int)2L; }

    static final int CXIdxEntity_Variable() { return (int)3L; }

    static final int CXIdxEntity_Field() { return (int)4L; }

    static final int CXIdxEntity_EnumConstant() { return (int)5L; }

    static final int CXIdxEntity_ObjCClass() { return (int)6L; }

    static final int CXIdxEntity_ObjCProtocol() { return (int)7L; }

    static final int CXIdxEntity_ObjCCategory() { return (int)8L; }

    static final int CXIdxEntity_ObjCInstanceMethod() { return (int)9L; }

    static final int CXIdxEntity_ObjCClassMethod() { return (int)10L; }

    static final int CXIdxEntity_ObjCProperty() { return (int)11L; }

    static final int CXIdxEntity_ObjCIvar() { return (int)12L; }

    static final int CXIdxEntity_Enum() { return (int)13L; }

    static final int CXIdxEntity_Struct() { return (int)14L; }

    static final int CXIdxEntity_Union() { return (int)15L; }

    static final int CXIdxEntity_CXXClass() { return (int)16L; }

    static final int CXIdxEntity_CXXNamespace() { return (int)17L; }

    static final int CXIdxEntity_CXXNamespaceAlias() { return (int)18L; }

    static final int CXIdxEntity_CXXStaticVariable() { return (int)19L; }

    static final int CXIdxEntity_CXXStaticMethod() { return (int)20L; }

    static final int CXIdxEntity_CXXInstanceMethod() { return (int)21L; }

    static final int CXIdxEntity_CXXConstructor() { return (int)22L; }

    static final int CXIdxEntity_CXXDestructor() { return (int)23L; }

    static final int CXIdxEntity_CXXConversionFunction() { return (int)24L; }

    static final int CXIdxEntity_CXXTypeAlias() { return (int)25L; }

    static final int CXIdxEntity_CXXInterface() { return (int)26L; }

    static final int CXIdxEntityLang_None() { return (int)0L; }

    static final int CXIdxEntityLang_C() { return (int)1L; }

    static final int CXIdxEntityLang_ObjC() { return (int)2L; }

    static final int CXIdxEntityLang_CXX() { return (int)3L; }

    static final int CXIdxEntityLang_Swift() { return (int)4L; }

    static final int CXIdxEntity_NonTemplate() { return (int)0L; }

    static final int CXIdxEntity_Template() { return (int)1L; }

    static final int CXIdxEntity_TemplatePartialSpecialization() { return (int)2L; }

    static final int CXIdxEntity_TemplateSpecialization() { return (int)3L; }

    static final int CXIdxAttr_Unexposed() { return (int)0L; }

    static final int CXIdxAttr_IBAction() { return (int)1L; }

    static final int CXIdxAttr_IBOutlet() { return (int)2L; }

    static final int CXIdxAttr_IBOutletCollection() { return (int)3L; }

    static final MemoryLayout CXIdxAttrInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc")
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxAttrInfo$struct$LAYOUT() { return CXIdxAttrInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxAttrInfo$kind$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxAttrInfo$kind$LAYOUT() { return CXIdxAttrInfo$kind$LAYOUT_; }

    static final VarHandle CXIdxAttrInfo$kind$VH_ = CXIdxAttrInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("kind"));
    static final java.lang.invoke.VarHandle CXIdxAttrInfo$kind$VH() { return CXIdxAttrInfo$kind$VH_; }

    static final MemoryLayout CXIdxEntityInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("templateKind"),
        C_INT.withName("lang"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("name"),
        C_POINTER.withName("USR"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        C_POINTER.withName("attributes"),
        C_INT.withName("numAttributes"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$struct$LAYOUT() { return CXIdxEntityInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxEntityInfo$kind$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$kind$LAYOUT() { return CXIdxEntityInfo$kind$LAYOUT_; }

    static final VarHandle CXIdxEntityInfo$kind$VH_ = CXIdxEntityInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("kind"));
    static final java.lang.invoke.VarHandle CXIdxEntityInfo$kind$VH() { return CXIdxEntityInfo$kind$VH_; }

    static final MemoryLayout CXIdxEntityInfo$templateKind$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$templateKind$LAYOUT() { return CXIdxEntityInfo$templateKind$LAYOUT_; }

    static final VarHandle CXIdxEntityInfo$templateKind$VH_ = CXIdxEntityInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("templateKind"));
    static final java.lang.invoke.VarHandle CXIdxEntityInfo$templateKind$VH() { return CXIdxEntityInfo$templateKind$VH_; }

    static final MemoryLayout CXIdxEntityInfo$lang$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$lang$LAYOUT() { return CXIdxEntityInfo$lang$LAYOUT_; }

    static final VarHandle CXIdxEntityInfo$lang$VH_ = CXIdxEntityInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lang"));
    static final java.lang.invoke.VarHandle CXIdxEntityInfo$lang$VH() { return CXIdxEntityInfo$lang$VH_; }

    static final MemoryLayout CXIdxEntityInfo$name$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$name$LAYOUT() { return CXIdxEntityInfo$name$LAYOUT_; }

    static final VarHandle CXIdxEntityInfo$name$VH_ = MemoryHandles.asAddressVarHandle(CXIdxEntityInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("name")));
    static final java.lang.invoke.VarHandle CXIdxEntityInfo$name$VH() { return CXIdxEntityInfo$name$VH_; }

    static final MemoryLayout CXIdxEntityInfo$USR$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$USR$LAYOUT() { return CXIdxEntityInfo$USR$LAYOUT_; }

    static final VarHandle CXIdxEntityInfo$USR$VH_ = MemoryHandles.asAddressVarHandle(CXIdxEntityInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("USR")));
    static final java.lang.invoke.VarHandle CXIdxEntityInfo$USR$VH() { return CXIdxEntityInfo$USR$VH_; }

    static final MemoryLayout CXIdxEntityInfo$attributes$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$attributes$LAYOUT() { return CXIdxEntityInfo$attributes$LAYOUT_; }

    static final VarHandle CXIdxEntityInfo$attributes$VH_ = MemoryHandles.asAddressVarHandle(CXIdxEntityInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("attributes")));
    static final java.lang.invoke.VarHandle CXIdxEntityInfo$attributes$VH() { return CXIdxEntityInfo$attributes$VH_; }

    static final MemoryLayout CXIdxEntityInfo$numAttributes$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$numAttributes$LAYOUT() { return CXIdxEntityInfo$numAttributes$LAYOUT_; }

    static final VarHandle CXIdxEntityInfo$numAttributes$VH_ = CXIdxEntityInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("numAttributes"));
    static final java.lang.invoke.VarHandle CXIdxEntityInfo$numAttributes$VH() { return CXIdxEntityInfo$numAttributes$VH_; }

    static final MemoryLayout CXIdxContainerInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor")
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxContainerInfo$struct$LAYOUT() { return CXIdxContainerInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("attrInfo"),
        C_POINTER.withName("objcClass"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("classCursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("classLoc")
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT() { return CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxIBOutletCollectionAttrInfo$attrInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxIBOutletCollectionAttrInfo$attrInfo$LAYOUT() { return CXIdxIBOutletCollectionAttrInfo$attrInfo$LAYOUT_; }

    static final VarHandle CXIdxIBOutletCollectionAttrInfo$attrInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("attrInfo")));
    static final java.lang.invoke.VarHandle CXIdxIBOutletCollectionAttrInfo$attrInfo$VH() { return CXIdxIBOutletCollectionAttrInfo$attrInfo$VH_; }

    static final MemoryLayout CXIdxIBOutletCollectionAttrInfo$objcClass$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxIBOutletCollectionAttrInfo$objcClass$LAYOUT() { return CXIdxIBOutletCollectionAttrInfo$objcClass$LAYOUT_; }

    static final VarHandle CXIdxIBOutletCollectionAttrInfo$objcClass$VH_ = MemoryHandles.asAddressVarHandle(CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("objcClass")));
    static final java.lang.invoke.VarHandle CXIdxIBOutletCollectionAttrInfo$objcClass$VH() { return CXIdxIBOutletCollectionAttrInfo$objcClass$VH_; }

    static final int CXIdxDeclFlag_Skipped() { return (int)1L; }

    static final MemoryLayout CXIdxDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("entityInfo"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc"),
        C_POINTER.withName("semanticContainer"),
        C_POINTER.withName("lexicalContainer"),
        C_INT.withName("isRedeclaration"),
        C_INT.withName("isDefinition"),
        C_INT.withName("isContainer"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("declAsContainer"),
        C_INT.withName("isImplicit"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("attributes"),
        C_INT.withName("numAttributes"),
        C_INT.withName("flags")
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$struct$LAYOUT() { return CXIdxDeclInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxDeclInfo$entityInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$entityInfo$LAYOUT() { return CXIdxDeclInfo$entityInfo$LAYOUT_; }

    static final VarHandle CXIdxDeclInfo$entityInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("entityInfo")));
    static final java.lang.invoke.VarHandle CXIdxDeclInfo$entityInfo$VH() { return CXIdxDeclInfo$entityInfo$VH_; }

    static final MemoryLayout CXIdxDeclInfo$semanticContainer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$semanticContainer$LAYOUT() { return CXIdxDeclInfo$semanticContainer$LAYOUT_; }

    static final VarHandle CXIdxDeclInfo$semanticContainer$VH_ = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("semanticContainer")));
    static final java.lang.invoke.VarHandle CXIdxDeclInfo$semanticContainer$VH() { return CXIdxDeclInfo$semanticContainer$VH_; }

    static final MemoryLayout CXIdxDeclInfo$lexicalContainer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$lexicalContainer$LAYOUT() { return CXIdxDeclInfo$lexicalContainer$LAYOUT_; }

    static final VarHandle CXIdxDeclInfo$lexicalContainer$VH_ = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lexicalContainer")));
    static final java.lang.invoke.VarHandle CXIdxDeclInfo$lexicalContainer$VH() { return CXIdxDeclInfo$lexicalContainer$VH_; }

    static final MemoryLayout CXIdxDeclInfo$isRedeclaration$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$isRedeclaration$LAYOUT() { return CXIdxDeclInfo$isRedeclaration$LAYOUT_; }

    static final VarHandle CXIdxDeclInfo$isRedeclaration$VH_ = CXIdxDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("isRedeclaration"));
    static final java.lang.invoke.VarHandle CXIdxDeclInfo$isRedeclaration$VH() { return CXIdxDeclInfo$isRedeclaration$VH_; }

    static final MemoryLayout CXIdxDeclInfo$isDefinition$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$isDefinition$LAYOUT() { return CXIdxDeclInfo$isDefinition$LAYOUT_; }

    static final VarHandle CXIdxDeclInfo$isDefinition$VH_ = CXIdxDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("isDefinition"));
    static final java.lang.invoke.VarHandle CXIdxDeclInfo$isDefinition$VH() { return CXIdxDeclInfo$isDefinition$VH_; }

    static final MemoryLayout CXIdxDeclInfo$isContainer$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$isContainer$LAYOUT() { return CXIdxDeclInfo$isContainer$LAYOUT_; }

    static final VarHandle CXIdxDeclInfo$isContainer$VH_ = CXIdxDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("isContainer"));
    static final java.lang.invoke.VarHandle CXIdxDeclInfo$isContainer$VH() { return CXIdxDeclInfo$isContainer$VH_; }

    static final MemoryLayout CXIdxDeclInfo$declAsContainer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$declAsContainer$LAYOUT() { return CXIdxDeclInfo$declAsContainer$LAYOUT_; }

    static final VarHandle CXIdxDeclInfo$declAsContainer$VH_ = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("declAsContainer")));
    static final java.lang.invoke.VarHandle CXIdxDeclInfo$declAsContainer$VH() { return CXIdxDeclInfo$declAsContainer$VH_; }

    static final MemoryLayout CXIdxDeclInfo$isImplicit$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$isImplicit$LAYOUT() { return CXIdxDeclInfo$isImplicit$LAYOUT_; }

    static final VarHandle CXIdxDeclInfo$isImplicit$VH_ = CXIdxDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("isImplicit"));
    static final java.lang.invoke.VarHandle CXIdxDeclInfo$isImplicit$VH() { return CXIdxDeclInfo$isImplicit$VH_; }

    static final MemoryLayout CXIdxDeclInfo$attributes$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$attributes$LAYOUT() { return CXIdxDeclInfo$attributes$LAYOUT_; }

    static final VarHandle CXIdxDeclInfo$attributes$VH_ = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("attributes")));
    static final java.lang.invoke.VarHandle CXIdxDeclInfo$attributes$VH() { return CXIdxDeclInfo$attributes$VH_; }

    static final MemoryLayout CXIdxDeclInfo$numAttributes$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$numAttributes$LAYOUT() { return CXIdxDeclInfo$numAttributes$LAYOUT_; }

    static final VarHandle CXIdxDeclInfo$numAttributes$VH_ = CXIdxDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("numAttributes"));
    static final java.lang.invoke.VarHandle CXIdxDeclInfo$numAttributes$VH() { return CXIdxDeclInfo$numAttributes$VH_; }

    static final MemoryLayout CXIdxDeclInfo$flags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$flags$LAYOUT() { return CXIdxDeclInfo$flags$LAYOUT_; }

    static final VarHandle CXIdxDeclInfo$flags$VH_ = CXIdxDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("flags"));
    static final java.lang.invoke.VarHandle CXIdxDeclInfo$flags$VH() { return CXIdxDeclInfo$flags$VH_; }

    static final int CXIdxObjCContainer_ForwardRef() { return (int)0L; }

    static final int CXIdxObjCContainer_Interface() { return (int)1L; }

    static final int CXIdxObjCContainer_Implementation() { return (int)2L; }

    static final MemoryLayout CXIdxObjCContainerDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("declInfo"),
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCContainerDeclInfo$struct$LAYOUT() { return CXIdxObjCContainerDeclInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxObjCContainerDeclInfo$declInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCContainerDeclInfo$declInfo$LAYOUT() { return CXIdxObjCContainerDeclInfo$declInfo$LAYOUT_; }

    static final VarHandle CXIdxObjCContainerDeclInfo$declInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCContainerDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("declInfo")));
    static final java.lang.invoke.VarHandle CXIdxObjCContainerDeclInfo$declInfo$VH() { return CXIdxObjCContainerDeclInfo$declInfo$VH_; }

    static final MemoryLayout CXIdxObjCContainerDeclInfo$kind$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCContainerDeclInfo$kind$LAYOUT() { return CXIdxObjCContainerDeclInfo$kind$LAYOUT_; }

    static final VarHandle CXIdxObjCContainerDeclInfo$kind$VH_ = CXIdxObjCContainerDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("kind"));
    static final java.lang.invoke.VarHandle CXIdxObjCContainerDeclInfo$kind$VH() { return CXIdxObjCContainerDeclInfo$kind$VH_; }

    static final MemoryLayout CXIdxBaseClassInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("base"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc")
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxBaseClassInfo$struct$LAYOUT() { return CXIdxBaseClassInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxBaseClassInfo$base$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxBaseClassInfo$base$LAYOUT() { return CXIdxBaseClassInfo$base$LAYOUT_; }

    static final VarHandle CXIdxBaseClassInfo$base$VH_ = MemoryHandles.asAddressVarHandle(CXIdxBaseClassInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("base")));
    static final java.lang.invoke.VarHandle CXIdxBaseClassInfo$base$VH() { return CXIdxBaseClassInfo$base$VH_; }

    static final MemoryLayout CXIdxObjCProtocolRefInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("protocol"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc")
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCProtocolRefInfo$struct$LAYOUT() { return CXIdxObjCProtocolRefInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxObjCProtocolRefInfo$protocol$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCProtocolRefInfo$protocol$LAYOUT() { return CXIdxObjCProtocolRefInfo$protocol$LAYOUT_; }

    static final VarHandle CXIdxObjCProtocolRefInfo$protocol$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCProtocolRefInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("protocol")));
    static final java.lang.invoke.VarHandle CXIdxObjCProtocolRefInfo$protocol$VH() { return CXIdxObjCProtocolRefInfo$protocol$VH_; }

    static final MemoryLayout CXIdxObjCProtocolRefListInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("protocols"),
        C_INT.withName("numProtocols"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCProtocolRefListInfo$struct$LAYOUT() { return CXIdxObjCProtocolRefListInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxObjCProtocolRefListInfo$protocols$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCProtocolRefListInfo$protocols$LAYOUT() { return CXIdxObjCProtocolRefListInfo$protocols$LAYOUT_; }

    static final VarHandle CXIdxObjCProtocolRefListInfo$protocols$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCProtocolRefListInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("protocols")));
    static final java.lang.invoke.VarHandle CXIdxObjCProtocolRefListInfo$protocols$VH() { return CXIdxObjCProtocolRefListInfo$protocols$VH_; }

    static final MemoryLayout CXIdxObjCProtocolRefListInfo$numProtocols$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCProtocolRefListInfo$numProtocols$LAYOUT() { return CXIdxObjCProtocolRefListInfo$numProtocols$LAYOUT_; }

    static final VarHandle CXIdxObjCProtocolRefListInfo$numProtocols$VH_ = CXIdxObjCProtocolRefListInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("numProtocols"));
    static final java.lang.invoke.VarHandle CXIdxObjCProtocolRefListInfo$numProtocols$VH() { return CXIdxObjCProtocolRefListInfo$numProtocols$VH_; }

    static final MemoryLayout CXIdxObjCInterfaceDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("containerInfo"),
        C_POINTER.withName("superInfo"),
        C_POINTER.withName("protocols")
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCInterfaceDeclInfo$struct$LAYOUT() { return CXIdxObjCInterfaceDeclInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxObjCInterfaceDeclInfo$containerInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCInterfaceDeclInfo$containerInfo$LAYOUT() { return CXIdxObjCInterfaceDeclInfo$containerInfo$LAYOUT_; }

    static final VarHandle CXIdxObjCInterfaceDeclInfo$containerInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCInterfaceDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("containerInfo")));
    static final java.lang.invoke.VarHandle CXIdxObjCInterfaceDeclInfo$containerInfo$VH() { return CXIdxObjCInterfaceDeclInfo$containerInfo$VH_; }

    static final MemoryLayout CXIdxObjCInterfaceDeclInfo$superInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCInterfaceDeclInfo$superInfo$LAYOUT() { return CXIdxObjCInterfaceDeclInfo$superInfo$LAYOUT_; }

    static final VarHandle CXIdxObjCInterfaceDeclInfo$superInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCInterfaceDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("superInfo")));
    static final java.lang.invoke.VarHandle CXIdxObjCInterfaceDeclInfo$superInfo$VH() { return CXIdxObjCInterfaceDeclInfo$superInfo$VH_; }

    static final MemoryLayout CXIdxObjCInterfaceDeclInfo$protocols$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCInterfaceDeclInfo$protocols$LAYOUT() { return CXIdxObjCInterfaceDeclInfo$protocols$LAYOUT_; }

    static final VarHandle CXIdxObjCInterfaceDeclInfo$protocols$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCInterfaceDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("protocols")));
    static final java.lang.invoke.VarHandle CXIdxObjCInterfaceDeclInfo$protocols$VH() { return CXIdxObjCInterfaceDeclInfo$protocols$VH_; }

    static final MemoryLayout CXIdxObjCCategoryDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("containerInfo"),
        C_POINTER.withName("objcClass"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("classCursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("classLoc"),
        C_POINTER.withName("protocols")
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCCategoryDeclInfo$struct$LAYOUT() { return CXIdxObjCCategoryDeclInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxObjCCategoryDeclInfo$containerInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCCategoryDeclInfo$containerInfo$LAYOUT() { return CXIdxObjCCategoryDeclInfo$containerInfo$LAYOUT_; }

    static final VarHandle CXIdxObjCCategoryDeclInfo$containerInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCCategoryDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("containerInfo")));
    static final java.lang.invoke.VarHandle CXIdxObjCCategoryDeclInfo$containerInfo$VH() { return CXIdxObjCCategoryDeclInfo$containerInfo$VH_; }

    static final MemoryLayout CXIdxObjCCategoryDeclInfo$objcClass$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCCategoryDeclInfo$objcClass$LAYOUT() { return CXIdxObjCCategoryDeclInfo$objcClass$LAYOUT_; }

    static final VarHandle CXIdxObjCCategoryDeclInfo$objcClass$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCCategoryDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("objcClass")));
    static final java.lang.invoke.VarHandle CXIdxObjCCategoryDeclInfo$objcClass$VH() { return CXIdxObjCCategoryDeclInfo$objcClass$VH_; }

    static final MemoryLayout CXIdxObjCCategoryDeclInfo$protocols$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCCategoryDeclInfo$protocols$LAYOUT() { return CXIdxObjCCategoryDeclInfo$protocols$LAYOUT_; }

    static final VarHandle CXIdxObjCCategoryDeclInfo$protocols$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCCategoryDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("protocols")));
    static final java.lang.invoke.VarHandle CXIdxObjCCategoryDeclInfo$protocols$VH() { return CXIdxObjCCategoryDeclInfo$protocols$VH_; }

    static final MemoryLayout CXIdxObjCPropertyDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("declInfo"),
        C_POINTER.withName("getter"),
        C_POINTER.withName("setter")
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCPropertyDeclInfo$struct$LAYOUT() { return CXIdxObjCPropertyDeclInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxObjCPropertyDeclInfo$declInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCPropertyDeclInfo$declInfo$LAYOUT() { return CXIdxObjCPropertyDeclInfo$declInfo$LAYOUT_; }

    static final VarHandle CXIdxObjCPropertyDeclInfo$declInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCPropertyDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("declInfo")));
    static final java.lang.invoke.VarHandle CXIdxObjCPropertyDeclInfo$declInfo$VH() { return CXIdxObjCPropertyDeclInfo$declInfo$VH_; }

    static final MemoryLayout CXIdxObjCPropertyDeclInfo$getter$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCPropertyDeclInfo$getter$LAYOUT() { return CXIdxObjCPropertyDeclInfo$getter$LAYOUT_; }

    static final VarHandle CXIdxObjCPropertyDeclInfo$getter$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCPropertyDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("getter")));
    static final java.lang.invoke.VarHandle CXIdxObjCPropertyDeclInfo$getter$VH() { return CXIdxObjCPropertyDeclInfo$getter$VH_; }

    static final MemoryLayout CXIdxObjCPropertyDeclInfo$setter$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCPropertyDeclInfo$setter$LAYOUT() { return CXIdxObjCPropertyDeclInfo$setter$LAYOUT_; }

    static final VarHandle CXIdxObjCPropertyDeclInfo$setter$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCPropertyDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("setter")));
    static final java.lang.invoke.VarHandle CXIdxObjCPropertyDeclInfo$setter$VH() { return CXIdxObjCPropertyDeclInfo$setter$VH_; }

    static final MemoryLayout CXIdxCXXClassDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("declInfo"),
        C_POINTER.withName("bases"),
        C_INT.withName("numBases"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxCXXClassDeclInfo$struct$LAYOUT() { return CXIdxCXXClassDeclInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxCXXClassDeclInfo$declInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxCXXClassDeclInfo$declInfo$LAYOUT() { return CXIdxCXXClassDeclInfo$declInfo$LAYOUT_; }

    static final VarHandle CXIdxCXXClassDeclInfo$declInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxCXXClassDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("declInfo")));
    static final java.lang.invoke.VarHandle CXIdxCXXClassDeclInfo$declInfo$VH() { return CXIdxCXXClassDeclInfo$declInfo$VH_; }

    static final MemoryLayout CXIdxCXXClassDeclInfo$bases$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxCXXClassDeclInfo$bases$LAYOUT() { return CXIdxCXXClassDeclInfo$bases$LAYOUT_; }

    static final VarHandle CXIdxCXXClassDeclInfo$bases$VH_ = MemoryHandles.asAddressVarHandle(CXIdxCXXClassDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("bases")));
    static final java.lang.invoke.VarHandle CXIdxCXXClassDeclInfo$bases$VH() { return CXIdxCXXClassDeclInfo$bases$VH_; }

    static final MemoryLayout CXIdxCXXClassDeclInfo$numBases$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxCXXClassDeclInfo$numBases$LAYOUT() { return CXIdxCXXClassDeclInfo$numBases$LAYOUT_; }

    static final VarHandle CXIdxCXXClassDeclInfo$numBases$VH_ = CXIdxCXXClassDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("numBases"));
    static final java.lang.invoke.VarHandle CXIdxCXXClassDeclInfo$numBases$VH() { return CXIdxCXXClassDeclInfo$numBases$VH_; }

    static final int CXIdxEntityRef_Direct() { return (int)1L; }

    static final int CXIdxEntityRef_Implicit() { return (int)2L; }

    static final int CXSymbolRole_None() { return (int)0L; }

    static final int CXSymbolRole_Declaration() { return (int)1L; }

    static final int CXSymbolRole_Definition() { return (int)2L; }

    static final int CXSymbolRole_Reference() { return (int)4L; }

    static final int CXSymbolRole_Read() { return (int)8L; }

    static final int CXSymbolRole_Write() { return (int)16L; }

    static final int CXSymbolRole_Call() { return (int)32L; }

    static final int CXSymbolRole_Dynamic() { return (int)64L; }

    static final int CXSymbolRole_AddressOf() { return (int)128L; }

    static final int CXSymbolRole_Implicit() { return (int)256L; }

    static final MemoryLayout CXIdxEntityRefInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc"),
        C_POINTER.withName("referencedEntity"),
        C_POINTER.withName("parentEntity"),
        C_POINTER.withName("container"),
        C_INT.withName("role"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityRefInfo$struct$LAYOUT() { return CXIdxEntityRefInfo$struct$LAYOUT_; }

    static final MemoryLayout CXIdxEntityRefInfo$kind$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityRefInfo$kind$LAYOUT() { return CXIdxEntityRefInfo$kind$LAYOUT_; }

    static final VarHandle CXIdxEntityRefInfo$kind$VH_ = CXIdxEntityRefInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("kind"));
    static final java.lang.invoke.VarHandle CXIdxEntityRefInfo$kind$VH() { return CXIdxEntityRefInfo$kind$VH_; }

    static final MemoryLayout CXIdxEntityRefInfo$referencedEntity$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityRefInfo$referencedEntity$LAYOUT() { return CXIdxEntityRefInfo$referencedEntity$LAYOUT_; }

    static final VarHandle CXIdxEntityRefInfo$referencedEntity$VH_ = MemoryHandles.asAddressVarHandle(CXIdxEntityRefInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("referencedEntity")));
    static final java.lang.invoke.VarHandle CXIdxEntityRefInfo$referencedEntity$VH() { return CXIdxEntityRefInfo$referencedEntity$VH_; }

    static final MemoryLayout CXIdxEntityRefInfo$parentEntity$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityRefInfo$parentEntity$LAYOUT() { return CXIdxEntityRefInfo$parentEntity$LAYOUT_; }

    static final VarHandle CXIdxEntityRefInfo$parentEntity$VH_ = MemoryHandles.asAddressVarHandle(CXIdxEntityRefInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("parentEntity")));
    static final java.lang.invoke.VarHandle CXIdxEntityRefInfo$parentEntity$VH() { return CXIdxEntityRefInfo$parentEntity$VH_; }

    static final MemoryLayout CXIdxEntityRefInfo$container$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityRefInfo$container$LAYOUT() { return CXIdxEntityRefInfo$container$LAYOUT_; }

    static final VarHandle CXIdxEntityRefInfo$container$VH_ = MemoryHandles.asAddressVarHandle(CXIdxEntityRefInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("container")));
    static final java.lang.invoke.VarHandle CXIdxEntityRefInfo$container$VH() { return CXIdxEntityRefInfo$container$VH_; }

    static final MemoryLayout CXIdxEntityRefInfo$role$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityRefInfo$role$LAYOUT() { return CXIdxEntityRefInfo$role$LAYOUT_; }

    static final VarHandle CXIdxEntityRefInfo$role$VH_ = CXIdxEntityRefInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("role"));
    static final java.lang.invoke.VarHandle CXIdxEntityRefInfo$role$VH() { return CXIdxEntityRefInfo$role$VH_; }

    static final MemoryLayout IndexerCallbacks$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("abortQuery"),
        C_POINTER.withName("diagnostic"),
        C_POINTER.withName("enteredMainFile"),
        C_POINTER.withName("ppIncludedFile"),
        C_POINTER.withName("importedASTFile"),
        C_POINTER.withName("startedTranslationUnit"),
        C_POINTER.withName("indexDeclaration"),
        C_POINTER.withName("indexEntityReference")
    );
    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$struct$LAYOUT() { return IndexerCallbacks$struct$LAYOUT_; }

    static final MemoryLayout IndexerCallbacks$abortQuery$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$abortQuery$LAYOUT() { return IndexerCallbacks$abortQuery$LAYOUT_; }

    static final VarHandle IndexerCallbacks$abortQuery$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("abortQuery")));
    static final java.lang.invoke.VarHandle IndexerCallbacks$abortQuery$VH() { return IndexerCallbacks$abortQuery$VH_; }

    static final MemoryLayout IndexerCallbacks$diagnostic$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$diagnostic$LAYOUT() { return IndexerCallbacks$diagnostic$LAYOUT_; }

    static final VarHandle IndexerCallbacks$diagnostic$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("diagnostic")));
    static final java.lang.invoke.VarHandle IndexerCallbacks$diagnostic$VH() { return IndexerCallbacks$diagnostic$VH_; }

    static final MemoryLayout IndexerCallbacks$enteredMainFile$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$enteredMainFile$LAYOUT() { return IndexerCallbacks$enteredMainFile$LAYOUT_; }

    static final VarHandle IndexerCallbacks$enteredMainFile$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("enteredMainFile")));
    static final java.lang.invoke.VarHandle IndexerCallbacks$enteredMainFile$VH() { return IndexerCallbacks$enteredMainFile$VH_; }

    static final MemoryLayout IndexerCallbacks$ppIncludedFile$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$ppIncludedFile$LAYOUT() { return IndexerCallbacks$ppIncludedFile$LAYOUT_; }

    static final VarHandle IndexerCallbacks$ppIncludedFile$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ppIncludedFile")));
    static final java.lang.invoke.VarHandle IndexerCallbacks$ppIncludedFile$VH() { return IndexerCallbacks$ppIncludedFile$VH_; }

    static final MemoryLayout IndexerCallbacks$importedASTFile$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$importedASTFile$LAYOUT() { return IndexerCallbacks$importedASTFile$LAYOUT_; }

    static final VarHandle IndexerCallbacks$importedASTFile$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("importedASTFile")));
    static final java.lang.invoke.VarHandle IndexerCallbacks$importedASTFile$VH() { return IndexerCallbacks$importedASTFile$VH_; }

    static final MemoryLayout IndexerCallbacks$startedTranslationUnit$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$startedTranslationUnit$LAYOUT() { return IndexerCallbacks$startedTranslationUnit$LAYOUT_; }

    static final VarHandle IndexerCallbacks$startedTranslationUnit$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("startedTranslationUnit")));
    static final java.lang.invoke.VarHandle IndexerCallbacks$startedTranslationUnit$VH() { return IndexerCallbacks$startedTranslationUnit$VH_; }

    static final MemoryLayout IndexerCallbacks$indexDeclaration$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$indexDeclaration$LAYOUT() { return IndexerCallbacks$indexDeclaration$LAYOUT_; }

    static final VarHandle IndexerCallbacks$indexDeclaration$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("indexDeclaration")));
    static final java.lang.invoke.VarHandle IndexerCallbacks$indexDeclaration$VH() { return IndexerCallbacks$indexDeclaration$VH_; }

    static final MemoryLayout IndexerCallbacks$indexEntityReference$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$indexEntityReference$LAYOUT() { return IndexerCallbacks$indexEntityReference$LAYOUT_; }

    static final VarHandle IndexerCallbacks$indexEntityReference$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("indexEntityReference")));
    static final java.lang.invoke.VarHandle IndexerCallbacks$indexEntityReference$VH() { return IndexerCallbacks$indexEntityReference$VH_; }

    static final FunctionDescriptor clang_index_isEntityObjCContainerKind$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_index_isEntityObjCContainerKind$FUNC() { return clang_index_isEntityObjCContainerKind$FUNC_; }

    static final MethodHandle clang_index_isEntityObjCContainerKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_isEntityObjCContainerKind",
        "(I)I",
        clang_index_isEntityObjCContainerKind$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_index_isEntityObjCContainerKind$MH() { return clang_index_isEntityObjCContainerKind$MH_; }

    static final FunctionDescriptor clang_index_getObjCContainerDeclInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getObjCContainerDeclInfo$FUNC() { return clang_index_getObjCContainerDeclInfo$FUNC_; }

    static final MethodHandle clang_index_getObjCContainerDeclInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getObjCContainerDeclInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getObjCContainerDeclInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_index_getObjCContainerDeclInfo$MH() { return clang_index_getObjCContainerDeclInfo$MH_; }

    static final FunctionDescriptor clang_index_getObjCInterfaceDeclInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getObjCInterfaceDeclInfo$FUNC() { return clang_index_getObjCInterfaceDeclInfo$FUNC_; }

    static final MethodHandle clang_index_getObjCInterfaceDeclInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getObjCInterfaceDeclInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getObjCInterfaceDeclInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_index_getObjCInterfaceDeclInfo$MH() { return clang_index_getObjCInterfaceDeclInfo$MH_; }

    static final FunctionDescriptor clang_index_getObjCCategoryDeclInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getObjCCategoryDeclInfo$FUNC() { return clang_index_getObjCCategoryDeclInfo$FUNC_; }

    static final MethodHandle clang_index_getObjCCategoryDeclInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getObjCCategoryDeclInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getObjCCategoryDeclInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_index_getObjCCategoryDeclInfo$MH() { return clang_index_getObjCCategoryDeclInfo$MH_; }

    static final FunctionDescriptor clang_index_getObjCProtocolRefListInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getObjCProtocolRefListInfo$FUNC() { return clang_index_getObjCProtocolRefListInfo$FUNC_; }

    static final MethodHandle clang_index_getObjCProtocolRefListInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getObjCProtocolRefListInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getObjCProtocolRefListInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_index_getObjCProtocolRefListInfo$MH() { return clang_index_getObjCProtocolRefListInfo$MH_; }

    static final FunctionDescriptor clang_index_getObjCPropertyDeclInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getObjCPropertyDeclInfo$FUNC() { return clang_index_getObjCPropertyDeclInfo$FUNC_; }

    static final MethodHandle clang_index_getObjCPropertyDeclInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getObjCPropertyDeclInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getObjCPropertyDeclInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_index_getObjCPropertyDeclInfo$MH() { return clang_index_getObjCPropertyDeclInfo$MH_; }

    static final FunctionDescriptor clang_index_getIBOutletCollectionAttrInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getIBOutletCollectionAttrInfo$FUNC() { return clang_index_getIBOutletCollectionAttrInfo$FUNC_; }

    static final MethodHandle clang_index_getIBOutletCollectionAttrInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getIBOutletCollectionAttrInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getIBOutletCollectionAttrInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_index_getIBOutletCollectionAttrInfo$MH() { return clang_index_getIBOutletCollectionAttrInfo$MH_; }

    static final FunctionDescriptor clang_index_getCXXClassDeclInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getCXXClassDeclInfo$FUNC() { return clang_index_getCXXClassDeclInfo$FUNC_; }

    static final MethodHandle clang_index_getCXXClassDeclInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getCXXClassDeclInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getCXXClassDeclInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_index_getCXXClassDeclInfo$MH() { return clang_index_getCXXClassDeclInfo$MH_; }

    static final FunctionDescriptor clang_index_getClientContainer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getClientContainer$FUNC() { return clang_index_getClientContainer$FUNC_; }

    static final MethodHandle clang_index_getClientContainer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getClientContainer",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getClientContainer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_index_getClientContainer$MH() { return clang_index_getClientContainer$MH_; }

    static final FunctionDescriptor clang_index_setClientContainer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_index_setClientContainer$FUNC() { return clang_index_setClientContainer$FUNC_; }

    static final MethodHandle clang_index_setClientContainer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_setClientContainer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_index_setClientContainer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_index_setClientContainer$MH() { return clang_index_setClientContainer$MH_; }

    static final FunctionDescriptor clang_index_getClientEntity$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getClientEntity$FUNC() { return clang_index_getClientEntity$FUNC_; }

    static final MethodHandle clang_index_getClientEntity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getClientEntity",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getClientEntity$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_index_getClientEntity$MH() { return clang_index_getClientEntity$MH_; }

    static final FunctionDescriptor clang_index_setClientEntity$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_index_setClientEntity$FUNC() { return clang_index_setClientEntity$FUNC_; }

    static final MethodHandle clang_index_setClientEntity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_setClientEntity",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_index_setClientEntity$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_index_setClientEntity$MH() { return clang_index_setClientEntity$MH_; }

    static final FunctionDescriptor clang_IndexAction_create$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_IndexAction_create$FUNC() { return clang_IndexAction_create$FUNC_; }

    static final MethodHandle clang_IndexAction_create$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_IndexAction_create",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_IndexAction_create$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_IndexAction_create$MH() { return clang_IndexAction_create$MH_; }

    static final FunctionDescriptor clang_IndexAction_dispose$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_IndexAction_dispose$FUNC() { return clang_IndexAction_dispose$FUNC_; }

    static final MethodHandle clang_IndexAction_dispose$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_IndexAction_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_IndexAction_dispose$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_IndexAction_dispose$MH() { return clang_IndexAction_dispose$MH_; }

    static final int CXIndexOpt_None() { return (int)0L; }

    static final int CXIndexOpt_SuppressRedundantRefs() { return (int)1L; }

    static final int CXIndexOpt_IndexFunctionLocalSymbols() { return (int)2L; }

    static final int CXIndexOpt_IndexImplicitTemplateInstantiations() { return (int)4L; }

    static final int CXIndexOpt_SuppressWarnings() { return (int)8L; }

    static final int CXIndexOpt_SkipParsedBodiesInSession() { return (int)16L; }

    static final FunctionDescriptor clang_indexSourceFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_indexSourceFile$FUNC() { return clang_indexSourceFile$FUNC_; }

    static final MethodHandle clang_indexSourceFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_indexSourceFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        clang_indexSourceFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_indexSourceFile$MH() { return clang_indexSourceFile$MH_; }

    static final FunctionDescriptor clang_indexSourceFileFullArgv$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_indexSourceFileFullArgv$FUNC() { return clang_indexSourceFileFullArgv$FUNC_; }

    static final MethodHandle clang_indexSourceFileFullArgv$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_indexSourceFileFullArgv",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        clang_indexSourceFileFullArgv$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_indexSourceFileFullArgv$MH() { return clang_indexSourceFileFullArgv$MH_; }

    static final FunctionDescriptor clang_indexTranslationUnit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_indexTranslationUnit$FUNC() { return clang_indexTranslationUnit$FUNC_; }

    static final MethodHandle clang_indexTranslationUnit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_indexTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        clang_indexTranslationUnit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_indexTranslationUnit$MH() { return clang_indexTranslationUnit$MH_; }

    static final FunctionDescriptor clang_indexLoc_getFileLocation$FUNC_ = FunctionDescriptor.ofVoid(
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_indexLoc_getFileLocation$FUNC() { return clang_indexLoc_getFileLocation$FUNC_; }

    static final MethodHandle clang_indexLoc_getFileLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_indexLoc_getFileLocation",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_indexLoc_getFileLocation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_indexLoc_getFileLocation$MH() { return clang_indexLoc_getFileLocation$MH_; }

    static final FunctionDescriptor clang_indexLoc_getCXSourceLocation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_indexLoc_getCXSourceLocation$FUNC() { return clang_indexLoc_getCXSourceLocation$FUNC_; }

    static final MethodHandle clang_indexLoc_getCXSourceLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_indexLoc_getCXSourceLocation",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_indexLoc_getCXSourceLocation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_indexLoc_getCXSourceLocation$MH() { return clang_indexLoc_getCXSourceLocation$MH_; }

    static final FunctionDescriptor clang_Type_visitFields$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_visitFields$FUNC() { return clang_Type_visitFields$FUNC_; }

    static final MethodHandle clang_Type_visitFields$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_visitFields",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_Type_visitFields$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle clang_Type_visitFields$MH() { return clang_Type_visitFields$MH_; }

    static final FunctionDescriptor clang_Type_visitFields$visitor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_visitFields$visitor$FUNC() { return clang_Type_visitFields$visitor$FUNC_; }

    static final int CINDEX_VERSION() { return (int)59L; }

    static final MemorySegment CINDEX_VERSION_STRING$SEGMENT_CONSTANT_ = CLinker.toCString("0.59");
    static final jdk.incubator.foreign.MemorySegment CINDEX_VERSION_STRING() { return CINDEX_VERSION_STRING$SEGMENT_CONSTANT_; }

}

