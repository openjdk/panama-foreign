/*
 *  Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 *  This code is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License version 2 only, as
 *  published by the Free Software Foundation.  Oracle designates this
 *  particular file as subject to the "Classpath" exception as provided
 *  by Oracle in the LICENSE file that accompanied this code.
 *
 *  This code is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 *  version 2 for more details (a copy is included in the LICENSE file that
 *  accompanied this code).
 *
 *  You should have received a copy of the GNU General Public License version
 *  2 along with this work; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 *  or visit www.oracle.com if you need additional information or have any
 *  questions.
 */

// Generated by jextract

package jdk.internal.clang.libclang;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
import static jdk.internal.clang.libclang.CLayouts.*;
class constants$4 {

    static final FunctionDescriptor clang_getDiagnosticLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.paddingLayout(32)
    ),
        C_POINTER
    );
    static final MethodHandle clang_getDiagnosticLocation$MH = RuntimeHelper.downcallHandle(
        Index_h.LIBRARIES, "clang_getDiagnosticLocation",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        constants$4.clang_getDiagnosticLocation$FUNC, false
    );
    static final FunctionDescriptor clang_getDiagnosticSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.paddingLayout(32)
    ),
        C_POINTER
    );
    static final MethodHandle clang_getDiagnosticSpelling$MH = RuntimeHelper.downcallHandle(
        Index_h.LIBRARIES, "clang_getDiagnosticSpelling",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        constants$4.clang_getDiagnosticSpelling$FUNC, false
    );
    static final FunctionDescriptor clang_parseTranslationUnit$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final MethodHandle clang_parseTranslationUnit$MH = RuntimeHelper.downcallHandle(
        Index_h.LIBRARIES, "clang_parseTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        constants$4.clang_parseTranslationUnit$FUNC, false
    );
    static final FunctionDescriptor clang_parseTranslationUnit2$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle clang_parseTranslationUnit2$MH = RuntimeHelper.downcallHandle(
        Index_h.LIBRARIES, "clang_parseTranslationUnit2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        constants$4.clang_parseTranslationUnit2$FUNC, false
    );
    static final FunctionDescriptor clang_saveTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle clang_saveTranslationUnit$MH = RuntimeHelper.downcallHandle(
        Index_h.LIBRARIES, "clang_saveTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$4.clang_saveTranslationUnit$FUNC, false
    );
    static final FunctionDescriptor clang_disposeTranslationUnit$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle clang_disposeTranslationUnit$MH = RuntimeHelper.downcallHandle(
        Index_h.LIBRARIES, "clang_disposeTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$4.clang_disposeTranslationUnit$FUNC, false
    );
}


