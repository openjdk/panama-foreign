/*
 *  Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 *  This code is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License version 2 only, as
 *  published by the Free Software Foundation.  Oracle designates this
 *  particular file as subject to the "Classpath" exception as provided
 *  by Oracle in the LICENSE file that accompanied this code.
 *
 *  This code is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 *  version 2 for more details (a copy is included in the LICENSE file that
 *  accompanied this code).
 *
 *  You should have received a copy of the GNU General Public License version
 *  2 along with this work; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 *  or visit www.oracle.com if you need additional information or have any
 *  questions.
 *
 */

// Generated by jextract

package jdk.internal.clang.libclang;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
 class Index_h_1 {

    public static int CXIdxEntity_TemplateSpecialization() {
        return (int)3L;
    }
    public static int CXIdxAttr_Unexposed() {
        return (int)0L;
    }
    public static int CXIdxAttr_IBAction() {
        return (int)1L;
    }
    public static int CXIdxAttr_IBOutlet() {
        return (int)2L;
    }
    public static int CXIdxAttr_IBOutletCollection() {
        return (int)3L;
    }
    public static int CXIdxDeclFlag_Skipped() {
        return (int)1L;
    }
    public static int CXIdxObjCContainer_ForwardRef() {
        return (int)0L;
    }
    public static int CXIdxObjCContainer_Interface() {
        return (int)1L;
    }
    public static int CXIdxObjCContainer_Implementation() {
        return (int)2L;
    }
    public static int CXIdxEntityRef_Direct() {
        return (int)1L;
    }
    public static int CXIdxEntityRef_Implicit() {
        return (int)2L;
    }
    public static int CXSymbolRole_None() {
        return (int)0L;
    }
    public static int CXSymbolRole_Declaration() {
        return (int)1L;
    }
    public static int CXSymbolRole_Definition() {
        return (int)2L;
    }
    public static int CXSymbolRole_Reference() {
        return (int)4L;
    }
    public static int CXSymbolRole_Read() {
        return (int)8L;
    }
    public static int CXSymbolRole_Write() {
        return (int)16L;
    }
    public static int CXSymbolRole_Call() {
        return (int)32L;
    }
    public static int CXSymbolRole_Dynamic() {
        return (int)64L;
    }
    public static int CXSymbolRole_AddressOf() {
        return (int)128L;
    }
    public static int CXSymbolRole_Implicit() {
        return (int)256L;
    }
    public static MethodHandle clang_index_isEntityObjCContainerKind$MH() {
        return RuntimeHelper.requireNonNull(constants$0.clang_index_isEntityObjCContainerKind$MH,"clang_index_isEntityObjCContainerKind");
    }
    public static int clang_index_isEntityObjCContainerKind ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_isEntityObjCContainerKind$MH, "clang_index_isEntityObjCContainerKind");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clang_index_getObjCContainerDeclInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCContainerDeclInfo$MH,"clang_index_getObjCContainerDeclInfo");
    }
    public static MemoryAddress clang_index_getObjCContainerDeclInfo ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCContainerDeclInfo$MH, "clang_index_getObjCContainerDeclInfo");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clang_index_getObjCInterfaceDeclInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCInterfaceDeclInfo$MH,"clang_index_getObjCInterfaceDeclInfo");
    }
    public static MemoryAddress clang_index_getObjCInterfaceDeclInfo ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCInterfaceDeclInfo$MH, "clang_index_getObjCInterfaceDeclInfo");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clang_index_getObjCCategoryDeclInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCCategoryDeclInfo$MH,"clang_index_getObjCCategoryDeclInfo");
    }
    public static MemoryAddress clang_index_getObjCCategoryDeclInfo ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCCategoryDeclInfo$MH, "clang_index_getObjCCategoryDeclInfo");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clang_index_getObjCProtocolRefListInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCProtocolRefListInfo$MH,"clang_index_getObjCProtocolRefListInfo");
    }
    public static MemoryAddress clang_index_getObjCProtocolRefListInfo ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCProtocolRefListInfo$MH, "clang_index_getObjCProtocolRefListInfo");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clang_index_getObjCPropertyDeclInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCPropertyDeclInfo$MH,"clang_index_getObjCPropertyDeclInfo");
    }
    public static MemoryAddress clang_index_getObjCPropertyDeclInfo ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCPropertyDeclInfo$MH, "clang_index_getObjCPropertyDeclInfo");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static class constants$0 {

        static final FunctionDescriptor clang_index_isEntityObjCContainerKind$FUNC = FunctionDescriptor.of(C_INT,
            C_INT
        );
        static final MethodHandle clang_index_isEntityObjCContainerKind$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_index_isEntityObjCContainerKind",
            "(I)I",
            constants$0.clang_index_isEntityObjCContainerKind$FUNC, false
        );
        static final FunctionDescriptor clang_index_getObjCContainerDeclInfo$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER
        );
        static final MethodHandle clang_index_getObjCContainerDeclInfo$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_index_getObjCContainerDeclInfo",
            "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
            constants$0.clang_index_getObjCContainerDeclInfo$FUNC, false
        );
        static final FunctionDescriptor clang_index_getObjCInterfaceDeclInfo$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER
        );
        static final MethodHandle clang_index_getObjCInterfaceDeclInfo$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_index_getObjCInterfaceDeclInfo",
            "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
            constants$0.clang_index_getObjCInterfaceDeclInfo$FUNC, false
        );
        static final FunctionDescriptor clang_index_getObjCCategoryDeclInfo$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER
        );
        static final MethodHandle clang_index_getObjCCategoryDeclInfo$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_index_getObjCCategoryDeclInfo",
            "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
            constants$0.clang_index_getObjCCategoryDeclInfo$FUNC, false
        );
        static final FunctionDescriptor clang_index_getObjCProtocolRefListInfo$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER
        );
        static final MethodHandle clang_index_getObjCProtocolRefListInfo$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_index_getObjCProtocolRefListInfo",
            "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
            constants$0.clang_index_getObjCProtocolRefListInfo$FUNC, false
        );
        static final FunctionDescriptor clang_index_getObjCPropertyDeclInfo$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER
        );
        static final MethodHandle clang_index_getObjCPropertyDeclInfo$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_index_getObjCPropertyDeclInfo",
            "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
            constants$0.clang_index_getObjCPropertyDeclInfo$FUNC, false
        );
    }

    public static MethodHandle clang_index_getIBOutletCollectionAttrInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1.clang_index_getIBOutletCollectionAttrInfo$MH,"clang_index_getIBOutletCollectionAttrInfo");
    }
    public static MemoryAddress clang_index_getIBOutletCollectionAttrInfo ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_getIBOutletCollectionAttrInfo$MH, "clang_index_getIBOutletCollectionAttrInfo");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clang_index_getCXXClassDeclInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1.clang_index_getCXXClassDeclInfo$MH,"clang_index_getCXXClassDeclInfo");
    }
    public static MemoryAddress clang_index_getCXXClassDeclInfo ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_getCXXClassDeclInfo$MH, "clang_index_getCXXClassDeclInfo");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clang_index_getClientContainer$MH() {
        return RuntimeHelper.requireNonNull(constants$1.clang_index_getClientContainer$MH,"clang_index_getClientContainer");
    }
    public static MemoryAddress clang_index_getClientContainer ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_getClientContainer$MH, "clang_index_getClientContainer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clang_index_setClientContainer$MH() {
        return RuntimeHelper.requireNonNull(constants$1.clang_index_setClientContainer$MH,"clang_index_setClientContainer");
    }
    public static void clang_index_setClientContainer ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_setClientContainer$MH, "clang_index_setClientContainer");
        try {
            mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clang_index_getClientEntity$MH() {
        return RuntimeHelper.requireNonNull(constants$1.clang_index_getClientEntity$MH,"clang_index_getClientEntity");
    }
    public static MemoryAddress clang_index_getClientEntity ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_getClientEntity$MH, "clang_index_getClientEntity");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clang_index_setClientEntity$MH() {
        return RuntimeHelper.requireNonNull(constants$1.clang_index_setClientEntity$MH,"clang_index_setClientEntity");
    }
    public static void clang_index_setClientEntity ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_setClientEntity$MH, "clang_index_setClientEntity");
        try {
            mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static class constants$1 {

        static final FunctionDescriptor clang_index_getIBOutletCollectionAttrInfo$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER
        );
        static final MethodHandle clang_index_getIBOutletCollectionAttrInfo$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_index_getIBOutletCollectionAttrInfo",
            "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
            constants$1.clang_index_getIBOutletCollectionAttrInfo$FUNC, false
        );
        static final FunctionDescriptor clang_index_getCXXClassDeclInfo$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER
        );
        static final MethodHandle clang_index_getCXXClassDeclInfo$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_index_getCXXClassDeclInfo",
            "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
            constants$1.clang_index_getCXXClassDeclInfo$FUNC, false
        );
        static final FunctionDescriptor clang_index_getClientContainer$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER
        );
        static final MethodHandle clang_index_getClientContainer$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_index_getClientContainer",
            "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
            constants$1.clang_index_getClientContainer$FUNC, false
        );
        static final FunctionDescriptor clang_index_setClientContainer$FUNC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );
        static final MethodHandle clang_index_setClientContainer$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_index_setClientContainer",
            "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
            constants$1.clang_index_setClientContainer$FUNC, false
        );
        static final FunctionDescriptor clang_index_getClientEntity$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER
        );
        static final MethodHandle clang_index_getClientEntity$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_index_getClientEntity",
            "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
            constants$1.clang_index_getClientEntity$FUNC, false
        );
        static final FunctionDescriptor clang_index_setClientEntity$FUNC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );
        static final MethodHandle clang_index_setClientEntity$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_index_setClientEntity",
            "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
            constants$1.clang_index_setClientEntity$FUNC, false
        );
    }

    public static MethodHandle clang_IndexAction_create$MH() {
        return RuntimeHelper.requireNonNull(constants$2.clang_IndexAction_create$MH,"clang_IndexAction_create");
    }
    public static MemoryAddress clang_IndexAction_create ( Addressable CIdx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_IndexAction_create$MH, "clang_IndexAction_create");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(CIdx.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clang_IndexAction_dispose$MH() {
        return RuntimeHelper.requireNonNull(constants$2.clang_IndexAction_dispose$MH,"clang_IndexAction_dispose");
    }
    public static void clang_IndexAction_dispose ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_IndexAction_dispose$MH, "clang_IndexAction_dispose");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int CXIndexOpt_None() {
        return (int)0L;
    }
    public static int CXIndexOpt_SuppressRedundantRefs() {
        return (int)1L;
    }
    public static int CXIndexOpt_IndexFunctionLocalSymbols() {
        return (int)2L;
    }
    public static int CXIndexOpt_IndexImplicitTemplateInstantiations() {
        return (int)4L;
    }
    public static int CXIndexOpt_SuppressWarnings() {
        return (int)8L;
    }
    public static int CXIndexOpt_SkipParsedBodiesInSession() {
        return (int)16L;
    }
    public static MethodHandle clang_indexSourceFile$MH() {
        return RuntimeHelper.requireNonNull(constants$2.clang_indexSourceFile$MH,"clang_indexSourceFile");
    }
    public static int clang_indexSourceFile ( Addressable x0,  Addressable client_data,  Addressable index_callbacks,  int index_callbacks_size,  int index_options,  Addressable source_filename,  Addressable command_line_args,  int num_command_line_args,  Addressable unsaved_files,  int num_unsaved_files,  Addressable out_TU,  int TU_options) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_indexSourceFile$MH, "clang_indexSourceFile");
        try {
            return (int)mh$.invokeExact(x0.address(), client_data.address(), index_callbacks.address(), index_callbacks_size, index_options, source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, out_TU.address(), TU_options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clang_indexSourceFileFullArgv$MH() {
        return RuntimeHelper.requireNonNull(constants$2.clang_indexSourceFileFullArgv$MH,"clang_indexSourceFileFullArgv");
    }
    public static int clang_indexSourceFileFullArgv ( Addressable x0,  Addressable client_data,  Addressable index_callbacks,  int index_callbacks_size,  int index_options,  Addressable source_filename,  Addressable command_line_args,  int num_command_line_args,  Addressable unsaved_files,  int num_unsaved_files,  Addressable out_TU,  int TU_options) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_indexSourceFileFullArgv$MH, "clang_indexSourceFileFullArgv");
        try {
            return (int)mh$.invokeExact(x0.address(), client_data.address(), index_callbacks.address(), index_callbacks_size, index_options, source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, out_TU.address(), TU_options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clang_indexTranslationUnit$MH() {
        return RuntimeHelper.requireNonNull(constants$2.clang_indexTranslationUnit$MH,"clang_indexTranslationUnit");
    }
    public static int clang_indexTranslationUnit ( Addressable x0,  Addressable client_data,  Addressable index_callbacks,  int index_callbacks_size,  int index_options,  Addressable x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_indexTranslationUnit$MH, "clang_indexTranslationUnit");
        try {
            return (int)mh$.invokeExact(x0.address(), client_data.address(), index_callbacks.address(), index_callbacks_size, index_options, x5.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clang_indexLoc_getFileLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$2.clang_indexLoc_getFileLocation$MH,"clang_indexLoc_getFileLocation");
    }
    public static void clang_indexLoc_getFileLocation ( MemorySegment loc,  Addressable indexFile,  Addressable file,  Addressable line,  Addressable column,  Addressable offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_indexLoc_getFileLocation$MH, "clang_indexLoc_getFileLocation");
        try {
            mh$.invokeExact(loc, indexFile.address(), file.address(), line.address(), column.address(), offset.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static class constants$2 {

        static final FunctionDescriptor clang_IndexAction_create$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER
        );
        static final MethodHandle clang_IndexAction_create$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_IndexAction_create",
            "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
            constants$2.clang_IndexAction_create$FUNC, false
        );
        static final FunctionDescriptor clang_IndexAction_dispose$FUNC = FunctionDescriptor.ofVoid(
            C_POINTER
        );
        static final MethodHandle clang_IndexAction_dispose$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_IndexAction_dispose",
            "(Ljdk/incubator/foreign/MemoryAddress;)V",
            constants$2.clang_IndexAction_dispose$FUNC, false
        );
        static final FunctionDescriptor clang_indexSourceFile$FUNC = FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT
        );
        static final MethodHandle clang_indexSourceFile$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_indexSourceFile",
            "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
            constants$2.clang_indexSourceFile$FUNC, false
        );
        static final FunctionDescriptor clang_indexSourceFileFullArgv$FUNC = FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT
        );
        static final MethodHandle clang_indexSourceFileFullArgv$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_indexSourceFileFullArgv",
            "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
            constants$2.clang_indexSourceFileFullArgv$FUNC, false
        );
        static final FunctionDescriptor clang_indexTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_INT,
            C_POINTER
        );
        static final MethodHandle clang_indexTranslationUnit$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_indexTranslationUnit",
            "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
            constants$2.clang_indexTranslationUnit$FUNC, false
        );
        static final FunctionDescriptor clang_indexLoc_getFileLocation$FUNC = FunctionDescriptor.ofVoid(
            MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.paddingLayout(32)
            ),
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );
        static final MethodHandle clang_indexLoc_getFileLocation$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_indexLoc_getFileLocation",
            "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
            constants$2.clang_indexLoc_getFileLocation$FUNC, false
        );
    }

    public static MethodHandle clang_indexLoc_getCXSourceLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$3.clang_indexLoc_getCXSourceLocation$MH,"clang_indexLoc_getCXSourceLocation");
    }
    public static MemorySegment clang_indexLoc_getCXSourceLocation ( SegmentAllocator allocator,  MemorySegment loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_indexLoc_getCXSourceLocation$MH, "clang_indexLoc_getCXSourceLocation");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment clang_indexLoc_getCXSourceLocation ( ResourceScope scope,  MemorySegment loc) {
        return clang_indexLoc_getCXSourceLocation(SegmentAllocator.ofScope(scope), loc);
    }
    public static MethodHandle clang_Type_visitFields$MH() {
        return RuntimeHelper.requireNonNull(constants$3.clang_Type_visitFields$MH,"clang_Type_visitFields");
    }
    public static int clang_Type_visitFields ( MemorySegment T,  Addressable visitor,  Addressable client_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_Type_visitFields$MH, "clang_Type_visitFields");
        try {
            return (int)mh$.invokeExact(T, visitor.address(), client_data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int CINDEX_VERSION() {
        return (int)59L;
    }
    public static MemorySegment CINDEX_VERSION_STRING() {
        return constants$3.CINDEX_VERSION_STRING$SEGMENT;
    }

    // Manual change to handle platform specific library name difference
    private static String libName() {
        if (System.getProperty("os.name").startsWith("Windows")) {
            return "libclang";
        }
        return "clang";
    }

    static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {
        libName()
    });

    public static class constants$3 {

        static final FunctionDescriptor clang_indexLoc_getCXSourceLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.paddingLayout(32)
        ),
            MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.paddingLayout(32)
            )
        );
        static final MethodHandle clang_indexLoc_getCXSourceLocation$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_indexLoc_getCXSourceLocation",
            "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
            constants$3.clang_indexLoc_getCXSourceLocation$FUNC, false
        );
        static final FunctionDescriptor clang_Type_visitFields$FUNC = FunctionDescriptor.of(C_INT,
            MemoryLayout.structLayout(
                C_INT.withName("kind"),
                MemoryLayout.paddingLayout(32),
                MemoryLayout.sequenceLayout(2, C_POINTER).withName("data")
            ),
            C_POINTER,
            C_POINTER
        );
        static final MethodHandle clang_Type_visitFields$MH = RuntimeHelper.downcallHandle(
            LIBRARIES, "clang_Type_visitFields",
            "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
            constants$3.clang_Type_visitFields$FUNC, false
        );
        static final MemorySegment CINDEX_VERSION_STRING$SEGMENT = CLinker.toCString("0.59", ResourceScope.newImplicitScope());
    }

}


