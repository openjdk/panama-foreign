/*
 *  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 *  This code is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License version 2 only, as
 *  published by the Free Software Foundation.  Oracle designates this
 *  particular file as subject to the "Classpath" exception as provided
 *  by Oracle in the LICENSE file that accompanied this code.
 *
 *  This code is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 *  version 2 for more details (a copy is included in the LICENSE file that
 *  accompanied this code).
 *
 *  You should have received a copy of the GNU General Public License version
 *  2 along with this work; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 *  or visit www.oracle.com if you need additional information or have any
 *  questions.
 *
 */

// Generated by jextract

package jdk.internal.clang.libclang;

import jdk.incubator.foreign.FunctionDescriptor;
import jdk.incubator.foreign.LibraryLookup;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import jdk.incubator.foreign.MemorySegment;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;

import static jdk.internal.jextract.impl.LayoutUtils.*; 
        
public final class Index_h {

    private static String libName() {
        if (System.getProperty("os.name").startsWith("Windows")) {
            return "libclang";
        }
        return "clang";
    }

    private static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {libName()}, new String[] {});
    public static final long NULL = 0L;
    public static final int CINDEX_VERSION_MAJOR = (int)0L;
    public static final int CINDEX_VERSION_MINOR = (int)59L;
    public static final int CINDEX_VERSION = (int)59L;
    public static final int CXError_Success = (int)0L;
    public static final int CXError_Failure = (int)1L;
    public static final int CXError_Crashed = (int)2L;
    public static final int CXError_InvalidArguments = (int)3L;
    public static final int CXError_ASTReadError = (int)4L;
    public static final MemoryLayout CXString$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("private_flags"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static final VarHandle CXString$private_flags = CXString$LAYOUT.varHandle(int.class, PathElement.groupElement("private_flags"));
    public static final int CXString$private_flags$get(MemorySegment seg) {
        return (int)CXString$private_flags.get(seg.baseAddress());
    }
    public static final void CXString$private_flags$set(MemorySegment seg, int x) {
        CXString$private_flags.set(seg.baseAddress(), x);
    }
    public static final MemoryLayout CXStringSet$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("Strings"),
        C_INT.withName("Count"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static final VarHandle CXStringSet$Count = CXStringSet$LAYOUT.varHandle(int.class, PathElement.groupElement("Count"));
    public static final int CXStringSet$Count$get(MemorySegment seg) {
        return (int)CXStringSet$Count.get(seg.baseAddress());
    }
    public static final void CXStringSet$Count$set(MemorySegment seg, int x) {
        CXStringSet$Count.set(seg.baseAddress(), x);
    }
    public static final MethodHandle clang_getCString = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCString",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            MemoryLayout.ofStruct(
                C_POINTER.withName("data"),
                C_INT.withName("private_flags"),
                MemoryLayout.ofPaddingBits(32)
            )
        )
    );
    public static final MemoryAddress clang_getCString (MemorySegment string) {
        try {
            return (MemoryAddress)clang_getCString.invokeExact(string);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_disposeString = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeString",
        "(Ljdk/incubator/foreign/MemorySegment;)V",
        FunctionDescriptor.ofVoid(
            MemoryLayout.ofStruct(
                C_POINTER.withName("data"),
                C_INT.withName("private_flags"),
                MemoryLayout.ofPaddingBits(32)
            )
        )
    );
    public static final void clang_disposeString (MemorySegment string) {
        try {
            clang_disposeString.invokeExact(string);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_disposeStringSet = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeStringSet",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_disposeStringSet (MemoryAddress set) {
        try {
            clang_disposeStringSet.invokeExact(set);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getBuildSessionTimestamp = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getBuildSessionTimestamp",
        "()J",
        FunctionDescriptor.of(C_LONGLONG)
    );
    public static final long clang_getBuildSessionTimestamp () {
        try {
            return (long)clang_getBuildSessionTimestamp.invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_VirtualFileOverlay_create = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_VirtualFileOverlay_create",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_INT
        )
    );
    public static final MemoryAddress clang_VirtualFileOverlay_create (int options) {
        try {
            return (MemoryAddress)clang_VirtualFileOverlay_create.invokeExact(options);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_VirtualFileOverlay_addFileMapping = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_VirtualFileOverlay_addFileMapping",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final int clang_VirtualFileOverlay_addFileMapping (MemoryAddress x0, MemoryAddress virtualPath, MemoryAddress realPath) {
        try {
            return (int)clang_VirtualFileOverlay_addFileMapping.invokeExact(x0, virtualPath, realPath);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_VirtualFileOverlay_setCaseSensitivity = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_VirtualFileOverlay_setCaseSensitivity",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_INT
        )
    );
    public static final int clang_VirtualFileOverlay_setCaseSensitivity (MemoryAddress x0, int caseSensitive) {
        try {
            return (int)clang_VirtualFileOverlay_setCaseSensitivity.invokeExact(x0, caseSensitive);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_VirtualFileOverlay_writeToBuffer = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_VirtualFileOverlay_writeToBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        )
    );
    public static final int clang_VirtualFileOverlay_writeToBuffer (MemoryAddress x0, int options, MemoryAddress out_buffer_ptr, MemoryAddress out_buffer_size) {
        try {
            return (int)clang_VirtualFileOverlay_writeToBuffer.invokeExact(x0, options, out_buffer_ptr, out_buffer_size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_free = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_free",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_free (MemoryAddress buffer) {
        try {
            clang_free.invokeExact(buffer);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_VirtualFileOverlay_dispose = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_VirtualFileOverlay_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_VirtualFileOverlay_dispose (MemoryAddress x0) {
        try {
            clang_VirtualFileOverlay_dispose.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_ModuleMapDescriptor_create = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_ModuleMapDescriptor_create",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_INT
        )
    );
    public static final MemoryAddress clang_ModuleMapDescriptor_create (int options) {
        try {
            return (MemoryAddress)clang_ModuleMapDescriptor_create.invokeExact(options);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_ModuleMapDescriptor_setFrameworkModuleName = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_ModuleMapDescriptor_setFrameworkModuleName",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        )
    );
    public static final int clang_ModuleMapDescriptor_setFrameworkModuleName (MemoryAddress x0, MemoryAddress name) {
        try {
            return (int)clang_ModuleMapDescriptor_setFrameworkModuleName.invokeExact(x0, name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_ModuleMapDescriptor_setUmbrellaHeader = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_ModuleMapDescriptor_setUmbrellaHeader",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        )
    );
    public static final int clang_ModuleMapDescriptor_setUmbrellaHeader (MemoryAddress x0, MemoryAddress name) {
        try {
            return (int)clang_ModuleMapDescriptor_setUmbrellaHeader.invokeExact(x0, name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_ModuleMapDescriptor_writeToBuffer = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_ModuleMapDescriptor_writeToBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        )
    );
    public static final int clang_ModuleMapDescriptor_writeToBuffer (MemoryAddress x0, int options, MemoryAddress out_buffer_ptr, MemoryAddress out_buffer_size) {
        try {
            return (int)clang_ModuleMapDescriptor_writeToBuffer.invokeExact(x0, options, out_buffer_ptr, out_buffer_size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_ModuleMapDescriptor_dispose = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_ModuleMapDescriptor_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_ModuleMapDescriptor_dispose (MemoryAddress x0) {
        try {
            clang_ModuleMapDescriptor_dispose.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MemoryLayout CXUnsavedFile$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("Filename"),
        C_POINTER.withName("Contents"),
        C_LONGLONG.withName("Length")
    ).withName("CXUnsavedFile");
    public static final VarHandle CXUnsavedFile$Length = CXUnsavedFile$LAYOUT.varHandle(long.class, PathElement.groupElement("Length"));
    public static final long CXUnsavedFile$Length$get(MemorySegment seg) {
        return (long)CXUnsavedFile$Length.get(seg.baseAddress());
    }
    public static final void CXUnsavedFile$Length$set(MemorySegment seg, long x) {
        CXUnsavedFile$Length.set(seg.baseAddress(), x);
    }
    public static final int CXAvailability_Available = (int)0L;
    public static final int CXAvailability_Deprecated = (int)1L;
    public static final int CXAvailability_NotAvailable = (int)2L;
    public static final int CXAvailability_NotAccessible = (int)3L;
    public static final MemoryLayout CXVersion$LAYOUT = MemoryLayout.ofStruct(
        C_INT.withName("Major"),
        C_INT.withName("Minor"),
        C_INT.withName("Subminor")
    ).withName("CXVersion");
    public static final VarHandle CXVersion$Major = CXVersion$LAYOUT.varHandle(int.class, PathElement.groupElement("Major"));
    public static final int CXVersion$Major$get(MemorySegment seg) {
        return (int)CXVersion$Major.get(seg.baseAddress());
    }
    public static final void CXVersion$Major$set(MemorySegment seg, int x) {
        CXVersion$Major.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXVersion$Minor = CXVersion$LAYOUT.varHandle(int.class, PathElement.groupElement("Minor"));
    public static final int CXVersion$Minor$get(MemorySegment seg) {
        return (int)CXVersion$Minor.get(seg.baseAddress());
    }
    public static final void CXVersion$Minor$set(MemorySegment seg, int x) {
        CXVersion$Minor.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXVersion$Subminor = CXVersion$LAYOUT.varHandle(int.class, PathElement.groupElement("Subminor"));
    public static final int CXVersion$Subminor$get(MemorySegment seg) {
        return (int)CXVersion$Subminor.get(seg.baseAddress());
    }
    public static final void CXVersion$Subminor$set(MemorySegment seg, int x) {
        CXVersion$Subminor.set(seg.baseAddress(), x);
    }
    public static final int CXCursor_ExceptionSpecificationKind_None = (int)0L;
    public static final int CXCursor_ExceptionSpecificationKind_DynamicNone = (int)1L;
    public static final int CXCursor_ExceptionSpecificationKind_Dynamic = (int)2L;
    public static final int CXCursor_ExceptionSpecificationKind_MSAny = (int)3L;
    public static final int CXCursor_ExceptionSpecificationKind_BasicNoexcept = (int)4L;
    public static final int CXCursor_ExceptionSpecificationKind_ComputedNoexcept = (int)5L;
    public static final int CXCursor_ExceptionSpecificationKind_Unevaluated = (int)6L;
    public static final int CXCursor_ExceptionSpecificationKind_Uninstantiated = (int)7L;
    public static final int CXCursor_ExceptionSpecificationKind_Unparsed = (int)8L;
    public static final int CXCursor_ExceptionSpecificationKind_NoThrow = (int)9L;
    public static final MethodHandle clang_createIndex = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_createIndex",
        "(II)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_INT,
            C_INT
        )
    );
    public static final MemoryAddress clang_createIndex (int excludeDeclarationsFromPCH, int displayDiagnostics) {
        try {
            return (MemoryAddress)clang_createIndex.invokeExact(excludeDeclarationsFromPCH, displayDiagnostics);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_disposeIndex = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeIndex",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_disposeIndex (MemoryAddress index) {
        try {
            clang_disposeIndex.invokeExact(index);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXGlobalOpt_None = (int)0L;
    public static final int CXGlobalOpt_ThreadBackgroundPriorityForIndexing = (int)1L;
    public static final int CXGlobalOpt_ThreadBackgroundPriorityForEditing = (int)2L;
    public static final int CXGlobalOpt_ThreadBackgroundPriorityForAll = (int)3L;
    public static final MethodHandle clang_CXIndex_setGlobalOptions = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXIndex_setGlobalOptions",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        FunctionDescriptor.ofVoid(
            C_POINTER,
            C_INT
        )
    );
    public static final void clang_CXIndex_setGlobalOptions (MemoryAddress x0, int options) {
        try {
            clang_CXIndex_setGlobalOptions.invokeExact(x0, options);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_CXIndex_getGlobalOptions = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXIndex_getGlobalOptions",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_CXIndex_getGlobalOptions (MemoryAddress x0) {
        try {
            return (int)clang_CXIndex_getGlobalOptions.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_CXIndex_setInvocationEmissionPathOption = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXIndex_setInvocationEmissionPathOption",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        )
    );
    public static final void clang_CXIndex_setInvocationEmissionPathOption (MemoryAddress x0, MemoryAddress Path) {
        try {
            clang_CXIndex_setInvocationEmissionPathOption.invokeExact(x0, Path);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getFileName = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFileName",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_getFileName (MemoryAddress SFile) {
        try {
            return (MemorySegment)clang_getFileName.invokeExact(SFile);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getFileTime = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFileTime",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        FunctionDescriptor.of(C_LONGLONG,
            C_POINTER
        )
    );
    public static final long clang_getFileTime (MemoryAddress SFile) {
        try {
            return (long)clang_getFileTime.invokeExact(SFile);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MemoryLayout CXFileUniqueID$LAYOUT = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(3, C_LONGLONG).withName("data")
    );
    public static final MethodHandle clang_getFileUniqueID = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFileUniqueID",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        )
    );
    public static final int clang_getFileUniqueID (MemoryAddress file, MemoryAddress outID) {
        try {
            return (int)clang_getFileUniqueID.invokeExact(file, outID);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isFileMultipleIncludeGuarded = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isFileMultipleIncludeGuarded",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        )
    );
    public static final int clang_isFileMultipleIncludeGuarded (MemoryAddress tu, MemoryAddress file) {
        try {
            return (int)clang_isFileMultipleIncludeGuarded.invokeExact(tu, file);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getFile = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_getFile (MemoryAddress tu, MemoryAddress file_name) {
        try {
            return (MemoryAddress)clang_getFile.invokeExact(tu, file_name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getFileContents = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFileContents",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_getFileContents (MemoryAddress tu, MemoryAddress file, MemoryAddress size) {
        try {
            return (MemoryAddress)clang_getFileContents.invokeExact(tu, file, size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_File_isEqual = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_File_isEqual",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        )
    );
    public static final int clang_File_isEqual (MemoryAddress file1, MemoryAddress file2) {
        try {
            return (int)clang_File_isEqual.invokeExact(file1, file2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_File_tryGetRealPathName = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_File_tryGetRealPathName",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_File_tryGetRealPathName (MemoryAddress file) {
        try {
            return (MemorySegment)clang_File_tryGetRealPathName.invokeExact(file);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MemoryLayout CXSourceLocation$LAYOUT = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static final VarHandle CXSourceLocation$int_data = CXSourceLocation$LAYOUT.varHandle(int.class, PathElement.groupElement("int_data"));
    public static final int CXSourceLocation$int_data$get(MemorySegment seg) {
        return (int)CXSourceLocation$int_data.get(seg.baseAddress());
    }
    public static final void CXSourceLocation$int_data$set(MemorySegment seg, int x) {
        CXSourceLocation$int_data.set(seg.baseAddress(), x);
    }
    public static final MemoryLayout CXSourceRange$LAYOUT = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("begin_int_data"),
        C_INT.withName("end_int_data")
    );
    public static final VarHandle CXSourceRange$begin_int_data = CXSourceRange$LAYOUT.varHandle(int.class, PathElement.groupElement("begin_int_data"));
    public static final int CXSourceRange$begin_int_data$get(MemorySegment seg) {
        return (int)CXSourceRange$begin_int_data.get(seg.baseAddress());
    }
    public static final void CXSourceRange$begin_int_data$set(MemorySegment seg, int x) {
        CXSourceRange$begin_int_data.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXSourceRange$end_int_data = CXSourceRange$LAYOUT.varHandle(int.class, PathElement.groupElement("end_int_data"));
    public static final int CXSourceRange$end_int_data$get(MemorySegment seg) {
        return (int)CXSourceRange$end_int_data.get(seg.baseAddress());
    }
    public static final void CXSourceRange$end_int_data$set(MemorySegment seg, int x) {
        CXSourceRange$end_int_data.set(seg.baseAddress(), x);
    }
    public static final MethodHandle clang_getNullLocation = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNullLocation",
        "()Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ))
    );
    public static final MemorySegment clang_getNullLocation () {
        try {
            return (MemorySegment)clang_getNullLocation.invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_equalLocations = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_equalLocations",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.ofPaddingBits(32)
            ),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.ofPaddingBits(32)
            )
        )
    );
    public static final int clang_equalLocations (MemorySegment loc1, MemorySegment loc2) {
        try {
            return (int)clang_equalLocations.invokeExact(loc1, loc2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getLocation = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getLocation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER,
            C_POINTER,
            C_INT,
            C_INT
        )
    );
    public static final MemorySegment clang_getLocation (MemoryAddress tu, MemoryAddress file, int line, int column) {
        try {
            return (MemorySegment)clang_getLocation.invokeExact(tu, file, line, column);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getLocationForOffset = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getLocationForOffset",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER,
            C_POINTER,
            C_INT
        )
    );
    public static final MemorySegment clang_getLocationForOffset (MemoryAddress tu, MemoryAddress file, int offset) {
        try {
            return (MemorySegment)clang_getLocationForOffset.invokeExact(tu, file, offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Location_isInSystemHeader = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Location_isInSystemHeader",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.ofPaddingBits(32)
            )
        )
    );
    public static final int clang_Location_isInSystemHeader (MemorySegment location) {
        try {
            return (int)clang_Location_isInSystemHeader.invokeExact(location);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Location_isFromMainFile = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Location_isFromMainFile",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.ofPaddingBits(32)
            )
        )
    );
    public static final int clang_Location_isFromMainFile (MemorySegment location) {
        try {
            return (int)clang_Location_isFromMainFile.invokeExact(location);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getNullRange = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNullRange",
        "()Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        ))
    );
    public static final MemorySegment clang_getNullRange () {
        try {
            return (MemorySegment)clang_getNullRange.invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getRange = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getRange",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        ),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.ofPaddingBits(32)
            ),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.ofPaddingBits(32)
            )
        )
    );
    public static final MemorySegment clang_getRange (MemorySegment begin, MemorySegment end) {
        try {
            return (MemorySegment)clang_getRange.invokeExact(begin, end);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_equalRanges = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_equalRanges",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("begin_int_data"),
                C_INT.withName("end_int_data")
            ),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("begin_int_data"),
                C_INT.withName("end_int_data")
            )
        )
    );
    public static final int clang_equalRanges (MemorySegment range1, MemorySegment range2) {
        try {
            return (int)clang_equalRanges.invokeExact(range1, range2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Range_isNull = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Range_isNull",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("begin_int_data"),
                C_INT.withName("end_int_data")
            )
        )
    );
    public static final int clang_Range_isNull (MemorySegment range) {
        try {
            return (int)clang_Range_isNull.invokeExact(range);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getExpansionLocation = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getExpansionLocation",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.ofPaddingBits(32)
            ),
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final void clang_getExpansionLocation (MemorySegment location, MemoryAddress file, MemoryAddress line, MemoryAddress column, MemoryAddress offset) {
        try {
            clang_getExpansionLocation.invokeExact(location, file, line, column, offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getPresumedLocation = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getPresumedLocation",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.ofPaddingBits(32)
            ),
            C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final void clang_getPresumedLocation (MemorySegment location, MemoryAddress filename, MemoryAddress line, MemoryAddress column) {
        try {
            clang_getPresumedLocation.invokeExact(location, filename, line, column);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getInstantiationLocation = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getInstantiationLocation",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.ofPaddingBits(32)
            ),
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final void clang_getInstantiationLocation (MemorySegment location, MemoryAddress file, MemoryAddress line, MemoryAddress column, MemoryAddress offset) {
        try {
            clang_getInstantiationLocation.invokeExact(location, file, line, column, offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getSpellingLocation = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getSpellingLocation",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.ofPaddingBits(32)
            ),
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final void clang_getSpellingLocation (MemorySegment location, MemoryAddress file, MemoryAddress line, MemoryAddress column, MemoryAddress offset) {
        try {
            clang_getSpellingLocation.invokeExact(location, file, line, column, offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getFileLocation = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFileLocation",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.ofPaddingBits(32)
            ),
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final void clang_getFileLocation (MemorySegment location, MemoryAddress file, MemoryAddress line, MemoryAddress column, MemoryAddress offset) {
        try {
            clang_getFileLocation.invokeExact(location, file, line, column, offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getRangeStart = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getRangeStart",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("begin_int_data"),
                C_INT.withName("end_int_data")
            )
        )
    );
    public static final MemorySegment clang_getRangeStart (MemorySegment range) {
        try {
            return (MemorySegment)clang_getRangeStart.invokeExact(range);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getRangeEnd = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getRangeEnd",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("begin_int_data"),
                C_INT.withName("end_int_data")
            )
        )
    );
    public static final MemorySegment clang_getRangeEnd (MemorySegment range) {
        try {
            return (MemorySegment)clang_getRangeEnd.invokeExact(range);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MemoryLayout CXSourceRangeList$LAYOUT = MemoryLayout.ofStruct(
        C_INT.withName("count"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("ranges")
    );
    public static final VarHandle CXSourceRangeList$count = CXSourceRangeList$LAYOUT.varHandle(int.class, PathElement.groupElement("count"));
    public static final int CXSourceRangeList$count$get(MemorySegment seg) {
        return (int)CXSourceRangeList$count.get(seg.baseAddress());
    }
    public static final void CXSourceRangeList$count$set(MemorySegment seg, int x) {
        CXSourceRangeList$count.set(seg.baseAddress(), x);
    }
    public static final MethodHandle clang_getSkippedRanges = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getSkippedRanges",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_getSkippedRanges (MemoryAddress tu, MemoryAddress file) {
        try {
            return (MemoryAddress)clang_getSkippedRanges.invokeExact(tu, file);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getAllSkippedRanges = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getAllSkippedRanges",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_getAllSkippedRanges (MemoryAddress tu) {
        try {
            return (MemoryAddress)clang_getAllSkippedRanges.invokeExact(tu);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_disposeSourceRangeList = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeSourceRangeList",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_disposeSourceRangeList (MemoryAddress ranges) {
        try {
            clang_disposeSourceRangeList.invokeExact(ranges);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXDiagnostic_Ignored = (int)0L;
    public static final int CXDiagnostic_Note = (int)1L;
    public static final int CXDiagnostic_Warning = (int)2L;
    public static final int CXDiagnostic_Error = (int)3L;
    public static final int CXDiagnostic_Fatal = (int)4L;
    public static final MethodHandle clang_getNumDiagnosticsInSet = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumDiagnosticsInSet",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_getNumDiagnosticsInSet (MemoryAddress Diags) {
        try {
            return (int)clang_getNumDiagnosticsInSet.invokeExact(Diags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDiagnosticInSet = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticInSet",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_INT
        )
    );
    public static final MemoryAddress clang_getDiagnosticInSet (MemoryAddress Diags, int Index) {
        try {
            return (MemoryAddress)clang_getDiagnosticInSet.invokeExact(Diags, Index);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXLoadDiag_None = (int)0L;
    public static final int CXLoadDiag_Unknown = (int)1L;
    public static final int CXLoadDiag_CannotLoad = (int)2L;
    public static final int CXLoadDiag_InvalidFile = (int)3L;
    public static final MethodHandle clang_loadDiagnostics = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_loadDiagnostics",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_loadDiagnostics (MemoryAddress file, MemoryAddress error, MemoryAddress errorString) {
        try {
            return (MemoryAddress)clang_loadDiagnostics.invokeExact(file, error, errorString);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_disposeDiagnosticSet = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeDiagnosticSet",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_disposeDiagnosticSet (MemoryAddress Diags) {
        try {
            clang_disposeDiagnosticSet.invokeExact(Diags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getChildDiagnostics = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getChildDiagnostics",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_getChildDiagnostics (MemoryAddress D) {
        try {
            return (MemoryAddress)clang_getChildDiagnostics.invokeExact(D);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getNumDiagnostics = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumDiagnostics",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_getNumDiagnostics (MemoryAddress Unit) {
        try {
            return (int)clang_getNumDiagnostics.invokeExact(Unit);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDiagnostic = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnostic",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_INT
        )
    );
    public static final MemoryAddress clang_getDiagnostic (MemoryAddress Unit, int Index) {
        try {
            return (MemoryAddress)clang_getDiagnostic.invokeExact(Unit, Index);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDiagnosticSetFromTU = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticSetFromTU",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_getDiagnosticSetFromTU (MemoryAddress Unit) {
        try {
            return (MemoryAddress)clang_getDiagnosticSetFromTU.invokeExact(Unit);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_disposeDiagnostic = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeDiagnostic",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_disposeDiagnostic (MemoryAddress Diagnostic) {
        try {
            clang_disposeDiagnostic.invokeExact(Diagnostic);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXDiagnostic_DisplaySourceLocation = (int)1L;
    public static final int CXDiagnostic_DisplayColumn = (int)2L;
    public static final int CXDiagnostic_DisplaySourceRanges = (int)4L;
    public static final int CXDiagnostic_DisplayOption = (int)8L;
    public static final int CXDiagnostic_DisplayCategoryId = (int)16L;
    public static final int CXDiagnostic_DisplayCategoryName = (int)32L;
    public static final MethodHandle clang_formatDiagnostic = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_formatDiagnostic",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER,
            C_INT
        )
    );
    public static final MemorySegment clang_formatDiagnostic (MemoryAddress Diagnostic, int Options) {
        try {
            return (MemorySegment)clang_formatDiagnostic.invokeExact(Diagnostic, Options);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_defaultDiagnosticDisplayOptions = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_defaultDiagnosticDisplayOptions",
        "()I",
        FunctionDescriptor.of(C_INT)
    );
    public static final int clang_defaultDiagnosticDisplayOptions () {
        try {
            return (int)clang_defaultDiagnosticDisplayOptions.invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDiagnosticSeverity = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticSeverity",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_getDiagnosticSeverity (MemoryAddress x0) {
        try {
            return (int)clang_getDiagnosticSeverity.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDiagnosticLocation = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticLocation",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_getDiagnosticLocation (MemoryAddress x0) {
        try {
            return (MemorySegment)clang_getDiagnosticLocation.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDiagnosticSpelling = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticSpelling",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_getDiagnosticSpelling (MemoryAddress x0) {
        try {
            return (MemorySegment)clang_getDiagnosticSpelling.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDiagnosticOption = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticOption",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER,
            C_POINTER
        )
    );
    public static final MemorySegment clang_getDiagnosticOption (MemoryAddress Diag, MemoryAddress Disable) {
        try {
            return (MemorySegment)clang_getDiagnosticOption.invokeExact(Diag, Disable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDiagnosticCategory = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticCategory",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_getDiagnosticCategory (MemoryAddress x0) {
        try {
            return (int)clang_getDiagnosticCategory.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDiagnosticCategoryName = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticCategoryName",
        "(I)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_INT
        )
    );
    public static final MemorySegment clang_getDiagnosticCategoryName (int Category) {
        try {
            return (MemorySegment)clang_getDiagnosticCategoryName.invokeExact(Category);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDiagnosticCategoryText = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticCategoryText",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_getDiagnosticCategoryText (MemoryAddress x0) {
        try {
            return (MemorySegment)clang_getDiagnosticCategoryText.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDiagnosticNumRanges = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticNumRanges",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_getDiagnosticNumRanges (MemoryAddress x0) {
        try {
            return (int)clang_getDiagnosticNumRanges.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDiagnosticRange = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticRange",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        ),
            C_POINTER,
            C_INT
        )
    );
    public static final MemorySegment clang_getDiagnosticRange (MemoryAddress Diagnostic, int Range) {
        try {
            return (MemorySegment)clang_getDiagnosticRange.invokeExact(Diagnostic, Range);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDiagnosticNumFixIts = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticNumFixIts",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_getDiagnosticNumFixIts (MemoryAddress Diagnostic) {
        try {
            return (int)clang_getDiagnosticNumFixIts.invokeExact(Diagnostic);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDiagnosticFixIt = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDiagnosticFixIt",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER,
            C_INT,
            C_POINTER
        )
    );
    public static final MemorySegment clang_getDiagnosticFixIt (MemoryAddress Diagnostic, int FixIt, MemoryAddress ReplacementRange) {
        try {
            return (MemorySegment)clang_getDiagnosticFixIt.invokeExact(Diagnostic, FixIt, ReplacementRange);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getTranslationUnitSpelling = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTranslationUnitSpelling",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_getTranslationUnitSpelling (MemoryAddress CTUnit) {
        try {
            return (MemorySegment)clang_getTranslationUnitSpelling.invokeExact(CTUnit);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_createTranslationUnitFromSourceFile = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_createTranslationUnitFromSourceFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_createTranslationUnitFromSourceFile (MemoryAddress CIdx, MemoryAddress source_filename, int num_clang_command_line_args, MemoryAddress clang_command_line_args, int num_unsaved_files, MemoryAddress unsaved_files) {
        try {
            return (MemoryAddress)clang_createTranslationUnitFromSourceFile.invokeExact(CIdx, source_filename, num_clang_command_line_args, clang_command_line_args, num_unsaved_files, unsaved_files);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_createTranslationUnit = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_createTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_createTranslationUnit (MemoryAddress CIdx, MemoryAddress ast_filename) {
        try {
            return (MemoryAddress)clang_createTranslationUnit.invokeExact(CIdx, ast_filename);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_createTranslationUnit2 = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_createTranslationUnit2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final int clang_createTranslationUnit2 (MemoryAddress CIdx, MemoryAddress ast_filename, MemoryAddress out_TU) {
        try {
            return (int)clang_createTranslationUnit2.invokeExact(CIdx, ast_filename, out_TU);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXTranslationUnit_None = (int)0L;
    public static final int CXTranslationUnit_DetailedPreprocessingRecord = (int)1L;
    public static final int CXTranslationUnit_Incomplete = (int)2L;
    public static final int CXTranslationUnit_PrecompiledPreamble = (int)4L;
    public static final int CXTranslationUnit_CacheCompletionResults = (int)8L;
    public static final int CXTranslationUnit_ForSerialization = (int)16L;
    public static final int CXTranslationUnit_CXXChainedPCH = (int)32L;
    public static final int CXTranslationUnit_SkipFunctionBodies = (int)64L;
    public static final int CXTranslationUnit_IncludeBriefCommentsInCodeCompletion = (int)128L;
    public static final int CXTranslationUnit_CreatePreambleOnFirstParse = (int)256L;
    public static final int CXTranslationUnit_KeepGoing = (int)512L;
    public static final int CXTranslationUnit_SingleFileParse = (int)1024L;
    public static final int CXTranslationUnit_LimitSkipFunctionBodiesToPreamble = (int)2048L;
    public static final int CXTranslationUnit_IncludeAttributedTypes = (int)4096L;
    public static final int CXTranslationUnit_VisitImplicitAttributes = (int)8192L;
    public static final int CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles = (int)16384L;
    public static final MethodHandle clang_defaultEditingTranslationUnitOptions = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_defaultEditingTranslationUnitOptions",
        "()I",
        FunctionDescriptor.of(C_INT)
    );
    public static final int clang_defaultEditingTranslationUnitOptions () {
        try {
            return (int)clang_defaultEditingTranslationUnitOptions.invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_parseTranslationUnit = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_parseTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT,
            C_INT
        )
    );
    public static final MemoryAddress clang_parseTranslationUnit (MemoryAddress CIdx, MemoryAddress source_filename, MemoryAddress command_line_args, int num_command_line_args, MemoryAddress unsaved_files, int num_unsaved_files, int options) {
        try {
            return (MemoryAddress)clang_parseTranslationUnit.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_parseTranslationUnit2 = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_parseTranslationUnit2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT,
            C_INT,
            C_POINTER
        )
    );
    public static final int clang_parseTranslationUnit2 (MemoryAddress CIdx, MemoryAddress source_filename, MemoryAddress command_line_args, int num_command_line_args, MemoryAddress unsaved_files, int num_unsaved_files, int options, MemoryAddress out_TU) {
        try {
            return (int)clang_parseTranslationUnit2.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_parseTranslationUnit2FullArgv = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_parseTranslationUnit2FullArgv",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT,
            C_INT,
            C_POINTER
        )
    );
    public static final int clang_parseTranslationUnit2FullArgv (MemoryAddress CIdx, MemoryAddress source_filename, MemoryAddress command_line_args, int num_command_line_args, MemoryAddress unsaved_files, int num_unsaved_files, int options, MemoryAddress out_TU) {
        try {
            return (int)clang_parseTranslationUnit2FullArgv.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXSaveTranslationUnit_None = (int)0L;
    public static final MethodHandle clang_defaultSaveOptions = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_defaultSaveOptions",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_defaultSaveOptions (MemoryAddress TU) {
        try {
            return (int)clang_defaultSaveOptions.invokeExact(TU);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXSaveError_None = (int)0L;
    public static final int CXSaveError_Unknown = (int)1L;
    public static final int CXSaveError_TranslationErrors = (int)2L;
    public static final int CXSaveError_InvalidTU = (int)3L;
    public static final MethodHandle clang_saveTranslationUnit = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_saveTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        )
    );
    public static final int clang_saveTranslationUnit (MemoryAddress TU, MemoryAddress FileName, int options) {
        try {
            return (int)clang_saveTranslationUnit.invokeExact(TU, FileName, options);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_suspendTranslationUnit = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_suspendTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_suspendTranslationUnit (MemoryAddress x0) {
        try {
            return (int)clang_suspendTranslationUnit.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_disposeTranslationUnit = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_disposeTranslationUnit (MemoryAddress x0) {
        try {
            clang_disposeTranslationUnit.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXReparse_None = (int)0L;
    public static final MethodHandle clang_defaultReparseOptions = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_defaultReparseOptions",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_defaultReparseOptions (MemoryAddress TU) {
        try {
            return (int)clang_defaultReparseOptions.invokeExact(TU);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_reparseTranslationUnit = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_reparseTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT
        )
    );
    public static final int clang_reparseTranslationUnit (MemoryAddress TU, int num_unsaved_files, MemoryAddress unsaved_files, int options) {
        try {
            return (int)clang_reparseTranslationUnit.invokeExact(TU, num_unsaved_files, unsaved_files, options);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXTUResourceUsage_AST = (int)1L;
    public static final int CXTUResourceUsage_Identifiers = (int)2L;
    public static final int CXTUResourceUsage_Selectors = (int)3L;
    public static final int CXTUResourceUsage_GlobalCompletionResults = (int)4L;
    public static final int CXTUResourceUsage_SourceManagerContentCache = (int)5L;
    public static final int CXTUResourceUsage_AST_SideTables = (int)6L;
    public static final int CXTUResourceUsage_SourceManager_Membuffer_Malloc = (int)7L;
    public static final int CXTUResourceUsage_SourceManager_Membuffer_MMap = (int)8L;
    public static final int CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc = (int)9L;
    public static final int CXTUResourceUsage_ExternalASTSource_Membuffer_MMap = (int)10L;
    public static final int CXTUResourceUsage_Preprocessor = (int)11L;
    public static final int CXTUResourceUsage_PreprocessingRecord = (int)12L;
    public static final int CXTUResourceUsage_SourceManager_DataStructures = (int)13L;
    public static final int CXTUResourceUsage_Preprocessor_HeaderSearch = (int)14L;
    public static final int CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN = (int)1L;
    public static final int CXTUResourceUsage_MEMORY_IN_BYTES_END = (int)14L;
    public static final int CXTUResourceUsage_First = (int)1L;
    public static final int CXTUResourceUsage_Last = (int)14L;
    public static final MethodHandle clang_getTUResourceUsageName = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTUResourceUsageName",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_INT
        )
    );
    public static final MemoryAddress clang_getTUResourceUsageName (int kind) {
        try {
            return (MemoryAddress)clang_getTUResourceUsageName.invokeExact(kind);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MemoryLayout CXTUResourceUsageEntry$LAYOUT = MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("amount")
    ).withName("CXTUResourceUsageEntry");
    public static final VarHandle CXTUResourceUsageEntry$kind = CXTUResourceUsageEntry$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
    public static final int CXTUResourceUsageEntry$kind$get(MemorySegment seg) {
        return (int)CXTUResourceUsageEntry$kind.get(seg.baseAddress());
    }
    public static final void CXTUResourceUsageEntry$kind$set(MemorySegment seg, int x) {
        CXTUResourceUsageEntry$kind.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXTUResourceUsageEntry$amount = CXTUResourceUsageEntry$LAYOUT.varHandle(long.class, PathElement.groupElement("amount"));
    public static final long CXTUResourceUsageEntry$amount$get(MemorySegment seg) {
        return (long)CXTUResourceUsageEntry$amount.get(seg.baseAddress());
    }
    public static final void CXTUResourceUsageEntry$amount$set(MemorySegment seg, long x) {
        CXTUResourceUsageEntry$amount.set(seg.baseAddress(), x);
    }
    public static final MemoryLayout CXTUResourceUsage$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("data"),
        C_INT.withName("numEntries"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("entries")
    ).withName("CXTUResourceUsage");
    public static final VarHandle CXTUResourceUsage$numEntries = CXTUResourceUsage$LAYOUT.varHandle(int.class, PathElement.groupElement("numEntries"));
    public static final int CXTUResourceUsage$numEntries$get(MemorySegment seg) {
        return (int)CXTUResourceUsage$numEntries.get(seg.baseAddress());
    }
    public static final void CXTUResourceUsage$numEntries$set(MemorySegment seg, int x) {
        CXTUResourceUsage$numEntries.set(seg.baseAddress(), x);
    }
    public static final MethodHandle clang_getCXTUResourceUsage = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCXTUResourceUsage",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("numEntries"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("entries")
        ).withName("CXTUResourceUsage"),
            C_POINTER
        )
    );
    public static final MemorySegment clang_getCXTUResourceUsage (MemoryAddress TU) {
        try {
            return (MemorySegment)clang_getCXTUResourceUsage.invokeExact(TU);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_disposeCXTUResourceUsage = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeCXTUResourceUsage",
        "(Ljdk/incubator/foreign/MemorySegment;)V",
        FunctionDescriptor.ofVoid(
            MemoryLayout.ofStruct(
                C_POINTER.withName("data"),
                C_INT.withName("numEntries"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("entries")
            ).withName("CXTUResourceUsage")
        )
    );
    public static final void clang_disposeCXTUResourceUsage (MemorySegment usage) {
        try {
            clang_disposeCXTUResourceUsage.invokeExact(usage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getTranslationUnitTargetInfo = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTranslationUnitTargetInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_getTranslationUnitTargetInfo (MemoryAddress CTUnit) {
        try {
            return (MemoryAddress)clang_getTranslationUnitTargetInfo.invokeExact(CTUnit);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_TargetInfo_dispose = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_TargetInfo_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_TargetInfo_dispose (MemoryAddress Info) {
        try {
            clang_TargetInfo_dispose.invokeExact(Info);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_TargetInfo_getTriple = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_TargetInfo_getTriple",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_TargetInfo_getTriple (MemoryAddress Info) {
        try {
            return (MemorySegment)clang_TargetInfo_getTriple.invokeExact(Info);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_TargetInfo_getPointerWidth = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_TargetInfo_getPointerWidth",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_TargetInfo_getPointerWidth (MemoryAddress Info) {
        try {
            return (int)clang_TargetInfo_getPointerWidth.invokeExact(Info);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXCursor_UnexposedDecl = (int)1L;
    public static final int CXCursor_StructDecl = (int)2L;
    public static final int CXCursor_UnionDecl = (int)3L;
    public static final int CXCursor_ClassDecl = (int)4L;
    public static final int CXCursor_EnumDecl = (int)5L;
    public static final int CXCursor_FieldDecl = (int)6L;
    public static final int CXCursor_EnumConstantDecl = (int)7L;
    public static final int CXCursor_FunctionDecl = (int)8L;
    public static final int CXCursor_VarDecl = (int)9L;
    public static final int CXCursor_ParmDecl = (int)10L;
    public static final int CXCursor_ObjCInterfaceDecl = (int)11L;
    public static final int CXCursor_ObjCCategoryDecl = (int)12L;
    public static final int CXCursor_ObjCProtocolDecl = (int)13L;
    public static final int CXCursor_ObjCPropertyDecl = (int)14L;
    public static final int CXCursor_ObjCIvarDecl = (int)15L;
    public static final int CXCursor_ObjCInstanceMethodDecl = (int)16L;
    public static final int CXCursor_ObjCClassMethodDecl = (int)17L;
    public static final int CXCursor_ObjCImplementationDecl = (int)18L;
    public static final int CXCursor_ObjCCategoryImplDecl = (int)19L;
    public static final int CXCursor_TypedefDecl = (int)20L;
    public static final int CXCursor_CXXMethod = (int)21L;
    public static final int CXCursor_Namespace = (int)22L;
    public static final int CXCursor_LinkageSpec = (int)23L;
    public static final int CXCursor_Constructor = (int)24L;
    public static final int CXCursor_Destructor = (int)25L;
    public static final int CXCursor_ConversionFunction = (int)26L;
    public static final int CXCursor_TemplateTypeParameter = (int)27L;
    public static final int CXCursor_NonTypeTemplateParameter = (int)28L;
    public static final int CXCursor_TemplateTemplateParameter = (int)29L;
    public static final int CXCursor_FunctionTemplate = (int)30L;
    public static final int CXCursor_ClassTemplate = (int)31L;
    public static final int CXCursor_ClassTemplatePartialSpecialization = (int)32L;
    public static final int CXCursor_NamespaceAlias = (int)33L;
    public static final int CXCursor_UsingDirective = (int)34L;
    public static final int CXCursor_UsingDeclaration = (int)35L;
    public static final int CXCursor_TypeAliasDecl = (int)36L;
    public static final int CXCursor_ObjCSynthesizeDecl = (int)37L;
    public static final int CXCursor_ObjCDynamicDecl = (int)38L;
    public static final int CXCursor_CXXAccessSpecifier = (int)39L;
    public static final int CXCursor_FirstDecl = (int)1L;
    public static final int CXCursor_LastDecl = (int)39L;
    public static final int CXCursor_FirstRef = (int)40L;
    public static final int CXCursor_ObjCSuperClassRef = (int)40L;
    public static final int CXCursor_ObjCProtocolRef = (int)41L;
    public static final int CXCursor_ObjCClassRef = (int)42L;
    public static final int CXCursor_TypeRef = (int)43L;
    public static final int CXCursor_CXXBaseSpecifier = (int)44L;
    public static final int CXCursor_TemplateRef = (int)45L;
    public static final int CXCursor_NamespaceRef = (int)46L;
    public static final int CXCursor_MemberRef = (int)47L;
    public static final int CXCursor_LabelRef = (int)48L;
    public static final int CXCursor_OverloadedDeclRef = (int)49L;
    public static final int CXCursor_VariableRef = (int)50L;
    public static final int CXCursor_LastRef = (int)50L;
    public static final int CXCursor_FirstInvalid = (int)70L;
    public static final int CXCursor_InvalidFile = (int)70L;
    public static final int CXCursor_NoDeclFound = (int)71L;
    public static final int CXCursor_NotImplemented = (int)72L;
    public static final int CXCursor_InvalidCode = (int)73L;
    public static final int CXCursor_LastInvalid = (int)73L;
    public static final int CXCursor_FirstExpr = (int)100L;
    public static final int CXCursor_UnexposedExpr = (int)100L;
    public static final int CXCursor_DeclRefExpr = (int)101L;
    public static final int CXCursor_MemberRefExpr = (int)102L;
    public static final int CXCursor_CallExpr = (int)103L;
    public static final int CXCursor_ObjCMessageExpr = (int)104L;
    public static final int CXCursor_BlockExpr = (int)105L;
    public static final int CXCursor_IntegerLiteral = (int)106L;
    public static final int CXCursor_FloatingLiteral = (int)107L;
    public static final int CXCursor_ImaginaryLiteral = (int)108L;
    public static final int CXCursor_StringLiteral = (int)109L;
    public static final int CXCursor_CharacterLiteral = (int)110L;
    public static final int CXCursor_ParenExpr = (int)111L;
    public static final int CXCursor_UnaryOperator = (int)112L;
    public static final int CXCursor_ArraySubscriptExpr = (int)113L;
    public static final int CXCursor_BinaryOperator = (int)114L;
    public static final int CXCursor_CompoundAssignOperator = (int)115L;
    public static final int CXCursor_ConditionalOperator = (int)116L;
    public static final int CXCursor_CStyleCastExpr = (int)117L;
    public static final int CXCursor_CompoundLiteralExpr = (int)118L;
    public static final int CXCursor_InitListExpr = (int)119L;
    public static final int CXCursor_AddrLabelExpr = (int)120L;
    public static final int CXCursor_StmtExpr = (int)121L;
    public static final int CXCursor_GenericSelectionExpr = (int)122L;
    public static final int CXCursor_GNUNullExpr = (int)123L;
    public static final int CXCursor_CXXStaticCastExpr = (int)124L;
    public static final int CXCursor_CXXDynamicCastExpr = (int)125L;
    public static final int CXCursor_CXXReinterpretCastExpr = (int)126L;
    public static final int CXCursor_CXXConstCastExpr = (int)127L;
    public static final int CXCursor_CXXFunctionalCastExpr = (int)128L;
    public static final int CXCursor_CXXTypeidExpr = (int)129L;
    public static final int CXCursor_CXXBoolLiteralExpr = (int)130L;
    public static final int CXCursor_CXXNullPtrLiteralExpr = (int)131L;
    public static final int CXCursor_CXXThisExpr = (int)132L;
    public static final int CXCursor_CXXThrowExpr = (int)133L;
    public static final int CXCursor_CXXNewExpr = (int)134L;
    public static final int CXCursor_CXXDeleteExpr = (int)135L;
    public static final int CXCursor_UnaryExpr = (int)136L;
    public static final int CXCursor_ObjCStringLiteral = (int)137L;
    public static final int CXCursor_ObjCEncodeExpr = (int)138L;
    public static final int CXCursor_ObjCSelectorExpr = (int)139L;
    public static final int CXCursor_ObjCProtocolExpr = (int)140L;
    public static final int CXCursor_ObjCBridgedCastExpr = (int)141L;
    public static final int CXCursor_PackExpansionExpr = (int)142L;
    public static final int CXCursor_SizeOfPackExpr = (int)143L;
    public static final int CXCursor_LambdaExpr = (int)144L;
    public static final int CXCursor_ObjCBoolLiteralExpr = (int)145L;
    public static final int CXCursor_ObjCSelfExpr = (int)146L;
    public static final int CXCursor_OMPArraySectionExpr = (int)147L;
    public static final int CXCursor_ObjCAvailabilityCheckExpr = (int)148L;
    public static final int CXCursor_FixedPointLiteral = (int)149L;
    public static final int CXCursor_LastExpr = (int)149L;
    public static final int CXCursor_FirstStmt = (int)200L;
    public static final int CXCursor_UnexposedStmt = (int)200L;
    public static final int CXCursor_LabelStmt = (int)201L;
    public static final int CXCursor_CompoundStmt = (int)202L;
    public static final int CXCursor_CaseStmt = (int)203L;
    public static final int CXCursor_DefaultStmt = (int)204L;
    public static final int CXCursor_IfStmt = (int)205L;
    public static final int CXCursor_SwitchStmt = (int)206L;
    public static final int CXCursor_WhileStmt = (int)207L;
    public static final int CXCursor_DoStmt = (int)208L;
    public static final int CXCursor_ForStmt = (int)209L;
    public static final int CXCursor_GotoStmt = (int)210L;
    public static final int CXCursor_IndirectGotoStmt = (int)211L;
    public static final int CXCursor_ContinueStmt = (int)212L;
    public static final int CXCursor_BreakStmt = (int)213L;
    public static final int CXCursor_ReturnStmt = (int)214L;
    public static final int CXCursor_GCCAsmStmt = (int)215L;
    public static final int CXCursor_AsmStmt = (int)215L;
    public static final int CXCursor_ObjCAtTryStmt = (int)216L;
    public static final int CXCursor_ObjCAtCatchStmt = (int)217L;
    public static final int CXCursor_ObjCAtFinallyStmt = (int)218L;
    public static final int CXCursor_ObjCAtThrowStmt = (int)219L;
    public static final int CXCursor_ObjCAtSynchronizedStmt = (int)220L;
    public static final int CXCursor_ObjCAutoreleasePoolStmt = (int)221L;
    public static final int CXCursor_ObjCForCollectionStmt = (int)222L;
    public static final int CXCursor_CXXCatchStmt = (int)223L;
    public static final int CXCursor_CXXTryStmt = (int)224L;
    public static final int CXCursor_CXXForRangeStmt = (int)225L;
    public static final int CXCursor_SEHTryStmt = (int)226L;
    public static final int CXCursor_SEHExceptStmt = (int)227L;
    public static final int CXCursor_SEHFinallyStmt = (int)228L;
    public static final int CXCursor_MSAsmStmt = (int)229L;
    public static final int CXCursor_NullStmt = (int)230L;
    public static final int CXCursor_DeclStmt = (int)231L;
    public static final int CXCursor_OMPParallelDirective = (int)232L;
    public static final int CXCursor_OMPSimdDirective = (int)233L;
    public static final int CXCursor_OMPForDirective = (int)234L;
    public static final int CXCursor_OMPSectionsDirective = (int)235L;
    public static final int CXCursor_OMPSectionDirective = (int)236L;
    public static final int CXCursor_OMPSingleDirective = (int)237L;
    public static final int CXCursor_OMPParallelForDirective = (int)238L;
    public static final int CXCursor_OMPParallelSectionsDirective = (int)239L;
    public static final int CXCursor_OMPTaskDirective = (int)240L;
    public static final int CXCursor_OMPMasterDirective = (int)241L;
    public static final int CXCursor_OMPCriticalDirective = (int)242L;
    public static final int CXCursor_OMPTaskyieldDirective = (int)243L;
    public static final int CXCursor_OMPBarrierDirective = (int)244L;
    public static final int CXCursor_OMPTaskwaitDirective = (int)245L;
    public static final int CXCursor_OMPFlushDirective = (int)246L;
    public static final int CXCursor_SEHLeaveStmt = (int)247L;
    public static final int CXCursor_OMPOrderedDirective = (int)248L;
    public static final int CXCursor_OMPAtomicDirective = (int)249L;
    public static final int CXCursor_OMPForSimdDirective = (int)250L;
    public static final int CXCursor_OMPParallelForSimdDirective = (int)251L;
    public static final int CXCursor_OMPTargetDirective = (int)252L;
    public static final int CXCursor_OMPTeamsDirective = (int)253L;
    public static final int CXCursor_OMPTaskgroupDirective = (int)254L;
    public static final int CXCursor_OMPCancellationPointDirective = (int)255L;
    public static final int CXCursor_OMPCancelDirective = (int)256L;
    public static final int CXCursor_OMPTargetDataDirective = (int)257L;
    public static final int CXCursor_OMPTaskLoopDirective = (int)258L;
    public static final int CXCursor_OMPTaskLoopSimdDirective = (int)259L;
    public static final int CXCursor_OMPDistributeDirective = (int)260L;
    public static final int CXCursor_OMPTargetEnterDataDirective = (int)261L;
    public static final int CXCursor_OMPTargetExitDataDirective = (int)262L;
    public static final int CXCursor_OMPTargetParallelDirective = (int)263L;
    public static final int CXCursor_OMPTargetParallelForDirective = (int)264L;
    public static final int CXCursor_OMPTargetUpdateDirective = (int)265L;
    public static final int CXCursor_OMPDistributeParallelForDirective = (int)266L;
    public static final int CXCursor_OMPDistributeParallelForSimdDirective = (int)267L;
    public static final int CXCursor_OMPDistributeSimdDirective = (int)268L;
    public static final int CXCursor_OMPTargetParallelForSimdDirective = (int)269L;
    public static final int CXCursor_OMPTargetSimdDirective = (int)270L;
    public static final int CXCursor_OMPTeamsDistributeDirective = (int)271L;
    public static final int CXCursor_OMPTeamsDistributeSimdDirective = (int)272L;
    public static final int CXCursor_OMPTeamsDistributeParallelForSimdDirective = (int)273L;
    public static final int CXCursor_OMPTeamsDistributeParallelForDirective = (int)274L;
    public static final int CXCursor_OMPTargetTeamsDirective = (int)275L;
    public static final int CXCursor_OMPTargetTeamsDistributeDirective = (int)276L;
    public static final int CXCursor_OMPTargetTeamsDistributeParallelForDirective = (int)277L;
    public static final int CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective = (int)278L;
    public static final int CXCursor_OMPTargetTeamsDistributeSimdDirective = (int)279L;
    public static final int CXCursor_BuiltinBitCastExpr = (int)280L;
    public static final int CXCursor_LastStmt = (int)280L;
    public static final int CXCursor_TranslationUnit = (int)300L;
    public static final int CXCursor_FirstAttr = (int)400L;
    public static final int CXCursor_UnexposedAttr = (int)400L;
    public static final int CXCursor_IBActionAttr = (int)401L;
    public static final int CXCursor_IBOutletAttr = (int)402L;
    public static final int CXCursor_IBOutletCollectionAttr = (int)403L;
    public static final int CXCursor_CXXFinalAttr = (int)404L;
    public static final int CXCursor_CXXOverrideAttr = (int)405L;
    public static final int CXCursor_AnnotateAttr = (int)406L;
    public static final int CXCursor_AsmLabelAttr = (int)407L;
    public static final int CXCursor_PackedAttr = (int)408L;
    public static final int CXCursor_PureAttr = (int)409L;
    public static final int CXCursor_ConstAttr = (int)410L;
    public static final int CXCursor_NoDuplicateAttr = (int)411L;
    public static final int CXCursor_CUDAConstantAttr = (int)412L;
    public static final int CXCursor_CUDADeviceAttr = (int)413L;
    public static final int CXCursor_CUDAGlobalAttr = (int)414L;
    public static final int CXCursor_CUDAHostAttr = (int)415L;
    public static final int CXCursor_CUDASharedAttr = (int)416L;
    public static final int CXCursor_VisibilityAttr = (int)417L;
    public static final int CXCursor_DLLExport = (int)418L;
    public static final int CXCursor_DLLImport = (int)419L;
    public static final int CXCursor_NSReturnsRetained = (int)420L;
    public static final int CXCursor_NSReturnsNotRetained = (int)421L;
    public static final int CXCursor_NSReturnsAutoreleased = (int)422L;
    public static final int CXCursor_NSConsumesSelf = (int)423L;
    public static final int CXCursor_NSConsumed = (int)424L;
    public static final int CXCursor_ObjCException = (int)425L;
    public static final int CXCursor_ObjCNSObject = (int)426L;
    public static final int CXCursor_ObjCIndependentClass = (int)427L;
    public static final int CXCursor_ObjCPreciseLifetime = (int)428L;
    public static final int CXCursor_ObjCReturnsInnerPointer = (int)429L;
    public static final int CXCursor_ObjCRequiresSuper = (int)430L;
    public static final int CXCursor_ObjCRootClass = (int)431L;
    public static final int CXCursor_ObjCSubclassingRestricted = (int)432L;
    public static final int CXCursor_ObjCExplicitProtocolImpl = (int)433L;
    public static final int CXCursor_ObjCDesignatedInitializer = (int)434L;
    public static final int CXCursor_ObjCRuntimeVisible = (int)435L;
    public static final int CXCursor_ObjCBoxable = (int)436L;
    public static final int CXCursor_FlagEnum = (int)437L;
    public static final int CXCursor_ConvergentAttr = (int)438L;
    public static final int CXCursor_WarnUnusedAttr = (int)439L;
    public static final int CXCursor_WarnUnusedResultAttr = (int)440L;
    public static final int CXCursor_AlignedAttr = (int)441L;
    public static final int CXCursor_LastAttr = (int)441L;
    public static final int CXCursor_PreprocessingDirective = (int)500L;
    public static final int CXCursor_MacroDefinition = (int)501L;
    public static final int CXCursor_MacroExpansion = (int)502L;
    public static final int CXCursor_MacroInstantiation = (int)502L;
    public static final int CXCursor_InclusionDirective = (int)503L;
    public static final int CXCursor_FirstPreprocessing = (int)500L;
    public static final int CXCursor_LastPreprocessing = (int)503L;
    public static final int CXCursor_ModuleImportDecl = (int)600L;
    public static final int CXCursor_TypeAliasTemplateDecl = (int)601L;
    public static final int CXCursor_StaticAssert = (int)602L;
    public static final int CXCursor_FriendDecl = (int)603L;
    public static final int CXCursor_FirstExtraDecl = (int)600L;
    public static final int CXCursor_LastExtraDecl = (int)603L;
    public static final int CXCursor_OverloadCandidate = (int)700L;
    public static final MemoryLayout CXCursor$LAYOUT = MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("xdata"),
        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
    );
    public static final VarHandle CXCursor$kind = CXCursor$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
    public static final int CXCursor$kind$get(MemorySegment seg) {
        return (int)CXCursor$kind.get(seg.baseAddress());
    }
    public static final void CXCursor$kind$set(MemorySegment seg, int x) {
        CXCursor$kind.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXCursor$xdata = CXCursor$LAYOUT.varHandle(int.class, PathElement.groupElement("xdata"));
    public static final int CXCursor$xdata$get(MemorySegment seg) {
        return (int)CXCursor$xdata.get(seg.baseAddress());
    }
    public static final void CXCursor$xdata$set(MemorySegment seg, int x) {
        CXCursor$xdata.set(seg.baseAddress(), x);
    }
    public static final MethodHandle clang_getNullCursor = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNullCursor",
        "()Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ))
    );
    public static final MemorySegment clang_getNullCursor () {
        try {
            return (MemorySegment)clang_getNullCursor.invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getTranslationUnitCursor = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTranslationUnitCursor",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_getTranslationUnitCursor (MemoryAddress x0) {
        try {
            return (MemorySegment)clang_getTranslationUnitCursor.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_equalCursors = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_equalCursors",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_equalCursors (MemorySegment x0, MemorySegment x1) {
        try {
            return (int)clang_equalCursors.invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_isNull = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isNull",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_isNull (MemorySegment cursor) {
        try {
            return (int)clang_Cursor_isNull.invokeExact(cursor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_hashCursor = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_hashCursor",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_hashCursor (MemorySegment x0) {
        try {
            return (int)clang_hashCursor.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorKind = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorKind",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_getCursorKind (MemorySegment x0) {
        try {
            return (int)clang_getCursorKind.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isDeclaration = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isDeclaration",
        "(I)I",
        FunctionDescriptor.of(C_INT,
            C_INT
        )
    );
    public static final int clang_isDeclaration (int x0) {
        try {
            return (int)clang_isDeclaration.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isInvalidDeclaration = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isInvalidDeclaration",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_isInvalidDeclaration (MemorySegment x0) {
        try {
            return (int)clang_isInvalidDeclaration.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isReference = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isReference",
        "(I)I",
        FunctionDescriptor.of(C_INT,
            C_INT
        )
    );
    public static final int clang_isReference (int x0) {
        try {
            return (int)clang_isReference.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isExpression = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isExpression",
        "(I)I",
        FunctionDescriptor.of(C_INT,
            C_INT
        )
    );
    public static final int clang_isExpression (int x0) {
        try {
            return (int)clang_isExpression.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isStatement = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isStatement",
        "(I)I",
        FunctionDescriptor.of(C_INT,
            C_INT
        )
    );
    public static final int clang_isStatement (int x0) {
        try {
            return (int)clang_isStatement.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isAttribute = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isAttribute",
        "(I)I",
        FunctionDescriptor.of(C_INT,
            C_INT
        )
    );
    public static final int clang_isAttribute (int x0) {
        try {
            return (int)clang_isAttribute.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_hasAttrs = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_hasAttrs",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_hasAttrs (MemorySegment C) {
        try {
            return (int)clang_Cursor_hasAttrs.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isInvalid = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isInvalid",
        "(I)I",
        FunctionDescriptor.of(C_INT,
            C_INT
        )
    );
    public static final int clang_isInvalid (int x0) {
        try {
            return (int)clang_isInvalid.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isTranslationUnit = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isTranslationUnit",
        "(I)I",
        FunctionDescriptor.of(C_INT,
            C_INT
        )
    );
    public static final int clang_isTranslationUnit (int x0) {
        try {
            return (int)clang_isTranslationUnit.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isPreprocessing = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isPreprocessing",
        "(I)I",
        FunctionDescriptor.of(C_INT,
            C_INT
        )
    );
    public static final int clang_isPreprocessing (int x0) {
        try {
            return (int)clang_isPreprocessing.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isUnexposed = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isUnexposed",
        "(I)I",
        FunctionDescriptor.of(C_INT,
            C_INT
        )
    );
    public static final int clang_isUnexposed (int x0) {
        try {
            return (int)clang_isUnexposed.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXLinkage_Invalid = (int)0L;
    public static final int CXLinkage_NoLinkage = (int)1L;
    public static final int CXLinkage_Internal = (int)2L;
    public static final int CXLinkage_UniqueExternal = (int)3L;
    public static final int CXLinkage_External = (int)4L;
    public static final MethodHandle clang_getCursorLinkage = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorLinkage",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_getCursorLinkage (MemorySegment cursor) {
        try {
            return (int)clang_getCursorLinkage.invokeExact(cursor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXVisibility_Invalid = (int)0L;
    public static final int CXVisibility_Hidden = (int)1L;
    public static final int CXVisibility_Protected = (int)2L;
    public static final int CXVisibility_Default = (int)3L;
    public static final MethodHandle clang_getCursorVisibility = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorVisibility",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_getCursorVisibility (MemorySegment cursor) {
        try {
            return (int)clang_getCursorVisibility.invokeExact(cursor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorAvailability = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorAvailability",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_getCursorAvailability (MemorySegment cursor) {
        try {
            return (int)clang_getCursorAvailability.invokeExact(cursor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MemoryLayout CXPlatformAvailability$LAYOUT = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("Platform"),
        MemoryLayout.ofStruct(
            C_INT.withName("Major"),
            C_INT.withName("Minor"),
            C_INT.withName("Subminor")
        ).withName("Introduced"),
        MemoryLayout.ofStruct(
            C_INT.withName("Major"),
            C_INT.withName("Minor"),
            C_INT.withName("Subminor")
        ).withName("Deprecated"),
        MemoryLayout.ofStruct(
            C_INT.withName("Major"),
            C_INT.withName("Minor"),
            C_INT.withName("Subminor")
        ).withName("Obsoleted"),
        C_INT.withName("Unavailable"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("Message")
    ).withName("CXPlatformAvailability");
    public static final VarHandle CXPlatformAvailability$Unavailable = CXPlatformAvailability$LAYOUT.varHandle(int.class, PathElement.groupElement("Unavailable"));
    public static final int CXPlatformAvailability$Unavailable$get(MemorySegment seg) {
        return (int)CXPlatformAvailability$Unavailable.get(seg.baseAddress());
    }
    public static final void CXPlatformAvailability$Unavailable$set(MemorySegment seg, int x) {
        CXPlatformAvailability$Unavailable.set(seg.baseAddress(), x);
    }
    public static final MethodHandle clang_getCursorPlatformAvailability = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorPlatformAvailability",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT
        )
    );
    public static final int clang_getCursorPlatformAvailability (MemorySegment cursor, MemoryAddress always_deprecated, MemoryAddress deprecated_message, MemoryAddress always_unavailable, MemoryAddress unavailable_message, MemoryAddress availability, int availability_size) {
        try {
            return (int)clang_getCursorPlatformAvailability.invokeExact(cursor, always_deprecated, deprecated_message, always_unavailable, unavailable_message, availability, availability_size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_disposeCXPlatformAvailability = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeCXPlatformAvailability",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_disposeCXPlatformAvailability (MemoryAddress availability) {
        try {
            clang_disposeCXPlatformAvailability.invokeExact(availability);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXLanguage_Invalid = (int)0L;
    public static final int CXLanguage_C = (int)1L;
    public static final int CXLanguage_ObjC = (int)2L;
    public static final int CXLanguage_CPlusPlus = (int)3L;
    public static final MethodHandle clang_getCursorLanguage = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorLanguage",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_getCursorLanguage (MemorySegment cursor) {
        try {
            return (int)clang_getCursorLanguage.invokeExact(cursor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXTLS_None = (int)0L;
    public static final int CXTLS_Dynamic = (int)1L;
    public static final int CXTLS_Static = (int)2L;
    public static final MethodHandle clang_getCursorTLSKind = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorTLSKind",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_getCursorTLSKind (MemorySegment cursor) {
        try {
            return (int)clang_getCursorTLSKind.invokeExact(cursor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getTranslationUnit = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getTranslationUnit",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemoryAddress clang_Cursor_getTranslationUnit (MemorySegment x0) {
        try {
            return (MemoryAddress)clang_Cursor_getTranslationUnit.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_createCXCursorSet = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_createCXCursorSet",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER)
    );
    public static final MemoryAddress clang_createCXCursorSet () {
        try {
            return (MemoryAddress)clang_createCXCursorSet.invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_disposeCXCursorSet = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeCXCursorSet",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_disposeCXCursorSet (MemoryAddress cset) {
        try {
            clang_disposeCXCursorSet.invokeExact(cset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_CXCursorSet_contains = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXCursorSet_contains",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_CXCursorSet_contains (MemoryAddress cset, MemorySegment cursor) {
        try {
            return (int)clang_CXCursorSet_contains.invokeExact(cset, cursor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_CXCursorSet_insert = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXCursorSet_insert",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_CXCursorSet_insert (MemoryAddress cset, MemorySegment cursor) {
        try {
            return (int)clang_CXCursorSet_insert.invokeExact(cset, cursor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorSemanticParent = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorSemanticParent",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getCursorSemanticParent (MemorySegment cursor) {
        try {
            return (MemorySegment)clang_getCursorSemanticParent.invokeExact(cursor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorLexicalParent = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorLexicalParent",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getCursorLexicalParent (MemorySegment cursor) {
        try {
            return (MemorySegment)clang_getCursorLexicalParent.invokeExact(cursor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getOverriddenCursors = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getOverriddenCursors",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_POINTER,
            C_POINTER
        )
    );
    public static final void clang_getOverriddenCursors (MemorySegment cursor, MemoryAddress overridden, MemoryAddress num_overridden) {
        try {
            clang_getOverriddenCursors.invokeExact(cursor, overridden, num_overridden);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_disposeOverriddenCursors = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeOverriddenCursors",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_disposeOverriddenCursors (MemoryAddress overridden) {
        try {
            clang_disposeOverriddenCursors.invokeExact(overridden);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getIncludedFile = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getIncludedFile",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemoryAddress clang_getIncludedFile (MemorySegment cursor) {
        try {
            return (MemoryAddress)clang_getIncludedFile.invokeExact(cursor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursor = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursor",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
            C_POINTER,
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.ofPaddingBits(32)
            )
        )
    );
    public static final MemorySegment clang_getCursor (MemoryAddress x0, MemorySegment x1) {
        try {
            return (MemorySegment)clang_getCursor.invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorLocation = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorLocation",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getCursorLocation (MemorySegment x0) {
        try {
            return (MemorySegment)clang_getCursorLocation.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorExtent = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorExtent",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getCursorExtent (MemorySegment x0) {
        try {
            return (MemorySegment)clang_getCursorExtent.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXType_Invalid = (int)0L;
    public static final int CXType_Unexposed = (int)1L;
    public static final int CXType_Void = (int)2L;
    public static final int CXType_Bool = (int)3L;
    public static final int CXType_Char_U = (int)4L;
    public static final int CXType_UChar = (int)5L;
    public static final int CXType_Char16 = (int)6L;
    public static final int CXType_Char32 = (int)7L;
    public static final int CXType_UShort = (int)8L;
    public static final int CXType_UInt = (int)9L;
    public static final int CXType_ULong = (int)10L;
    public static final int CXType_ULongLong = (int)11L;
    public static final int CXType_UInt128 = (int)12L;
    public static final int CXType_Char_S = (int)13L;
    public static final int CXType_SChar = (int)14L;
    public static final int CXType_WChar = (int)15L;
    public static final int CXType_Short = (int)16L;
    public static final int CXType_Int = (int)17L;
    public static final int CXType_Long = (int)18L;
    public static final int CXType_LongLong = (int)19L;
    public static final int CXType_Int128 = (int)20L;
    public static final int CXType_Float = (int)21L;
    public static final int CXType_Double = (int)22L;
    public static final int CXType_LongDouble = (int)23L;
    public static final int CXType_NullPtr = (int)24L;
    public static final int CXType_Overload = (int)25L;
    public static final int CXType_Dependent = (int)26L;
    public static final int CXType_ObjCId = (int)27L;
    public static final int CXType_ObjCClass = (int)28L;
    public static final int CXType_ObjCSel = (int)29L;
    public static final int CXType_Float128 = (int)30L;
    public static final int CXType_Half = (int)31L;
    public static final int CXType_Float16 = (int)32L;
    public static final int CXType_ShortAccum = (int)33L;
    public static final int CXType_Accum = (int)34L;
    public static final int CXType_LongAccum = (int)35L;
    public static final int CXType_UShortAccum = (int)36L;
    public static final int CXType_UAccum = (int)37L;
    public static final int CXType_ULongAccum = (int)38L;
    public static final int CXType_FirstBuiltin = (int)2L;
    public static final int CXType_LastBuiltin = (int)38L;
    public static final int CXType_Complex = (int)100L;
    public static final int CXType_Pointer = (int)101L;
    public static final int CXType_BlockPointer = (int)102L;
    public static final int CXType_LValueReference = (int)103L;
    public static final int CXType_RValueReference = (int)104L;
    public static final int CXType_Record = (int)105L;
    public static final int CXType_Enum = (int)106L;
    public static final int CXType_Typedef = (int)107L;
    public static final int CXType_ObjCInterface = (int)108L;
    public static final int CXType_ObjCObjectPointer = (int)109L;
    public static final int CXType_FunctionNoProto = (int)110L;
    public static final int CXType_FunctionProto = (int)111L;
    public static final int CXType_ConstantArray = (int)112L;
    public static final int CXType_Vector = (int)113L;
    public static final int CXType_IncompleteArray = (int)114L;
    public static final int CXType_VariableArray = (int)115L;
    public static final int CXType_DependentSizedArray = (int)116L;
    public static final int CXType_MemberPointer = (int)117L;
    public static final int CXType_Auto = (int)118L;
    public static final int CXType_Elaborated = (int)119L;
    public static final int CXType_Pipe = (int)120L;
    public static final int CXType_OCLImage1dRO = (int)121L;
    public static final int CXType_OCLImage1dArrayRO = (int)122L;
    public static final int CXType_OCLImage1dBufferRO = (int)123L;
    public static final int CXType_OCLImage2dRO = (int)124L;
    public static final int CXType_OCLImage2dArrayRO = (int)125L;
    public static final int CXType_OCLImage2dDepthRO = (int)126L;
    public static final int CXType_OCLImage2dArrayDepthRO = (int)127L;
    public static final int CXType_OCLImage2dMSAARO = (int)128L;
    public static final int CXType_OCLImage2dArrayMSAARO = (int)129L;
    public static final int CXType_OCLImage2dMSAADepthRO = (int)130L;
    public static final int CXType_OCLImage2dArrayMSAADepthRO = (int)131L;
    public static final int CXType_OCLImage3dRO = (int)132L;
    public static final int CXType_OCLImage1dWO = (int)133L;
    public static final int CXType_OCLImage1dArrayWO = (int)134L;
    public static final int CXType_OCLImage1dBufferWO = (int)135L;
    public static final int CXType_OCLImage2dWO = (int)136L;
    public static final int CXType_OCLImage2dArrayWO = (int)137L;
    public static final int CXType_OCLImage2dDepthWO = (int)138L;
    public static final int CXType_OCLImage2dArrayDepthWO = (int)139L;
    public static final int CXType_OCLImage2dMSAAWO = (int)140L;
    public static final int CXType_OCLImage2dArrayMSAAWO = (int)141L;
    public static final int CXType_OCLImage2dMSAADepthWO = (int)142L;
    public static final int CXType_OCLImage2dArrayMSAADepthWO = (int)143L;
    public static final int CXType_OCLImage3dWO = (int)144L;
    public static final int CXType_OCLImage1dRW = (int)145L;
    public static final int CXType_OCLImage1dArrayRW = (int)146L;
    public static final int CXType_OCLImage1dBufferRW = (int)147L;
    public static final int CXType_OCLImage2dRW = (int)148L;
    public static final int CXType_OCLImage2dArrayRW = (int)149L;
    public static final int CXType_OCLImage2dDepthRW = (int)150L;
    public static final int CXType_OCLImage2dArrayDepthRW = (int)151L;
    public static final int CXType_OCLImage2dMSAARW = (int)152L;
    public static final int CXType_OCLImage2dArrayMSAARW = (int)153L;
    public static final int CXType_OCLImage2dMSAADepthRW = (int)154L;
    public static final int CXType_OCLImage2dArrayMSAADepthRW = (int)155L;
    public static final int CXType_OCLImage3dRW = (int)156L;
    public static final int CXType_OCLSampler = (int)157L;
    public static final int CXType_OCLEvent = (int)158L;
    public static final int CXType_OCLQueue = (int)159L;
    public static final int CXType_OCLReserveID = (int)160L;
    public static final int CXType_ObjCObject = (int)161L;
    public static final int CXType_ObjCTypeParam = (int)162L;
    public static final int CXType_Attributed = (int)163L;
    public static final int CXType_OCLIntelSubgroupAVCMcePayload = (int)164L;
    public static final int CXType_OCLIntelSubgroupAVCImePayload = (int)165L;
    public static final int CXType_OCLIntelSubgroupAVCRefPayload = (int)166L;
    public static final int CXType_OCLIntelSubgroupAVCSicPayload = (int)167L;
    public static final int CXType_OCLIntelSubgroupAVCMceResult = (int)168L;
    public static final int CXType_OCLIntelSubgroupAVCImeResult = (int)169L;
    public static final int CXType_OCLIntelSubgroupAVCRefResult = (int)170L;
    public static final int CXType_OCLIntelSubgroupAVCSicResult = (int)171L;
    public static final int CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout = (int)172L;
    public static final int CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout = (int)173L;
    public static final int CXType_OCLIntelSubgroupAVCImeSingleRefStreamin = (int)174L;
    public static final int CXType_OCLIntelSubgroupAVCImeDualRefStreamin = (int)175L;
    public static final int CXType_ExtVector = (int)176L;
    public static final int CXCallingConv_Default = (int)0L;
    public static final int CXCallingConv_C = (int)1L;
    public static final int CXCallingConv_X86StdCall = (int)2L;
    public static final int CXCallingConv_X86FastCall = (int)3L;
    public static final int CXCallingConv_X86ThisCall = (int)4L;
    public static final int CXCallingConv_X86Pascal = (int)5L;
    public static final int CXCallingConv_AAPCS = (int)6L;
    public static final int CXCallingConv_AAPCS_VFP = (int)7L;
    public static final int CXCallingConv_X86RegCall = (int)8L;
    public static final int CXCallingConv_IntelOclBicc = (int)9L;
    public static final int CXCallingConv_Win64 = (int)10L;
    public static final int CXCallingConv_X86_64Win64 = (int)10L;
    public static final int CXCallingConv_X86_64SysV = (int)11L;
    public static final int CXCallingConv_X86VectorCall = (int)12L;
    public static final int CXCallingConv_Swift = (int)13L;
    public static final int CXCallingConv_PreserveMost = (int)14L;
    public static final int CXCallingConv_PreserveAll = (int)15L;
    public static final int CXCallingConv_AArch64VectorCall = (int)16L;
    public static final int CXCallingConv_Invalid = (int)100L;
    public static final int CXCallingConv_Unexposed = (int)200L;
    public static final MemoryLayout CXType$LAYOUT = MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
    );
    public static final VarHandle CXType$kind = CXType$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
    public static final int CXType$kind$get(MemorySegment seg) {
        return (int)CXType$kind.get(seg.baseAddress());
    }
    public static final void CXType$kind$set(MemorySegment seg, int x) {
        CXType$kind.set(seg.baseAddress(), x);
    }
    public static final MethodHandle clang_getCursorType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getCursorType (MemorySegment C) {
        try {
            return (MemorySegment)clang_getCursorType.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getTypeSpelling = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypeSpelling",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getTypeSpelling (MemorySegment CT) {
        try {
            return (MemorySegment)clang_getTypeSpelling.invokeExact(CT);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getTypedefDeclUnderlyingType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypedefDeclUnderlyingType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getTypedefDeclUnderlyingType (MemorySegment C) {
        try {
            return (MemorySegment)clang_getTypedefDeclUnderlyingType.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getEnumDeclIntegerType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getEnumDeclIntegerType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getEnumDeclIntegerType (MemorySegment C) {
        try {
            return (MemorySegment)clang_getEnumDeclIntegerType.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getEnumConstantDeclValue = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getEnumConstantDeclValue",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        FunctionDescriptor.of(C_LONGLONG,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final long clang_getEnumConstantDeclValue (MemorySegment C) {
        try {
            return (long)clang_getEnumConstantDeclValue.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getEnumConstantDeclUnsignedValue = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getEnumConstantDeclUnsignedValue",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        FunctionDescriptor.of(C_LONGLONG,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final long clang_getEnumConstantDeclUnsignedValue (MemorySegment C) {
        try {
            return (long)clang_getEnumConstantDeclUnsignedValue.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getFieldDeclBitWidth = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFieldDeclBitWidth",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_getFieldDeclBitWidth (MemorySegment C) {
        try {
            return (int)clang_getFieldDeclBitWidth.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getNumArguments = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getNumArguments",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_getNumArguments (MemorySegment C) {
        try {
            return (int)clang_Cursor_getNumArguments.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getArgument = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getArgument",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_INT
        )
    );
    public static final MemorySegment clang_Cursor_getArgument (MemorySegment C, int i) {
        try {
            return (MemorySegment)clang_Cursor_getArgument.invokeExact(C, i);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXTemplateArgumentKind_Null = (int)0L;
    public static final int CXTemplateArgumentKind_Type = (int)1L;
    public static final int CXTemplateArgumentKind_Declaration = (int)2L;
    public static final int CXTemplateArgumentKind_NullPtr = (int)3L;
    public static final int CXTemplateArgumentKind_Integral = (int)4L;
    public static final int CXTemplateArgumentKind_Template = (int)5L;
    public static final int CXTemplateArgumentKind_TemplateExpansion = (int)6L;
    public static final int CXTemplateArgumentKind_Expression = (int)7L;
    public static final int CXTemplateArgumentKind_Pack = (int)8L;
    public static final int CXTemplateArgumentKind_Invalid = (int)9L;
    public static final MethodHandle clang_Cursor_getNumTemplateArguments = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getNumTemplateArguments",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_getNumTemplateArguments (MemorySegment C) {
        try {
            return (int)clang_Cursor_getNumTemplateArguments.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getTemplateArgumentKind = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getTemplateArgumentKind",
        "(Ljdk/incubator/foreign/MemorySegment;I)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_INT
        )
    );
    public static final int clang_Cursor_getTemplateArgumentKind (MemorySegment C, int I) {
        try {
            return (int)clang_Cursor_getTemplateArgumentKind.invokeExact(C, I);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getTemplateArgumentType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getTemplateArgumentType",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_INT
        )
    );
    public static final MemorySegment clang_Cursor_getTemplateArgumentType (MemorySegment C, int I) {
        try {
            return (MemorySegment)clang_Cursor_getTemplateArgumentType.invokeExact(C, I);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getTemplateArgumentValue = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getTemplateArgumentValue",
        "(Ljdk/incubator/foreign/MemorySegment;I)J",
        FunctionDescriptor.of(C_LONGLONG,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_INT
        )
    );
    public static final long clang_Cursor_getTemplateArgumentValue (MemorySegment C, int I) {
        try {
            return (long)clang_Cursor_getTemplateArgumentValue.invokeExact(C, I);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getTemplateArgumentUnsignedValue = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getTemplateArgumentUnsignedValue",
        "(Ljdk/incubator/foreign/MemorySegment;I)J",
        FunctionDescriptor.of(C_LONGLONG,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_INT
        )
    );
    public static final long clang_Cursor_getTemplateArgumentUnsignedValue (MemorySegment C, int I) {
        try {
            return (long)clang_Cursor_getTemplateArgumentUnsignedValue.invokeExact(C, I);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_equalTypes = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_equalTypes",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_equalTypes (MemorySegment A, MemorySegment B) {
        try {
            return (int)clang_equalTypes.invokeExact(A, B);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCanonicalType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCanonicalType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getCanonicalType (MemorySegment T) {
        try {
            return (MemorySegment)clang_getCanonicalType.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isConstQualifiedType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isConstQualifiedType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_isConstQualifiedType (MemorySegment T) {
        try {
            return (int)clang_isConstQualifiedType.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_isMacroFunctionLike = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isMacroFunctionLike",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_isMacroFunctionLike (MemorySegment C) {
        try {
            return (int)clang_Cursor_isMacroFunctionLike.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_isMacroBuiltin = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isMacroBuiltin",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_isMacroBuiltin (MemorySegment C) {
        try {
            return (int)clang_Cursor_isMacroBuiltin.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_isFunctionInlined = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isFunctionInlined",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_isFunctionInlined (MemorySegment C) {
        try {
            return (int)clang_Cursor_isFunctionInlined.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isVolatileQualifiedType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isVolatileQualifiedType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_isVolatileQualifiedType (MemorySegment T) {
        try {
            return (int)clang_isVolatileQualifiedType.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isRestrictQualifiedType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isRestrictQualifiedType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_isRestrictQualifiedType (MemorySegment T) {
        try {
            return (int)clang_isRestrictQualifiedType.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getAddressSpace = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getAddressSpace",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_getAddressSpace (MemorySegment T) {
        try {
            return (int)clang_getAddressSpace.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getTypedefName = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypedefName",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getTypedefName (MemorySegment CT) {
        try {
            return (MemorySegment)clang_getTypedefName.invokeExact(CT);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getPointeeType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getPointeeType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getPointeeType (MemorySegment T) {
        try {
            return (MemorySegment)clang_getPointeeType.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getTypeDeclaration = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypeDeclaration",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getTypeDeclaration (MemorySegment T) {
        try {
            return (MemorySegment)clang_getTypeDeclaration.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDeclObjCTypeEncoding = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDeclObjCTypeEncoding",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getDeclObjCTypeEncoding (MemorySegment C) {
        try {
            return (MemorySegment)clang_getDeclObjCTypeEncoding.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Type_getObjCEncoding = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getObjCEncoding",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_Type_getObjCEncoding (MemorySegment type) {
        try {
            return (MemorySegment)clang_Type_getObjCEncoding.invokeExact(type);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getTypeKindSpelling = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTypeKindSpelling",
        "(I)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_INT
        )
    );
    public static final MemorySegment clang_getTypeKindSpelling (int K) {
        try {
            return (MemorySegment)clang_getTypeKindSpelling.invokeExact(K);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getFunctionTypeCallingConv = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getFunctionTypeCallingConv",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_getFunctionTypeCallingConv (MemorySegment T) {
        try {
            return (int)clang_getFunctionTypeCallingConv.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getResultType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getResultType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getResultType (MemorySegment T) {
        try {
            return (MemorySegment)clang_getResultType.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getExceptionSpecificationType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getExceptionSpecificationType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_getExceptionSpecificationType (MemorySegment T) {
        try {
            return (int)clang_getExceptionSpecificationType.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getNumArgTypes = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumArgTypes",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_getNumArgTypes (MemorySegment T) {
        try {
            return (int)clang_getNumArgTypes.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getArgType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getArgType",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            ),
            C_INT
        )
    );
    public static final MemorySegment clang_getArgType (MemorySegment T, int i) {
        try {
            return (MemorySegment)clang_getArgType.invokeExact(T, i);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Type_getObjCObjectBaseType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getObjCObjectBaseType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_Type_getObjCObjectBaseType (MemorySegment T) {
        try {
            return (MemorySegment)clang_Type_getObjCObjectBaseType.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Type_getNumObjCProtocolRefs = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getNumObjCProtocolRefs",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Type_getNumObjCProtocolRefs (MemorySegment T) {
        try {
            return (int)clang_Type_getNumObjCProtocolRefs.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Type_getObjCProtocolDecl = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getObjCProtocolDecl",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            ),
            C_INT
        )
    );
    public static final MemorySegment clang_Type_getObjCProtocolDecl (MemorySegment T, int i) {
        try {
            return (MemorySegment)clang_Type_getObjCProtocolDecl.invokeExact(T, i);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Type_getNumObjCTypeArgs = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getNumObjCTypeArgs",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Type_getNumObjCTypeArgs (MemorySegment T) {
        try {
            return (int)clang_Type_getNumObjCTypeArgs.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Type_getObjCTypeArg = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getObjCTypeArg",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            ),
            C_INT
        )
    );
    public static final MemorySegment clang_Type_getObjCTypeArg (MemorySegment T, int i) {
        try {
            return (MemorySegment)clang_Type_getObjCTypeArg.invokeExact(T, i);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isFunctionTypeVariadic = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isFunctionTypeVariadic",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_isFunctionTypeVariadic (MemorySegment T) {
        try {
            return (int)clang_isFunctionTypeVariadic.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorResultType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorResultType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getCursorResultType (MemorySegment C) {
        try {
            return (MemorySegment)clang_getCursorResultType.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorExceptionSpecificationType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorExceptionSpecificationType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_getCursorExceptionSpecificationType (MemorySegment C) {
        try {
            return (int)clang_getCursorExceptionSpecificationType.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isPODType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isPODType",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_isPODType (MemorySegment T) {
        try {
            return (int)clang_isPODType.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getElementType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getElementType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getElementType (MemorySegment T) {
        try {
            return (MemorySegment)clang_getElementType.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getNumElements = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumElements",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        FunctionDescriptor.of(C_LONGLONG,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final long clang_getNumElements (MemorySegment T) {
        try {
            return (long)clang_getNumElements.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getArrayElementType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getArrayElementType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getArrayElementType (MemorySegment T) {
        try {
            return (MemorySegment)clang_getArrayElementType.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getArraySize = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getArraySize",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        FunctionDescriptor.of(C_LONGLONG,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final long clang_getArraySize (MemorySegment T) {
        try {
            return (long)clang_getArraySize.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Type_getNamedType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getNamedType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_Type_getNamedType (MemorySegment T) {
        try {
            return (MemorySegment)clang_Type_getNamedType.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Type_isTransparentTagTypedef = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_isTransparentTagTypedef",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Type_isTransparentTagTypedef (MemorySegment T) {
        try {
            return (int)clang_Type_isTransparentTagTypedef.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXTypeNullability_NonNull = (int)0L;
    public static final int CXTypeNullability_Nullable = (int)1L;
    public static final int CXTypeNullability_Unspecified = (int)2L;
    public static final int CXTypeNullability_Invalid = (int)3L;
    public static final MethodHandle clang_Type_getNullability = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getNullability",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Type_getNullability (MemorySegment T) {
        try {
            return (int)clang_Type_getNullability.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXTypeLayoutError_Invalid = (int)-1L;
    public static final int CXTypeLayoutError_Incomplete = (int)-2L;
    public static final int CXTypeLayoutError_Dependent = (int)-3L;
    public static final int CXTypeLayoutError_NotConstantSize = (int)-4L;
    public static final int CXTypeLayoutError_InvalidFieldName = (int)-5L;
    public static final int CXTypeLayoutError_Undeduced = (int)-6L;
    public static final MethodHandle clang_Type_getAlignOf = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getAlignOf",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        FunctionDescriptor.of(C_LONGLONG,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final long clang_Type_getAlignOf (MemorySegment T) {
        try {
            return (long)clang_Type_getAlignOf.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Type_getClassType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getClassType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_Type_getClassType (MemorySegment T) {
        try {
            return (MemorySegment)clang_Type_getClassType.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Type_getSizeOf = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getSizeOf",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        FunctionDescriptor.of(C_LONGLONG,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final long clang_Type_getSizeOf (MemorySegment T) {
        try {
            return (long)clang_Type_getSizeOf.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Type_getOffsetOf = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getOffsetOf",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)J",
        FunctionDescriptor.of(C_LONGLONG,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            ),
            C_POINTER
        )
    );
    public static final long clang_Type_getOffsetOf (MemorySegment T, MemoryAddress S) {
        try {
            return (long)clang_Type_getOffsetOf.invokeExact(T, S);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Type_getModifiedType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getModifiedType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_Type_getModifiedType (MemorySegment T) {
        try {
            return (MemorySegment)clang_Type_getModifiedType.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getOffsetOfField = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getOffsetOfField",
        "(Ljdk/incubator/foreign/MemorySegment;)J",
        FunctionDescriptor.of(C_LONGLONG,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final long clang_Cursor_getOffsetOfField (MemorySegment C) {
        try {
            return (long)clang_Cursor_getOffsetOfField.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_isAnonymous = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isAnonymous",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_isAnonymous (MemorySegment C) {
        try {
            return (int)clang_Cursor_isAnonymous.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_isAnonymousRecordDecl = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isAnonymousRecordDecl",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_isAnonymousRecordDecl (MemorySegment C) {
        try {
            return (int)clang_Cursor_isAnonymousRecordDecl.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_isInlineNamespace = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isInlineNamespace",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_isInlineNamespace (MemorySegment C) {
        try {
            return (int)clang_Cursor_isInlineNamespace.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXRefQualifier_None = (int)0L;
    public static final int CXRefQualifier_LValue = (int)1L;
    public static final int CXRefQualifier_RValue = (int)2L;
    public static final MethodHandle clang_Type_getNumTemplateArguments = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getNumTemplateArguments",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Type_getNumTemplateArguments (MemorySegment T) {
        try {
            return (int)clang_Type_getNumTemplateArguments.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Type_getTemplateArgumentAsType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getTemplateArgumentAsType",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            ),
            C_INT
        )
    );
    public static final MemorySegment clang_Type_getTemplateArgumentAsType (MemorySegment T, int i) {
        try {
            return (MemorySegment)clang_Type_getTemplateArgumentAsType.invokeExact(T, i);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Type_getCXXRefQualifier = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_getCXXRefQualifier",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Type_getCXXRefQualifier (MemorySegment T) {
        try {
            return (int)clang_Type_getCXXRefQualifier.invokeExact(T);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_isBitField = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isBitField",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_isBitField (MemorySegment C) {
        try {
            return (int)clang_Cursor_isBitField.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isVirtualBase = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isVirtualBase",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_isVirtualBase (MemorySegment x0) {
        try {
            return (int)clang_isVirtualBase.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CX_CXXInvalidAccessSpecifier = (int)0L;
    public static final int CX_CXXPublic = (int)1L;
    public static final int CX_CXXProtected = (int)2L;
    public static final int CX_CXXPrivate = (int)3L;
    public static final MethodHandle clang_getCXXAccessSpecifier = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCXXAccessSpecifier",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_getCXXAccessSpecifier (MemorySegment x0) {
        try {
            return (int)clang_getCXXAccessSpecifier.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CX_SC_Invalid = (int)0L;
    public static final int CX_SC_None = (int)1L;
    public static final int CX_SC_Extern = (int)2L;
    public static final int CX_SC_Static = (int)3L;
    public static final int CX_SC_PrivateExtern = (int)4L;
    public static final int CX_SC_OpenCLWorkGroupLocal = (int)5L;
    public static final int CX_SC_Auto = (int)6L;
    public static final int CX_SC_Register = (int)7L;
    public static final MethodHandle clang_Cursor_getStorageClass = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getStorageClass",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_getStorageClass (MemorySegment x0) {
        try {
            return (int)clang_Cursor_getStorageClass.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getNumOverloadedDecls = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumOverloadedDecls",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_getNumOverloadedDecls (MemorySegment cursor) {
        try {
            return (int)clang_getNumOverloadedDecls.invokeExact(cursor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getOverloadedDecl = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getOverloadedDecl",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_INT
        )
    );
    public static final MemorySegment clang_getOverloadedDecl (MemorySegment cursor, int index) {
        try {
            return (MemorySegment)clang_getOverloadedDecl.invokeExact(cursor, index);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getIBOutletCollectionType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getIBOutletCollectionType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getIBOutletCollectionType (MemorySegment x0) {
        try {
            return (MemorySegment)clang_getIBOutletCollectionType.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXChildVisit_Break = (int)0L;
    public static final int CXChildVisit_Continue = (int)1L;
    public static final int CXChildVisit_Recurse = (int)2L;
    public static final MethodHandle clang_visitChildren = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_visitChildren",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_POINTER,
            C_POINTER
        )
    );
    public static final int clang_visitChildren (MemorySegment parent, MemoryAddress visitor, MemoryAddress client_data) {
        try {
            return (int)clang_visitChildren.invokeExact(parent, visitor, client_data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    private static final FunctionDescriptor clang_visitChildren$visitor$DESC = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    public interface clang_visitChildren$visitor {
        int apply(MemorySegment x0, MemorySegment x1, MemoryAddress x2);
    }
    public static final MemoryAddress clang_visitChildren$visitor$make(clang_visitChildren$visitor fi) {
        return RuntimeHelper.upcallStub(clang_visitChildren$visitor.class, fi, clang_visitChildren$visitor$DESC, "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I");
    }
    public static final MethodHandle clang_getCursorUSR = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorUSR",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getCursorUSR (MemorySegment x0) {
        try {
            return (MemorySegment)clang_getCursorUSR.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_constructUSR_ObjCClass = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCClass",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_constructUSR_ObjCClass (MemoryAddress class_name) {
        try {
            return (MemorySegment)clang_constructUSR_ObjCClass.invokeExact(class_name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_constructUSR_ObjCCategory = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCCategory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER,
            C_POINTER
        )
    );
    public static final MemorySegment clang_constructUSR_ObjCCategory (MemoryAddress class_name, MemoryAddress category_name) {
        try {
            return (MemorySegment)clang_constructUSR_ObjCCategory.invokeExact(class_name, category_name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_constructUSR_ObjCProtocol = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCProtocol",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_constructUSR_ObjCProtocol (MemoryAddress protocol_name) {
        try {
            return (MemorySegment)clang_constructUSR_ObjCProtocol.invokeExact(protocol_name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_constructUSR_ObjCIvar = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCIvar",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER,
            MemoryLayout.ofStruct(
                C_POINTER.withName("data"),
                C_INT.withName("private_flags"),
                MemoryLayout.ofPaddingBits(32)
            )
        )
    );
    public static final MemorySegment clang_constructUSR_ObjCIvar (MemoryAddress name, MemorySegment classUSR) {
        try {
            return (MemorySegment)clang_constructUSR_ObjCIvar.invokeExact(name, classUSR);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_constructUSR_ObjCMethod = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCMethod",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER,
            C_INT,
            MemoryLayout.ofStruct(
                C_POINTER.withName("data"),
                C_INT.withName("private_flags"),
                MemoryLayout.ofPaddingBits(32)
            )
        )
    );
    public static final MemorySegment clang_constructUSR_ObjCMethod (MemoryAddress name, int isInstanceMethod, MemorySegment classUSR) {
        try {
            return (MemorySegment)clang_constructUSR_ObjCMethod.invokeExact(name, isInstanceMethod, classUSR);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_constructUSR_ObjCProperty = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_constructUSR_ObjCProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER,
            MemoryLayout.ofStruct(
                C_POINTER.withName("data"),
                C_INT.withName("private_flags"),
                MemoryLayout.ofPaddingBits(32)
            )
        )
    );
    public static final MemorySegment clang_constructUSR_ObjCProperty (MemoryAddress property, MemorySegment classUSR) {
        try {
            return (MemorySegment)clang_constructUSR_ObjCProperty.invokeExact(property, classUSR);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorSpelling = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorSpelling",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getCursorSpelling (MemorySegment x0) {
        try {
            return (MemorySegment)clang_getCursorSpelling.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getSpellingNameRange = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getSpellingNameRange",
        "(Ljdk/incubator/foreign/MemorySegment;II)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_INT,
            C_INT
        )
    );
    public static final MemorySegment clang_Cursor_getSpellingNameRange (MemorySegment x0, int pieceIndex, int options) {
        try {
            return (MemorySegment)clang_Cursor_getSpellingNameRange.invokeExact(x0, pieceIndex, options);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXPrintingPolicy_Indentation = (int)0L;
    public static final int CXPrintingPolicy_SuppressSpecifiers = (int)1L;
    public static final int CXPrintingPolicy_SuppressTagKeyword = (int)2L;
    public static final int CXPrintingPolicy_IncludeTagDefinition = (int)3L;
    public static final int CXPrintingPolicy_SuppressScope = (int)4L;
    public static final int CXPrintingPolicy_SuppressUnwrittenScope = (int)5L;
    public static final int CXPrintingPolicy_SuppressInitializers = (int)6L;
    public static final int CXPrintingPolicy_ConstantArraySizeAsWritten = (int)7L;
    public static final int CXPrintingPolicy_AnonymousTagLocations = (int)8L;
    public static final int CXPrintingPolicy_SuppressStrongLifetime = (int)9L;
    public static final int CXPrintingPolicy_SuppressLifetimeQualifiers = (int)10L;
    public static final int CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors = (int)11L;
    public static final int CXPrintingPolicy_Bool = (int)12L;
    public static final int CXPrintingPolicy_Restrict = (int)13L;
    public static final int CXPrintingPolicy_Alignof = (int)14L;
    public static final int CXPrintingPolicy_UnderscoreAlignof = (int)15L;
    public static final int CXPrintingPolicy_UseVoidForZeroParams = (int)16L;
    public static final int CXPrintingPolicy_TerseOutput = (int)17L;
    public static final int CXPrintingPolicy_PolishForDeclaration = (int)18L;
    public static final int CXPrintingPolicy_Half = (int)19L;
    public static final int CXPrintingPolicy_MSWChar = (int)20L;
    public static final int CXPrintingPolicy_IncludeNewlines = (int)21L;
    public static final int CXPrintingPolicy_MSVCFormatting = (int)22L;
    public static final int CXPrintingPolicy_ConstantsAsWritten = (int)23L;
    public static final int CXPrintingPolicy_SuppressImplicitBase = (int)24L;
    public static final int CXPrintingPolicy_FullyQualifiedName = (int)25L;
    public static final int CXPrintingPolicy_LastProperty = (int)25L;
    public static final MethodHandle clang_PrintingPolicy_getProperty = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_PrintingPolicy_getProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_INT
        )
    );
    public static final int clang_PrintingPolicy_getProperty (MemoryAddress Policy, int Property) {
        try {
            return (int)clang_PrintingPolicy_getProperty.invokeExact(Policy, Property);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_PrintingPolicy_setProperty = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_PrintingPolicy_setProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;II)V",
        FunctionDescriptor.ofVoid(
            C_POINTER,
            C_INT,
            C_INT
        )
    );
    public static final void clang_PrintingPolicy_setProperty (MemoryAddress Policy, int Property, int Value) {
        try {
            clang_PrintingPolicy_setProperty.invokeExact(Policy, Property, Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorPrintingPolicy = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorPrintingPolicy",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemoryAddress clang_getCursorPrintingPolicy (MemorySegment x0) {
        try {
            return (MemoryAddress)clang_getCursorPrintingPolicy.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_PrintingPolicy_dispose = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_PrintingPolicy_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_PrintingPolicy_dispose (MemoryAddress Policy) {
        try {
            clang_PrintingPolicy_dispose.invokeExact(Policy);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorPrettyPrinted = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorPrettyPrinted",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_getCursorPrettyPrinted (MemorySegment Cursor, MemoryAddress Policy) {
        try {
            return (MemorySegment)clang_getCursorPrettyPrinted.invokeExact(Cursor, Policy);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorDisplayName = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorDisplayName",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getCursorDisplayName (MemorySegment x0) {
        try {
            return (MemorySegment)clang_getCursorDisplayName.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorReferenced = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorReferenced",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getCursorReferenced (MemorySegment x0) {
        try {
            return (MemorySegment)clang_getCursorReferenced.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorDefinition = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorDefinition",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getCursorDefinition (MemorySegment x0) {
        try {
            return (MemorySegment)clang_getCursorDefinition.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_isCursorDefinition = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_isCursorDefinition",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_isCursorDefinition (MemorySegment x0) {
        try {
            return (int)clang_isCursorDefinition.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCanonicalCursor = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCanonicalCursor",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getCanonicalCursor (MemorySegment x0) {
        try {
            return (MemorySegment)clang_getCanonicalCursor.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getObjCSelectorIndex = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCSelectorIndex",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_getObjCSelectorIndex (MemorySegment x0) {
        try {
            return (int)clang_Cursor_getObjCSelectorIndex.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_isDynamicCall = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isDynamicCall",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_isDynamicCall (MemorySegment C) {
        try {
            return (int)clang_Cursor_isDynamicCall.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getReceiverType = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getReceiverType",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_Cursor_getReceiverType (MemorySegment C) {
        try {
            return (MemorySegment)clang_Cursor_getReceiverType.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXObjCPropertyAttr_noattr = (int)0L;
    public static final int CXObjCPropertyAttr_readonly = (int)1L;
    public static final int CXObjCPropertyAttr_getter = (int)2L;
    public static final int CXObjCPropertyAttr_assign = (int)4L;
    public static final int CXObjCPropertyAttr_readwrite = (int)8L;
    public static final int CXObjCPropertyAttr_retain = (int)16L;
    public static final int CXObjCPropertyAttr_copy = (int)32L;
    public static final int CXObjCPropertyAttr_nonatomic = (int)64L;
    public static final int CXObjCPropertyAttr_setter = (int)128L;
    public static final int CXObjCPropertyAttr_atomic = (int)256L;
    public static final int CXObjCPropertyAttr_weak = (int)512L;
    public static final int CXObjCPropertyAttr_strong = (int)1024L;
    public static final int CXObjCPropertyAttr_unsafe_unretained = (int)2048L;
    public static final int CXObjCPropertyAttr_class = (int)4096L;
    public static final MethodHandle clang_Cursor_getObjCPropertyAttributes = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCPropertyAttributes",
        "(Ljdk/incubator/foreign/MemorySegment;I)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_INT
        )
    );
    public static final int clang_Cursor_getObjCPropertyAttributes (MemorySegment C, int reserved) {
        try {
            return (int)clang_Cursor_getObjCPropertyAttributes.invokeExact(C, reserved);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getObjCPropertyGetterName = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCPropertyGetterName",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_Cursor_getObjCPropertyGetterName (MemorySegment C) {
        try {
            return (MemorySegment)clang_Cursor_getObjCPropertyGetterName.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getObjCPropertySetterName = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCPropertySetterName",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_Cursor_getObjCPropertySetterName (MemorySegment C) {
        try {
            return (MemorySegment)clang_Cursor_getObjCPropertySetterName.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXObjCDeclQualifier_None = (int)0L;
    public static final int CXObjCDeclQualifier_In = (int)1L;
    public static final int CXObjCDeclQualifier_Inout = (int)2L;
    public static final int CXObjCDeclQualifier_Out = (int)4L;
    public static final int CXObjCDeclQualifier_Bycopy = (int)8L;
    public static final int CXObjCDeclQualifier_Byref = (int)16L;
    public static final int CXObjCDeclQualifier_Oneway = (int)32L;
    public static final MethodHandle clang_Cursor_getObjCDeclQualifiers = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCDeclQualifiers",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_getObjCDeclQualifiers (MemorySegment C) {
        try {
            return (int)clang_Cursor_getObjCDeclQualifiers.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_isObjCOptional = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isObjCOptional",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_isObjCOptional (MemorySegment C) {
        try {
            return (int)clang_Cursor_isObjCOptional.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_isVariadic = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isVariadic",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_Cursor_isVariadic (MemorySegment C) {
        try {
            return (int)clang_Cursor_isVariadic.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_isExternalSymbol = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_isExternalSymbol",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final int clang_Cursor_isExternalSymbol (MemorySegment C, MemoryAddress language, MemoryAddress definedIn, MemoryAddress isGenerated) {
        try {
            return (int)clang_Cursor_isExternalSymbol.invokeExact(C, language, definedIn, isGenerated);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getCommentRange = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getCommentRange",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_Cursor_getCommentRange (MemorySegment C) {
        try {
            return (MemorySegment)clang_Cursor_getCommentRange.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getRawCommentText = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getRawCommentText",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_Cursor_getRawCommentText (MemorySegment C) {
        try {
            return (MemorySegment)clang_Cursor_getRawCommentText.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getBriefCommentText = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getBriefCommentText",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_Cursor_getBriefCommentText (MemorySegment C) {
        try {
            return (MemorySegment)clang_Cursor_getBriefCommentText.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getMangling = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getMangling",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_Cursor_getMangling (MemorySegment x0) {
        try {
            return (MemorySegment)clang_Cursor_getMangling.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getCXXManglings = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getCXXManglings",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemoryAddress clang_Cursor_getCXXManglings (MemorySegment x0) {
        try {
            return (MemoryAddress)clang_Cursor_getCXXManglings.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getObjCManglings = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getObjCManglings",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemoryAddress clang_Cursor_getObjCManglings (MemorySegment x0) {
        try {
            return (MemoryAddress)clang_Cursor_getObjCManglings.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Cursor_getModule = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_getModule",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemoryAddress clang_Cursor_getModule (MemorySegment C) {
        try {
            return (MemoryAddress)clang_Cursor_getModule.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getModuleForFile = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getModuleForFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_getModuleForFile (MemoryAddress x0, MemoryAddress x1) {
        try {
            return (MemoryAddress)clang_getModuleForFile.invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Module_getASTFile = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getASTFile",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_Module_getASTFile (MemoryAddress Module) {
        try {
            return (MemoryAddress)clang_Module_getASTFile.invokeExact(Module);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Module_getParent = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getParent",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_Module_getParent (MemoryAddress Module) {
        try {
            return (MemoryAddress)clang_Module_getParent.invokeExact(Module);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Module_getName = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getName",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_Module_getName (MemoryAddress Module) {
        try {
            return (MemorySegment)clang_Module_getName.invokeExact(Module);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Module_getFullName = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getFullName",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_Module_getFullName (MemoryAddress Module) {
        try {
            return (MemorySegment)clang_Module_getFullName.invokeExact(Module);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Module_isSystem = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_isSystem",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_Module_isSystem (MemoryAddress Module) {
        try {
            return (int)clang_Module_isSystem.invokeExact(Module);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Module_getNumTopLevelHeaders = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getNumTopLevelHeaders",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        )
    );
    public static final int clang_Module_getNumTopLevelHeaders (MemoryAddress x0, MemoryAddress Module) {
        try {
            return (int)clang_Module_getNumTopLevelHeaders.invokeExact(x0, Module);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Module_getTopLevelHeader = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Module_getTopLevelHeader",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT
        )
    );
    public static final MemoryAddress clang_Module_getTopLevelHeader (MemoryAddress x0, MemoryAddress Module, int Index) {
        try {
            return (MemoryAddress)clang_Module_getTopLevelHeader.invokeExact(x0, Module, Index);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_CXXConstructor_isConvertingConstructor = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXConstructor_isConvertingConstructor",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_CXXConstructor_isConvertingConstructor (MemorySegment C) {
        try {
            return (int)clang_CXXConstructor_isConvertingConstructor.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_CXXConstructor_isCopyConstructor = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXConstructor_isCopyConstructor",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_CXXConstructor_isCopyConstructor (MemorySegment C) {
        try {
            return (int)clang_CXXConstructor_isCopyConstructor.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_CXXConstructor_isDefaultConstructor = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXConstructor_isDefaultConstructor",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_CXXConstructor_isDefaultConstructor (MemorySegment C) {
        try {
            return (int)clang_CXXConstructor_isDefaultConstructor.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_CXXConstructor_isMoveConstructor = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXConstructor_isMoveConstructor",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_CXXConstructor_isMoveConstructor (MemorySegment C) {
        try {
            return (int)clang_CXXConstructor_isMoveConstructor.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_CXXField_isMutable = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXField_isMutable",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_CXXField_isMutable (MemorySegment C) {
        try {
            return (int)clang_CXXField_isMutable.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_CXXMethod_isDefaulted = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXMethod_isDefaulted",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_CXXMethod_isDefaulted (MemorySegment C) {
        try {
            return (int)clang_CXXMethod_isDefaulted.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_CXXMethod_isPureVirtual = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXMethod_isPureVirtual",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_CXXMethod_isPureVirtual (MemorySegment C) {
        try {
            return (int)clang_CXXMethod_isPureVirtual.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_CXXMethod_isStatic = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXMethod_isStatic",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_CXXMethod_isStatic (MemorySegment C) {
        try {
            return (int)clang_CXXMethod_isStatic.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_CXXMethod_isVirtual = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXMethod_isVirtual",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_CXXMethod_isVirtual (MemorySegment C) {
        try {
            return (int)clang_CXXMethod_isVirtual.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_CXXRecord_isAbstract = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXRecord_isAbstract",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_CXXRecord_isAbstract (MemorySegment C) {
        try {
            return (int)clang_CXXRecord_isAbstract.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_EnumDecl_isScoped = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EnumDecl_isScoped",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_EnumDecl_isScoped (MemorySegment C) {
        try {
            return (int)clang_EnumDecl_isScoped.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_CXXMethod_isConst = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_CXXMethod_isConst",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_CXXMethod_isConst (MemorySegment C) {
        try {
            return (int)clang_CXXMethod_isConst.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getTemplateCursorKind = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTemplateCursorKind",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final int clang_getTemplateCursorKind (MemorySegment C) {
        try {
            return (int)clang_getTemplateCursorKind.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getSpecializedCursorTemplate = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getSpecializedCursorTemplate",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemorySegment clang_getSpecializedCursorTemplate (MemorySegment C) {
        try {
            return (MemorySegment)clang_getSpecializedCursorTemplate.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorReferenceNameRange = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorReferenceNameRange",
        "(Ljdk/incubator/foreign/MemorySegment;II)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        ),
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_INT,
            C_INT
        )
    );
    public static final MemorySegment clang_getCursorReferenceNameRange (MemorySegment C, int NameFlags, int PieceIndex) {
        try {
            return (MemorySegment)clang_getCursorReferenceNameRange.invokeExact(C, NameFlags, PieceIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXNameRange_WantQualifier = (int)1L;
    public static final int CXNameRange_WantTemplateArgs = (int)2L;
    public static final int CXNameRange_WantSinglePiece = (int)4L;
    public static final int CXToken_Punctuation = (int)0L;
    public static final int CXToken_Keyword = (int)1L;
    public static final int CXToken_Identifier = (int)2L;
    public static final int CXToken_Literal = (int)3L;
    public static final int CXToken_Comment = (int)4L;
    public static final MemoryLayout CXToken$LAYOUT = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
        C_POINTER.withName("ptr_data")
    );
    public static final MethodHandle clang_getToken = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getToken",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.ofPaddingBits(32)
            )
        )
    );
    public static final MemoryAddress clang_getToken (MemoryAddress TU, MemorySegment Location) {
        try {
            return (MemoryAddress)clang_getToken.invokeExact(TU, Location);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getTokenKind = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTokenKind",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
                C_POINTER.withName("ptr_data")
            )
        )
    );
    public static final int clang_getTokenKind (MemorySegment x0) {
        try {
            return (int)clang_getTokenKind.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getTokenSpelling = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTokenSpelling",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER,
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
                C_POINTER.withName("ptr_data")
            )
        )
    );
    public static final MemorySegment clang_getTokenSpelling (MemoryAddress x0, MemorySegment x1) {
        try {
            return (MemorySegment)clang_getTokenSpelling.invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getTokenLocation = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTokenLocation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER,
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
                C_POINTER.withName("ptr_data")
            )
        )
    );
    public static final MemorySegment clang_getTokenLocation (MemoryAddress x0, MemorySegment x1) {
        try {
            return (MemorySegment)clang_getTokenLocation.invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getTokenExtent = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getTokenExtent",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("begin_int_data"),
            C_INT.withName("end_int_data")
        ),
            C_POINTER,
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
                C_POINTER.withName("ptr_data")
            )
        )
    );
    public static final MemorySegment clang_getTokenExtent (MemoryAddress x0, MemorySegment x1) {
        try {
            return (MemorySegment)clang_getTokenExtent.invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_tokenize = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_tokenize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER,
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("begin_int_data"),
                C_INT.withName("end_int_data")
            ),
            C_POINTER,
            C_POINTER
        )
    );
    public static final void clang_tokenize (MemoryAddress TU, MemorySegment Range, MemoryAddress Tokens, MemoryAddress NumTokens) {
        try {
            clang_tokenize.invokeExact(TU, Range, Tokens, NumTokens);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_annotateTokens = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_annotateTokens",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER
        )
    );
    public static final void clang_annotateTokens (MemoryAddress TU, MemoryAddress Tokens, int NumTokens, MemoryAddress Cursors) {
        try {
            clang_annotateTokens.invokeExact(TU, Tokens, NumTokens, Cursors);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_disposeTokens = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeTokens",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_INT
        )
    );
    public static final void clang_disposeTokens (MemoryAddress TU, MemoryAddress Tokens, int NumTokens) {
        try {
            clang_disposeTokens.invokeExact(TU, Tokens, NumTokens);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorKindSpelling = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorKindSpelling",
        "(I)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_INT
        )
    );
    public static final MemorySegment clang_getCursorKindSpelling (int Kind) {
        try {
            return (MemorySegment)clang_getCursorKindSpelling.invokeExact(Kind);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getDefinitionSpellingAndExtent = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getDefinitionSpellingAndExtent",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final void clang_getDefinitionSpellingAndExtent (MemorySegment x0, MemoryAddress startBuf, MemoryAddress endBuf, MemoryAddress startLine, MemoryAddress startColumn, MemoryAddress endLine, MemoryAddress endColumn) {
        try {
            clang_getDefinitionSpellingAndExtent.invokeExact(x0, startBuf, endBuf, startLine, startColumn, endLine, endColumn);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_enableStackTraces = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_enableStackTraces",
        "()V",
        FunctionDescriptor.ofVoid()
    );
    public static final void clang_enableStackTraces () {
        try {
            clang_enableStackTraces.invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_executeOnThread = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_executeOnThread",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_INT
        )
    );
    public static final void clang_executeOnThread (MemoryAddress fn, MemoryAddress user_data, int stack_size) {
        try {
            clang_executeOnThread.invokeExact(fn, user_data, stack_size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    private static final FunctionDescriptor clang_executeOnThread$fn$DESC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public interface clang_executeOnThread$fn {
        void apply(MemoryAddress x0);
    }
    public static final MemoryAddress clang_executeOnThread$fn$make(clang_executeOnThread$fn fi) {
        return RuntimeHelper.upcallStub(clang_executeOnThread$fn.class, fi, clang_executeOnThread$fn$DESC, "(Ljdk/incubator/foreign/MemoryAddress;)V");
    }
    public static final MemoryLayout CXCompletionResult$LAYOUT = MemoryLayout.ofStruct(
        C_INT.withName("CursorKind"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("CompletionString")
    );
    public static final VarHandle CXCompletionResult$CursorKind = CXCompletionResult$LAYOUT.varHandle(int.class, PathElement.groupElement("CursorKind"));
    public static final int CXCompletionResult$CursorKind$get(MemorySegment seg) {
        return (int)CXCompletionResult$CursorKind.get(seg.baseAddress());
    }
    public static final void CXCompletionResult$CursorKind$set(MemorySegment seg, int x) {
        CXCompletionResult$CursorKind.set(seg.baseAddress(), x);
    }
    public static final int CXCompletionChunk_Optional = (int)0L;
    public static final int CXCompletionChunk_TypedText = (int)1L;
    public static final int CXCompletionChunk_Text = (int)2L;
    public static final int CXCompletionChunk_Placeholder = (int)3L;
    public static final int CXCompletionChunk_Informative = (int)4L;
    public static final int CXCompletionChunk_CurrentParameter = (int)5L;
    public static final int CXCompletionChunk_LeftParen = (int)6L;
    public static final int CXCompletionChunk_RightParen = (int)7L;
    public static final int CXCompletionChunk_LeftBracket = (int)8L;
    public static final int CXCompletionChunk_RightBracket = (int)9L;
    public static final int CXCompletionChunk_LeftBrace = (int)10L;
    public static final int CXCompletionChunk_RightBrace = (int)11L;
    public static final int CXCompletionChunk_LeftAngle = (int)12L;
    public static final int CXCompletionChunk_RightAngle = (int)13L;
    public static final int CXCompletionChunk_Comma = (int)14L;
    public static final int CXCompletionChunk_ResultType = (int)15L;
    public static final int CXCompletionChunk_Colon = (int)16L;
    public static final int CXCompletionChunk_SemiColon = (int)17L;
    public static final int CXCompletionChunk_Equal = (int)18L;
    public static final int CXCompletionChunk_HorizontalSpace = (int)19L;
    public static final int CXCompletionChunk_VerticalSpace = (int)20L;
    public static final MethodHandle clang_getCompletionChunkKind = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionChunkKind",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_INT
        )
    );
    public static final int clang_getCompletionChunkKind (MemoryAddress completion_string, int chunk_number) {
        try {
            return (int)clang_getCompletionChunkKind.invokeExact(completion_string, chunk_number);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCompletionChunkText = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionChunkText",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER,
            C_INT
        )
    );
    public static final MemorySegment clang_getCompletionChunkText (MemoryAddress completion_string, int chunk_number) {
        try {
            return (MemorySegment)clang_getCompletionChunkText.invokeExact(completion_string, chunk_number);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCompletionChunkCompletionString = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionChunkCompletionString",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_INT
        )
    );
    public static final MemoryAddress clang_getCompletionChunkCompletionString (MemoryAddress completion_string, int chunk_number) {
        try {
            return (MemoryAddress)clang_getCompletionChunkCompletionString.invokeExact(completion_string, chunk_number);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getNumCompletionChunks = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getNumCompletionChunks",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_getNumCompletionChunks (MemoryAddress completion_string) {
        try {
            return (int)clang_getNumCompletionChunks.invokeExact(completion_string);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCompletionPriority = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionPriority",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_getCompletionPriority (MemoryAddress completion_string) {
        try {
            return (int)clang_getCompletionPriority.invokeExact(completion_string);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCompletionAvailability = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionAvailability",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_getCompletionAvailability (MemoryAddress completion_string) {
        try {
            return (int)clang_getCompletionAvailability.invokeExact(completion_string);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCompletionNumAnnotations = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionNumAnnotations",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_getCompletionNumAnnotations (MemoryAddress completion_string) {
        try {
            return (int)clang_getCompletionNumAnnotations.invokeExact(completion_string);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCompletionAnnotation = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionAnnotation",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER,
            C_INT
        )
    );
    public static final MemorySegment clang_getCompletionAnnotation (MemoryAddress completion_string, int annotation_number) {
        try {
            return (MemorySegment)clang_getCompletionAnnotation.invokeExact(completion_string, annotation_number);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCompletionParent = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionParent",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER,
            C_POINTER
        )
    );
    public static final MemorySegment clang_getCompletionParent (MemoryAddress completion_string, MemoryAddress kind) {
        try {
            return (MemorySegment)clang_getCompletionParent.invokeExact(completion_string, kind);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCompletionBriefComment = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionBriefComment",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_getCompletionBriefComment (MemoryAddress completion_string) {
        try {
            return (MemorySegment)clang_getCompletionBriefComment.invokeExact(completion_string);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCursorCompletionString = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCursorCompletionString",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemoryAddress clang_getCursorCompletionString (MemorySegment cursor) {
        try {
            return (MemoryAddress)clang_getCursorCompletionString.invokeExact(cursor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MemoryLayout CXCodeCompleteResults$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("Results"),
        C_INT.withName("NumResults"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static final VarHandle CXCodeCompleteResults$NumResults = CXCodeCompleteResults$LAYOUT.varHandle(int.class, PathElement.groupElement("NumResults"));
    public static final int CXCodeCompleteResults$NumResults$get(MemorySegment seg) {
        return (int)CXCodeCompleteResults$NumResults.get(seg.baseAddress());
    }
    public static final void CXCodeCompleteResults$NumResults$set(MemorySegment seg, int x) {
        CXCodeCompleteResults$NumResults.set(seg.baseAddress(), x);
    }
    public static final MethodHandle clang_getCompletionNumFixIts = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionNumFixIts",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_INT
        )
    );
    public static final int clang_getCompletionNumFixIts (MemoryAddress results, int completion_index) {
        try {
            return (int)clang_getCompletionNumFixIts.invokeExact(results, completion_index);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getCompletionFixIt = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getCompletionFixIt",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER,
            C_INT,
            C_INT,
            C_POINTER
        )
    );
    public static final MemorySegment clang_getCompletionFixIt (MemoryAddress results, int completion_index, int fixit_index, MemoryAddress replacement_range) {
        try {
            return (MemorySegment)clang_getCompletionFixIt.invokeExact(results, completion_index, fixit_index, replacement_range);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXCodeComplete_IncludeMacros = (int)1L;
    public static final int CXCodeComplete_IncludeCodePatterns = (int)2L;
    public static final int CXCodeComplete_IncludeBriefComments = (int)4L;
    public static final int CXCodeComplete_SkipPreamble = (int)8L;
    public static final int CXCodeComplete_IncludeCompletionsWithFixIts = (int)16L;
    public static final int CXCompletionContext_Unexposed = (int)0L;
    public static final int CXCompletionContext_AnyType = (int)1L;
    public static final int CXCompletionContext_AnyValue = (int)2L;
    public static final int CXCompletionContext_ObjCObjectValue = (int)4L;
    public static final int CXCompletionContext_ObjCSelectorValue = (int)8L;
    public static final int CXCompletionContext_CXXClassTypeValue = (int)16L;
    public static final int CXCompletionContext_DotMemberAccess = (int)32L;
    public static final int CXCompletionContext_ArrowMemberAccess = (int)64L;
    public static final int CXCompletionContext_ObjCPropertyAccess = (int)128L;
    public static final int CXCompletionContext_EnumTag = (int)256L;
    public static final int CXCompletionContext_UnionTag = (int)512L;
    public static final int CXCompletionContext_StructTag = (int)1024L;
    public static final int CXCompletionContext_ClassTag = (int)2048L;
    public static final int CXCompletionContext_Namespace = (int)4096L;
    public static final int CXCompletionContext_NestedNameSpecifier = (int)8192L;
    public static final int CXCompletionContext_ObjCInterface = (int)16384L;
    public static final int CXCompletionContext_ObjCProtocol = (int)32768L;
    public static final int CXCompletionContext_ObjCCategory = (int)65536L;
    public static final int CXCompletionContext_ObjCInstanceMessage = (int)131072L;
    public static final int CXCompletionContext_ObjCClassMessage = (int)262144L;
    public static final int CXCompletionContext_ObjCSelectorName = (int)524288L;
    public static final int CXCompletionContext_MacroName = (int)1048576L;
    public static final int CXCompletionContext_NaturalLanguage = (int)2097152L;
    public static final int CXCompletionContext_IncludedFile = (int)4194304L;
    public static final int CXCompletionContext_Unknown = (int)8388607L;
    public static final MethodHandle clang_defaultCodeCompleteOptions = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_defaultCodeCompleteOptions",
        "()I",
        FunctionDescriptor.of(C_INT)
    );
    public static final int clang_defaultCodeCompleteOptions () {
        try {
            return (int)clang_defaultCodeCompleteOptions.invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_codeCompleteAt = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteAt",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_INT,
            C_POINTER,
            C_INT,
            C_INT
        )
    );
    public static final MemoryAddress clang_codeCompleteAt (MemoryAddress TU, MemoryAddress complete_filename, int complete_line, int complete_column, MemoryAddress unsaved_files, int num_unsaved_files, int options) {
        try {
            return (MemoryAddress)clang_codeCompleteAt.invokeExact(TU, complete_filename, complete_line, complete_column, unsaved_files, num_unsaved_files, options);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_sortCodeCompletionResults = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_sortCodeCompletionResults",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        FunctionDescriptor.ofVoid(
            C_POINTER,
            C_INT
        )
    );
    public static final void clang_sortCodeCompletionResults (MemoryAddress Results, int NumResults) {
        try {
            clang_sortCodeCompletionResults.invokeExact(Results, NumResults);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_disposeCodeCompleteResults = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_disposeCodeCompleteResults",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_disposeCodeCompleteResults (MemoryAddress Results) {
        try {
            clang_disposeCodeCompleteResults.invokeExact(Results);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_codeCompleteGetNumDiagnostics = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetNumDiagnostics",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_codeCompleteGetNumDiagnostics (MemoryAddress Results) {
        try {
            return (int)clang_codeCompleteGetNumDiagnostics.invokeExact(Results);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_codeCompleteGetDiagnostic = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetDiagnostic",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_INT
        )
    );
    public static final MemoryAddress clang_codeCompleteGetDiagnostic (MemoryAddress Results, int Index) {
        try {
            return (MemoryAddress)clang_codeCompleteGetDiagnostic.invokeExact(Results, Index);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_codeCompleteGetContexts = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetContexts",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        FunctionDescriptor.of(C_LONGLONG,
            C_POINTER
        )
    );
    public static final long clang_codeCompleteGetContexts (MemoryAddress Results) {
        try {
            return (long)clang_codeCompleteGetContexts.invokeExact(Results);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_codeCompleteGetContainerKind = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetContainerKind",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        )
    );
    public static final int clang_codeCompleteGetContainerKind (MemoryAddress Results, MemoryAddress IsIncomplete) {
        try {
            return (int)clang_codeCompleteGetContainerKind.invokeExact(Results, IsIncomplete);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_codeCompleteGetContainerUSR = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetContainerUSR",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_codeCompleteGetContainerUSR (MemoryAddress Results) {
        try {
            return (MemorySegment)clang_codeCompleteGetContainerUSR.invokeExact(Results);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_codeCompleteGetObjCSelector = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_codeCompleteGetObjCSelector",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ),
            C_POINTER
        )
    );
    public static final MemorySegment clang_codeCompleteGetObjCSelector (MemoryAddress Results) {
        try {
            return (MemorySegment)clang_codeCompleteGetObjCSelector.invokeExact(Results);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getClangVersion = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getClangVersion",
        "()Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            C_POINTER.withName("data"),
            C_INT.withName("private_flags"),
            MemoryLayout.ofPaddingBits(32)
        ))
    );
    public static final MemorySegment clang_getClangVersion () {
        try {
            return (MemorySegment)clang_getClangVersion.invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_toggleCrashRecovery = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_toggleCrashRecovery",
        "(I)V",
        FunctionDescriptor.ofVoid(
            C_INT
        )
    );
    public static final void clang_toggleCrashRecovery (int isEnabled) {
        try {
            clang_toggleCrashRecovery.invokeExact(isEnabled);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getInclusions = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getInclusions",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final void clang_getInclusions (MemoryAddress tu, MemoryAddress visitor, MemoryAddress client_data) {
        try {
            clang_getInclusions.invokeExact(tu, visitor, client_data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    private static final FunctionDescriptor clang_getInclusions$visitor$DESC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    public interface clang_getInclusions$visitor {
        void apply(MemoryAddress x0, MemoryAddress x1, int x2, MemoryAddress x3);
    }
    public static final MemoryAddress clang_getInclusions$visitor$make(clang_getInclusions$visitor fi) {
        return RuntimeHelper.upcallStub(clang_getInclusions$visitor.class, fi, clang_getInclusions$visitor$DESC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V");
    }
    public static final int CXEval_Int = (int)1L;
    public static final int CXEval_Float = (int)2L;
    public static final int CXEval_ObjCStrLiteral = (int)3L;
    public static final int CXEval_StrLiteral = (int)4L;
    public static final int CXEval_CFStr = (int)5L;
    public static final int CXEval_Other = (int)6L;
    public static final int CXEval_UnExposed = (int)0L;
    public static final MethodHandle clang_Cursor_Evaluate = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Cursor_Evaluate",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            )
        )
    );
    public static final MemoryAddress clang_Cursor_Evaluate (MemorySegment C) {
        try {
            return (MemoryAddress)clang_Cursor_Evaluate.invokeExact(C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_EvalResult_getKind = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getKind",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_EvalResult_getKind (MemoryAddress E) {
        try {
            return (int)clang_EvalResult_getKind.invokeExact(E);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_EvalResult_getAsInt = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getAsInt",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_EvalResult_getAsInt (MemoryAddress E) {
        try {
            return (int)clang_EvalResult_getAsInt.invokeExact(E);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_EvalResult_getAsLongLong = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getAsLongLong",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        FunctionDescriptor.of(C_LONGLONG,
            C_POINTER
        )
    );
    public static final long clang_EvalResult_getAsLongLong (MemoryAddress E) {
        try {
            return (long)clang_EvalResult_getAsLongLong.invokeExact(E);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_EvalResult_isUnsignedInt = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_isUnsignedInt",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_EvalResult_isUnsignedInt (MemoryAddress E) {
        try {
            return (int)clang_EvalResult_isUnsignedInt.invokeExact(E);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_EvalResult_getAsUnsigned = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getAsUnsigned",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        FunctionDescriptor.of(C_LONGLONG,
            C_POINTER
        )
    );
    public static final long clang_EvalResult_getAsUnsigned (MemoryAddress E) {
        try {
            return (long)clang_EvalResult_getAsUnsigned.invokeExact(E);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_EvalResult_getAsDouble = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getAsDouble",
        "(Ljdk/incubator/foreign/MemoryAddress;)D",
        FunctionDescriptor.of(C_DOUBLE,
            C_POINTER
        )
    );
    public static final double clang_EvalResult_getAsDouble (MemoryAddress E) {
        try {
            return (double)clang_EvalResult_getAsDouble.invokeExact(E);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_EvalResult_getAsStr = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_getAsStr",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_EvalResult_getAsStr (MemoryAddress E) {
        try {
            return (MemoryAddress)clang_EvalResult_getAsStr.invokeExact(E);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_EvalResult_dispose = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_EvalResult_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_EvalResult_dispose (MemoryAddress E) {
        try {
            clang_EvalResult_dispose.invokeExact(E);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getRemappings = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getRemappings",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_getRemappings (MemoryAddress path) {
        try {
            return (MemoryAddress)clang_getRemappings.invokeExact(path);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_getRemappingsFromFileList = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_getRemappingsFromFileList",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_INT
        )
    );
    public static final MemoryAddress clang_getRemappingsFromFileList (MemoryAddress filePaths, int numFiles) {
        try {
            return (MemoryAddress)clang_getRemappingsFromFileList.invokeExact(filePaths, numFiles);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_remap_getNumFiles = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_remap_getNumFiles",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        )
    );
    public static final int clang_remap_getNumFiles (MemoryAddress x0) {
        try {
            return (int)clang_remap_getNumFiles.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_remap_getFilenames = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_remap_getFilenames",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        )
    );
    public static final void clang_remap_getFilenames (MemoryAddress x0, int index, MemoryAddress original, MemoryAddress transformed) {
        try {
            clang_remap_getFilenames.invokeExact(x0, index, original, transformed);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_remap_dispose = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_remap_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_remap_dispose (MemoryAddress x0) {
        try {
            clang_remap_dispose.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXVisit_Break = (int)0L;
    public static final int CXVisit_Continue = (int)1L;
    public static final MemoryLayout CXCursorAndRangeVisitor$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("context"),
        C_POINTER.withName("visit")
    ).withName("CXCursorAndRangeVisitor");
    public static final int CXResult_Success = (int)0L;
    public static final int CXResult_Invalid = (int)1L;
    public static final int CXResult_VisitBreak = (int)2L;
    public static final MethodHandle clang_findReferencesInFile = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_findReferencesInFile",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                C_INT.withName("xdata"),
                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
            ),
            C_POINTER,
            MemoryLayout.ofStruct(
                C_POINTER.withName("context"),
                C_POINTER.withName("visit")
            ).withName("CXCursorAndRangeVisitor")
        )
    );
    public static final int clang_findReferencesInFile (MemorySegment cursor, MemoryAddress file, MemorySegment visitor) {
        try {
            return (int)clang_findReferencesInFile.invokeExact(cursor, file, visitor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_findIncludesInFile = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_findIncludesInFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            MemoryLayout.ofStruct(
                C_POINTER.withName("context"),
                C_POINTER.withName("visit")
            ).withName("CXCursorAndRangeVisitor")
        )
    );
    public static final int clang_findIncludesInFile (MemoryAddress TU, MemoryAddress file, MemorySegment visitor) {
        try {
            return (int)clang_findIncludesInFile.invokeExact(TU, file, visitor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MemoryLayout CXIdxLoc$LAYOUT = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static final VarHandle CXIdxLoc$int_data = CXIdxLoc$LAYOUT.varHandle(int.class, PathElement.groupElement("int_data"));
    public static final int CXIdxLoc$int_data$get(MemorySegment seg) {
        return (int)CXIdxLoc$int_data.get(seg.baseAddress());
    }
    public static final void CXIdxLoc$int_data$set(MemorySegment seg, int x) {
        CXIdxLoc$int_data.set(seg.baseAddress(), x);
    }
    public static final MemoryLayout CXIdxIncludedFileInfo$LAYOUT = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("hashLoc"),
        C_POINTER.withName("filename"),
        C_POINTER.withName("file"),
        C_INT.withName("isImport"),
        C_INT.withName("isAngled"),
        C_INT.withName("isModuleImport"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static final VarHandle CXIdxIncludedFileInfo$isImport = CXIdxIncludedFileInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isImport"));
    public static final int CXIdxIncludedFileInfo$isImport$get(MemorySegment seg) {
        return (int)CXIdxIncludedFileInfo$isImport.get(seg.baseAddress());
    }
    public static final void CXIdxIncludedFileInfo$isImport$set(MemorySegment seg, int x) {
        CXIdxIncludedFileInfo$isImport.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXIdxIncludedFileInfo$isAngled = CXIdxIncludedFileInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isAngled"));
    public static final int CXIdxIncludedFileInfo$isAngled$get(MemorySegment seg) {
        return (int)CXIdxIncludedFileInfo$isAngled.get(seg.baseAddress());
    }
    public static final void CXIdxIncludedFileInfo$isAngled$set(MemorySegment seg, int x) {
        CXIdxIncludedFileInfo$isAngled.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXIdxIncludedFileInfo$isModuleImport = CXIdxIncludedFileInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isModuleImport"));
    public static final int CXIdxIncludedFileInfo$isModuleImport$get(MemorySegment seg) {
        return (int)CXIdxIncludedFileInfo$isModuleImport.get(seg.baseAddress());
    }
    public static final void CXIdxIncludedFileInfo$isModuleImport$set(MemorySegment seg, int x) {
        CXIdxIncludedFileInfo$isModuleImport.set(seg.baseAddress(), x);
    }
    public static final MemoryLayout CXIdxImportedASTFileInfo$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("file"),
        C_POINTER.withName("module"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc"),
        C_INT.withName("isImplicit"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static final VarHandle CXIdxImportedASTFileInfo$isImplicit = CXIdxImportedASTFileInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isImplicit"));
    public static final int CXIdxImportedASTFileInfo$isImplicit$get(MemorySegment seg) {
        return (int)CXIdxImportedASTFileInfo$isImplicit.get(seg.baseAddress());
    }
    public static final void CXIdxImportedASTFileInfo$isImplicit$set(MemorySegment seg, int x) {
        CXIdxImportedASTFileInfo$isImplicit.set(seg.baseAddress(), x);
    }
    public static final int CXIdxEntity_Unexposed = (int)0L;
    public static final int CXIdxEntity_Typedef = (int)1L;
    public static final int CXIdxEntity_Function = (int)2L;
    public static final int CXIdxEntity_Variable = (int)3L;
    public static final int CXIdxEntity_Field = (int)4L;
    public static final int CXIdxEntity_EnumConstant = (int)5L;
    public static final int CXIdxEntity_ObjCClass = (int)6L;
    public static final int CXIdxEntity_ObjCProtocol = (int)7L;
    public static final int CXIdxEntity_ObjCCategory = (int)8L;
    public static final int CXIdxEntity_ObjCInstanceMethod = (int)9L;
    public static final int CXIdxEntity_ObjCClassMethod = (int)10L;
    public static final int CXIdxEntity_ObjCProperty = (int)11L;
    public static final int CXIdxEntity_ObjCIvar = (int)12L;
    public static final int CXIdxEntity_Enum = (int)13L;
    public static final int CXIdxEntity_Struct = (int)14L;
    public static final int CXIdxEntity_Union = (int)15L;
    public static final int CXIdxEntity_CXXClass = (int)16L;
    public static final int CXIdxEntity_CXXNamespace = (int)17L;
    public static final int CXIdxEntity_CXXNamespaceAlias = (int)18L;
    public static final int CXIdxEntity_CXXStaticVariable = (int)19L;
    public static final int CXIdxEntity_CXXStaticMethod = (int)20L;
    public static final int CXIdxEntity_CXXInstanceMethod = (int)21L;
    public static final int CXIdxEntity_CXXConstructor = (int)22L;
    public static final int CXIdxEntity_CXXDestructor = (int)23L;
    public static final int CXIdxEntity_CXXConversionFunction = (int)24L;
    public static final int CXIdxEntity_CXXTypeAlias = (int)25L;
    public static final int CXIdxEntity_CXXInterface = (int)26L;
    public static final int CXIdxEntityLang_None = (int)0L;
    public static final int CXIdxEntityLang_C = (int)1L;
    public static final int CXIdxEntityLang_ObjC = (int)2L;
    public static final int CXIdxEntityLang_CXX = (int)3L;
    public static final int CXIdxEntityLang_Swift = (int)4L;
    public static final int CXIdxEntity_NonTemplate = (int)0L;
    public static final int CXIdxEntity_Template = (int)1L;
    public static final int CXIdxEntity_TemplatePartialSpecialization = (int)2L;
    public static final int CXIdxEntity_TemplateSpecialization = (int)3L;
    public static final int CXIdxAttr_Unexposed = (int)0L;
    public static final int CXIdxAttr_IBAction = (int)1L;
    public static final int CXIdxAttr_IBOutlet = (int)2L;
    public static final int CXIdxAttr_IBOutletCollection = (int)3L;
    public static final MemoryLayout CXIdxAttrInfo$LAYOUT = MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc")
    );
    public static final VarHandle CXIdxAttrInfo$kind = CXIdxAttrInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
    public static final int CXIdxAttrInfo$kind$get(MemorySegment seg) {
        return (int)CXIdxAttrInfo$kind.get(seg.baseAddress());
    }
    public static final void CXIdxAttrInfo$kind$set(MemorySegment seg, int x) {
        CXIdxAttrInfo$kind.set(seg.baseAddress(), x);
    }
    public static final MemoryLayout CXIdxEntityInfo$LAYOUT = MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        C_INT.withName("templateKind"),
        C_INT.withName("lang"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("name"),
        C_POINTER.withName("USR"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        C_POINTER.withName("attributes"),
        C_INT.withName("numAttributes"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static final VarHandle CXIdxEntityInfo$kind = CXIdxEntityInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
    public static final int CXIdxEntityInfo$kind$get(MemorySegment seg) {
        return (int)CXIdxEntityInfo$kind.get(seg.baseAddress());
    }
    public static final void CXIdxEntityInfo$kind$set(MemorySegment seg, int x) {
        CXIdxEntityInfo$kind.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXIdxEntityInfo$templateKind = CXIdxEntityInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("templateKind"));
    public static final int CXIdxEntityInfo$templateKind$get(MemorySegment seg) {
        return (int)CXIdxEntityInfo$templateKind.get(seg.baseAddress());
    }
    public static final void CXIdxEntityInfo$templateKind$set(MemorySegment seg, int x) {
        CXIdxEntityInfo$templateKind.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXIdxEntityInfo$lang = CXIdxEntityInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("lang"));
    public static final int CXIdxEntityInfo$lang$get(MemorySegment seg) {
        return (int)CXIdxEntityInfo$lang.get(seg.baseAddress());
    }
    public static final void CXIdxEntityInfo$lang$set(MemorySegment seg, int x) {
        CXIdxEntityInfo$lang.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXIdxEntityInfo$numAttributes = CXIdxEntityInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("numAttributes"));
    public static final int CXIdxEntityInfo$numAttributes$get(MemorySegment seg) {
        return (int)CXIdxEntityInfo$numAttributes.get(seg.baseAddress());
    }
    public static final void CXIdxEntityInfo$numAttributes$set(MemorySegment seg, int x) {
        CXIdxEntityInfo$numAttributes.set(seg.baseAddress(), x);
    }
    public static final MemoryLayout CXIdxContainerInfo$LAYOUT = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor")
    );
    public static final MemoryLayout CXIdxIBOutletCollectionAttrInfo$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("attrInfo"),
        C_POINTER.withName("objcClass"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("classCursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("classLoc")
    );
    public static final int CXIdxDeclFlag_Skipped = (int)1L;
    public static final MemoryLayout CXIdxDeclInfo$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("entityInfo"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc"),
        C_POINTER.withName("semanticContainer"),
        C_POINTER.withName("lexicalContainer"),
        C_INT.withName("isRedeclaration"),
        C_INT.withName("isDefinition"),
        C_INT.withName("isContainer"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("declAsContainer"),
        C_INT.withName("isImplicit"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("attributes"),
        C_INT.withName("numAttributes"),
        C_INT.withName("flags")
    );
    public static final VarHandle CXIdxDeclInfo$isRedeclaration = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isRedeclaration"));
    public static final int CXIdxDeclInfo$isRedeclaration$get(MemorySegment seg) {
        return (int)CXIdxDeclInfo$isRedeclaration.get(seg.baseAddress());
    }
    public static final void CXIdxDeclInfo$isRedeclaration$set(MemorySegment seg, int x) {
        CXIdxDeclInfo$isRedeclaration.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXIdxDeclInfo$isDefinition = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isDefinition"));
    public static final int CXIdxDeclInfo$isDefinition$get(MemorySegment seg) {
        return (int)CXIdxDeclInfo$isDefinition.get(seg.baseAddress());
    }
    public static final void CXIdxDeclInfo$isDefinition$set(MemorySegment seg, int x) {
        CXIdxDeclInfo$isDefinition.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXIdxDeclInfo$isContainer = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isContainer"));
    public static final int CXIdxDeclInfo$isContainer$get(MemorySegment seg) {
        return (int)CXIdxDeclInfo$isContainer.get(seg.baseAddress());
    }
    public static final void CXIdxDeclInfo$isContainer$set(MemorySegment seg, int x) {
        CXIdxDeclInfo$isContainer.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXIdxDeclInfo$isImplicit = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isImplicit"));
    public static final int CXIdxDeclInfo$isImplicit$get(MemorySegment seg) {
        return (int)CXIdxDeclInfo$isImplicit.get(seg.baseAddress());
    }
    public static final void CXIdxDeclInfo$isImplicit$set(MemorySegment seg, int x) {
        CXIdxDeclInfo$isImplicit.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXIdxDeclInfo$numAttributes = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("numAttributes"));
    public static final int CXIdxDeclInfo$numAttributes$get(MemorySegment seg) {
        return (int)CXIdxDeclInfo$numAttributes.get(seg.baseAddress());
    }
    public static final void CXIdxDeclInfo$numAttributes$set(MemorySegment seg, int x) {
        CXIdxDeclInfo$numAttributes.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXIdxDeclInfo$flags = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("flags"));
    public static final int CXIdxDeclInfo$flags$get(MemorySegment seg) {
        return (int)CXIdxDeclInfo$flags.get(seg.baseAddress());
    }
    public static final void CXIdxDeclInfo$flags$set(MemorySegment seg, int x) {
        CXIdxDeclInfo$flags.set(seg.baseAddress(), x);
    }
    public static final int CXIdxObjCContainer_ForwardRef = (int)0L;
    public static final int CXIdxObjCContainer_Interface = (int)1L;
    public static final int CXIdxObjCContainer_Implementation = (int)2L;
    public static final MemoryLayout CXIdxObjCContainerDeclInfo$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("declInfo"),
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static final VarHandle CXIdxObjCContainerDeclInfo$kind = CXIdxObjCContainerDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
    public static final int CXIdxObjCContainerDeclInfo$kind$get(MemorySegment seg) {
        return (int)CXIdxObjCContainerDeclInfo$kind.get(seg.baseAddress());
    }
    public static final void CXIdxObjCContainerDeclInfo$kind$set(MemorySegment seg, int x) {
        CXIdxObjCContainerDeclInfo$kind.set(seg.baseAddress(), x);
    }
    public static final MemoryLayout CXIdxBaseClassInfo$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("base"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc")
    );
    public static final MemoryLayout CXIdxObjCProtocolRefInfo$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("protocol"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc")
    );
    public static final MemoryLayout CXIdxObjCProtocolRefListInfo$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("protocols"),
        C_INT.withName("numProtocols"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static final VarHandle CXIdxObjCProtocolRefListInfo$numProtocols = CXIdxObjCProtocolRefListInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("numProtocols"));
    public static final int CXIdxObjCProtocolRefListInfo$numProtocols$get(MemorySegment seg) {
        return (int)CXIdxObjCProtocolRefListInfo$numProtocols.get(seg.baseAddress());
    }
    public static final void CXIdxObjCProtocolRefListInfo$numProtocols$set(MemorySegment seg, int x) {
        CXIdxObjCProtocolRefListInfo$numProtocols.set(seg.baseAddress(), x);
    }
    public static final MemoryLayout CXIdxObjCInterfaceDeclInfo$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("containerInfo"),
        C_POINTER.withName("superInfo"),
        C_POINTER.withName("protocols")
    );
    public static final MemoryLayout CXIdxObjCCategoryDeclInfo$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("containerInfo"),
        C_POINTER.withName("objcClass"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("classCursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("classLoc"),
        C_POINTER.withName("protocols")
    );
    public static final MemoryLayout CXIdxObjCPropertyDeclInfo$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("declInfo"),
        C_POINTER.withName("getter"),
        C_POINTER.withName("setter")
    );
    public static final MemoryLayout CXIdxCXXClassDeclInfo$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("declInfo"),
        C_POINTER.withName("bases"),
        C_INT.withName("numBases"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static final VarHandle CXIdxCXXClassDeclInfo$numBases = CXIdxCXXClassDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("numBases"));
    public static final int CXIdxCXXClassDeclInfo$numBases$get(MemorySegment seg) {
        return (int)CXIdxCXXClassDeclInfo$numBases.get(seg.baseAddress());
    }
    public static final void CXIdxCXXClassDeclInfo$numBases$set(MemorySegment seg, int x) {
        CXIdxCXXClassDeclInfo$numBases.set(seg.baseAddress(), x);
    }
    public static final int CXIdxEntityRef_Direct = (int)1L;
    public static final int CXIdxEntityRef_Implicit = (int)2L;
    public static final int CXSymbolRole_None = (int)0L;
    public static final int CXSymbolRole_Declaration = (int)1L;
    public static final int CXSymbolRole_Definition = (int)2L;
    public static final int CXSymbolRole_Reference = (int)4L;
    public static final int CXSymbolRole_Read = (int)8L;
    public static final int CXSymbolRole_Write = (int)16L;
    public static final int CXSymbolRole_Call = (int)32L;
    public static final int CXSymbolRole_Dynamic = (int)64L;
    public static final int CXSymbolRole_AddressOf = (int)128L;
    public static final int CXSymbolRole_Implicit = (int)256L;
    public static final MemoryLayout CXIdxEntityRefInfo$LAYOUT = MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc"),
        C_POINTER.withName("referencedEntity"),
        C_POINTER.withName("parentEntity"),
        C_POINTER.withName("container"),
        C_INT.withName("role"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static final VarHandle CXIdxEntityRefInfo$kind = CXIdxEntityRefInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
    public static final int CXIdxEntityRefInfo$kind$get(MemorySegment seg) {
        return (int)CXIdxEntityRefInfo$kind.get(seg.baseAddress());
    }
    public static final void CXIdxEntityRefInfo$kind$set(MemorySegment seg, int x) {
        CXIdxEntityRefInfo$kind.set(seg.baseAddress(), x);
    }
    public static final VarHandle CXIdxEntityRefInfo$role = CXIdxEntityRefInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("role"));
    public static final int CXIdxEntityRefInfo$role$get(MemorySegment seg) {
        return (int)CXIdxEntityRefInfo$role.get(seg.baseAddress());
    }
    public static final void CXIdxEntityRefInfo$role$set(MemorySegment seg, int x) {
        CXIdxEntityRefInfo$role.set(seg.baseAddress(), x);
    }
    public static final MemoryLayout IndexerCallbacks$LAYOUT = MemoryLayout.ofStruct(
        C_POINTER.withName("abortQuery"),
        C_POINTER.withName("diagnostic"),
        C_POINTER.withName("enteredMainFile"),
        C_POINTER.withName("ppIncludedFile"),
        C_POINTER.withName("importedASTFile"),
        C_POINTER.withName("startedTranslationUnit"),
        C_POINTER.withName("indexDeclaration"),
        C_POINTER.withName("indexEntityReference")
    );
    public static final MethodHandle clang_index_isEntityObjCContainerKind = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_isEntityObjCContainerKind",
        "(I)I",
        FunctionDescriptor.of(C_INT,
            C_INT
        )
    );
    public static final int clang_index_isEntityObjCContainerKind (int x0) {
        try {
            return (int)clang_index_isEntityObjCContainerKind.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_index_getObjCContainerDeclInfo = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getObjCContainerDeclInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_index_getObjCContainerDeclInfo (MemoryAddress x0) {
        try {
            return (MemoryAddress)clang_index_getObjCContainerDeclInfo.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_index_getObjCInterfaceDeclInfo = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getObjCInterfaceDeclInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_index_getObjCInterfaceDeclInfo (MemoryAddress x0) {
        try {
            return (MemoryAddress)clang_index_getObjCInterfaceDeclInfo.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_index_getObjCCategoryDeclInfo = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getObjCCategoryDeclInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_index_getObjCCategoryDeclInfo (MemoryAddress x0) {
        try {
            return (MemoryAddress)clang_index_getObjCCategoryDeclInfo.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_index_getObjCProtocolRefListInfo = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getObjCProtocolRefListInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_index_getObjCProtocolRefListInfo (MemoryAddress x0) {
        try {
            return (MemoryAddress)clang_index_getObjCProtocolRefListInfo.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_index_getObjCPropertyDeclInfo = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getObjCPropertyDeclInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_index_getObjCPropertyDeclInfo (MemoryAddress x0) {
        try {
            return (MemoryAddress)clang_index_getObjCPropertyDeclInfo.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_index_getIBOutletCollectionAttrInfo = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getIBOutletCollectionAttrInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_index_getIBOutletCollectionAttrInfo (MemoryAddress x0) {
        try {
            return (MemoryAddress)clang_index_getIBOutletCollectionAttrInfo.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_index_getCXXClassDeclInfo = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getCXXClassDeclInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_index_getCXXClassDeclInfo (MemoryAddress x0) {
        try {
            return (MemoryAddress)clang_index_getCXXClassDeclInfo.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_index_getClientContainer = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getClientContainer",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_index_getClientContainer (MemoryAddress x0) {
        try {
            return (MemoryAddress)clang_index_getClientContainer.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_index_setClientContainer = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_setClientContainer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        )
    );
    public static final void clang_index_setClientContainer (MemoryAddress x0, MemoryAddress x1) {
        try {
            clang_index_setClientContainer.invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_index_getClientEntity = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getClientEntity",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_index_getClientEntity (MemoryAddress x0) {
        try {
            return (MemoryAddress)clang_index_getClientEntity.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_index_setClientEntity = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_setClientEntity",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        )
    );
    public static final void clang_index_setClientEntity (MemoryAddress x0, MemoryAddress x1) {
        try {
            clang_index_setClientEntity.invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_IndexAction_create = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_IndexAction_create",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        )
    );
    public static final MemoryAddress clang_IndexAction_create (MemoryAddress CIdx) {
        try {
            return (MemoryAddress)clang_IndexAction_create.invokeExact(CIdx);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_IndexAction_dispose = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_IndexAction_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            C_POINTER
        )
    );
    public static final void clang_IndexAction_dispose (MemoryAddress x0) {
        try {
            clang_IndexAction_dispose.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final int CXIndexOpt_None = (int)0L;
    public static final int CXIndexOpt_SuppressRedundantRefs = (int)1L;
    public static final int CXIndexOpt_IndexFunctionLocalSymbols = (int)2L;
    public static final int CXIndexOpt_IndexImplicitTemplateInstantiations = (int)4L;
    public static final int CXIndexOpt_SuppressWarnings = (int)8L;
    public static final int CXIndexOpt_SkipParsedBodiesInSession = (int)16L;
    public static final MethodHandle clang_indexSourceFile = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_indexSourceFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT
        )
    );
    public static final int clang_indexSourceFile (MemoryAddress x0, MemoryAddress client_data, MemoryAddress index_callbacks, int index_callbacks_size, int index_options, MemoryAddress source_filename, MemoryAddress command_line_args, int num_command_line_args, MemoryAddress unsaved_files, int num_unsaved_files, MemoryAddress out_TU, int TU_options) {
        try {
            return (int)clang_indexSourceFile.invokeExact(x0, client_data, index_callbacks, index_callbacks_size, index_options, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, out_TU, TU_options);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_indexSourceFileFullArgv = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_indexSourceFileFullArgv",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT
        )
    );
    public static final int clang_indexSourceFileFullArgv (MemoryAddress x0, MemoryAddress client_data, MemoryAddress index_callbacks, int index_callbacks_size, int index_options, MemoryAddress source_filename, MemoryAddress command_line_args, int num_command_line_args, MemoryAddress unsaved_files, int num_unsaved_files, MemoryAddress out_TU, int TU_options) {
        try {
            return (int)clang_indexSourceFileFullArgv.invokeExact(x0, client_data, index_callbacks, index_callbacks_size, index_options, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, out_TU, TU_options);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_indexTranslationUnit = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_indexTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_INT,
            C_POINTER
        )
    );
    public static final int clang_indexTranslationUnit (MemoryAddress x0, MemoryAddress client_data, MemoryAddress index_callbacks, int index_callbacks_size, int index_options, MemoryAddress x5) {
        try {
            return (int)clang_indexTranslationUnit.invokeExact(x0, client_data, index_callbacks, index_callbacks_size, index_options, x5);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_indexLoc_getFileLocation = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_indexLoc_getFileLocation",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        FunctionDescriptor.ofVoid(
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.ofPaddingBits(32)
            ),
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        )
    );
    public static final void clang_indexLoc_getFileLocation (MemorySegment loc, MemoryAddress indexFile, MemoryAddress file, MemoryAddress line, MemoryAddress column, MemoryAddress offset) {
        try {
            clang_indexLoc_getFileLocation.invokeExact(loc, indexFile, file, line, column, offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_indexLoc_getCXSourceLocation = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_indexLoc_getCXSourceLocation",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        FunctionDescriptor.of(MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
                C_INT.withName("int_data"),
                MemoryLayout.ofPaddingBits(32)
            )
        )
    );
    public static final MemorySegment clang_indexLoc_getCXSourceLocation (MemorySegment loc) {
        try {
            return (MemorySegment)clang_indexLoc_getCXSourceLocation.invokeExact(loc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle clang_Type_visitFields = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_visitFields",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            MemoryLayout.ofStruct(
                C_INT.withName("kind"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
            ),
            C_POINTER,
            C_POINTER
        )
    );
    public static final int clang_Type_visitFields (MemorySegment T, MemoryAddress visitor, MemoryAddress client_data) {
        try {
            return (int)clang_Type_visitFields.invokeExact(T, visitor, client_data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    private static final FunctionDescriptor clang_Type_visitFields$visitor$DESC = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    public interface clang_Type_visitFields$visitor {
        int apply(MemorySegment x0, MemoryAddress x1);
    }
    public static final MemoryAddress clang_Type_visitFields$visitor$make(clang_Type_visitFields$visitor fi) {
        return RuntimeHelper.upcallStub(clang_Type_visitFields$visitor.class, fi, clang_Type_visitFields$visitor$DESC, "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I");
    }
}


