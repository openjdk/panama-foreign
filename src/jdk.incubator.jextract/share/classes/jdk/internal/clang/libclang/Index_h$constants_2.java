/*
 *  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 *  This code is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License version 2 only, as
 *  published by the Free Software Foundation.  Oracle designates this
 *  particular file as subject to the "Classpath" exception as provided
 *  by Oracle in the LICENSE file that accompanied this code.
 *
 *  This code is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 *  version 2 for more details (a copy is included in the LICENSE file that
 *  accompanied this code).
 *
 *  You should have received a copy of the GNU General Public License version
 *  2 along with this work; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 *  or visit www.oracle.com if you need additional information or have any
 *  questions.
 *
 */

// Generated by jextract

package jdk.internal.clang.libclang;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.*;

public class Index_h$constants_2 extends Index_h$constants_1 {
    private static final MemoryLayout flags$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout flags$LAYOUT() { return flags$LAYOUT_; }

    private static final VarHandle flags$VH_ = flags$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle flags$VH() { return flags$VH_; }

    public static int CXIdxObjCContainer_ForwardRef() { return (int)0L; }

    public static int CXIdxObjCContainer_Interface() { return (int)1L; }

    public static int CXIdxObjCContainer_Implementation() { return (int)2L; }

    private static final MemoryLayout CXIdxObjCContainerDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("declInfo"),
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxObjCContainerDeclInfo$struct$LAYOUT() { return CXIdxObjCContainerDeclInfo$struct$LAYOUT_; }

    private static final MemoryLayout declInfo$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout declInfo$LAYOUT() { return declInfo$LAYOUT_; }

    private static final VarHandle declInfo$VH_ = MemoryHandles.asAddressVarHandle(declInfo$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle declInfo$VH() { return declInfo$VH_; }

    private static final MemoryLayout CXIdxBaseClassInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("base"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc")
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxBaseClassInfo$struct$LAYOUT() { return CXIdxBaseClassInfo$struct$LAYOUT_; }

    private static final MemoryLayout base$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout base$LAYOUT() { return base$LAYOUT_; }

    private static final VarHandle base$VH_ = MemoryHandles.asAddressVarHandle(base$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle base$VH() { return base$VH_; }

    private static final MemoryLayout CXIdxObjCProtocolRefInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("protocol"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc")
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxObjCProtocolRefInfo$struct$LAYOUT() { return CXIdxObjCProtocolRefInfo$struct$LAYOUT_; }

    private static final MemoryLayout protocol$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout protocol$LAYOUT() { return protocol$LAYOUT_; }

    private static final VarHandle protocol$VH_ = MemoryHandles.asAddressVarHandle(protocol$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle protocol$VH() { return protocol$VH_; }

    private static final MemoryLayout CXIdxObjCProtocolRefListInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("protocols"),
        C_INT.withName("numProtocols"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxObjCProtocolRefListInfo$struct$LAYOUT() { return CXIdxObjCProtocolRefListInfo$struct$LAYOUT_; }

    private static final MemoryLayout protocols$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout protocols$LAYOUT() { return protocols$LAYOUT_; }

    private static final VarHandle protocols$VH_ = MemoryHandles.asAddressVarHandle(protocols$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle protocols$VH() { return protocols$VH_; }

    private static final MemoryLayout numProtocols$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout numProtocols$LAYOUT() { return numProtocols$LAYOUT_; }

    private static final VarHandle numProtocols$VH_ = numProtocols$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle numProtocols$VH() { return numProtocols$VH_; }

    private static final MemoryLayout CXIdxObjCInterfaceDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("containerInfo"),
        C_POINTER.withName("superInfo"),
        C_POINTER.withName("protocols")
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxObjCInterfaceDeclInfo$struct$LAYOUT() { return CXIdxObjCInterfaceDeclInfo$struct$LAYOUT_; }

    private static final MemoryLayout containerInfo$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout containerInfo$LAYOUT() { return containerInfo$LAYOUT_; }

    private static final VarHandle containerInfo$VH_ = MemoryHandles.asAddressVarHandle(containerInfo$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle containerInfo$VH() { return containerInfo$VH_; }

    private static final MemoryLayout superInfo$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout superInfo$LAYOUT() { return superInfo$LAYOUT_; }

    private static final VarHandle superInfo$VH_ = MemoryHandles.asAddressVarHandle(superInfo$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle superInfo$VH() { return superInfo$VH_; }

    private static final MemoryLayout CXIdxObjCCategoryDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("containerInfo"),
        C_POINTER.withName("objcClass"),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("classCursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("classLoc"),
        C_POINTER.withName("protocols")
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxObjCCategoryDeclInfo$struct$LAYOUT() { return CXIdxObjCCategoryDeclInfo$struct$LAYOUT_; }

    private static final MemoryLayout CXIdxObjCPropertyDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("declInfo"),
        C_POINTER.withName("getter"),
        C_POINTER.withName("setter")
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxObjCPropertyDeclInfo$struct$LAYOUT() { return CXIdxObjCPropertyDeclInfo$struct$LAYOUT_; }

    private static final MemoryLayout getter$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout getter$LAYOUT() { return getter$LAYOUT_; }

    private static final VarHandle getter$VH_ = MemoryHandles.asAddressVarHandle(getter$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle getter$VH() { return getter$VH_; }

    private static final MemoryLayout setter$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout setter$LAYOUT() { return setter$LAYOUT_; }

    private static final VarHandle setter$VH_ = MemoryHandles.asAddressVarHandle(setter$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle setter$VH() { return setter$VH_; }

    private static final MemoryLayout CXIdxCXXClassDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("declInfo"),
        C_POINTER.withName("bases"),
        C_INT.withName("numBases"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxCXXClassDeclInfo$struct$LAYOUT() { return CXIdxCXXClassDeclInfo$struct$LAYOUT_; }

    private static final MemoryLayout bases$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout bases$LAYOUT() { return bases$LAYOUT_; }

    private static final VarHandle bases$VH_ = MemoryHandles.asAddressVarHandle(bases$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle bases$VH() { return bases$VH_; }

    private static final MemoryLayout numBases$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout numBases$LAYOUT() { return numBases$LAYOUT_; }

    private static final VarHandle numBases$VH_ = numBases$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle numBases$VH() { return numBases$VH_; }

    public static int CXIdxEntityRef_Direct() { return (int)1L; }

    public static int CXIdxEntityRef_Implicit() { return (int)2L; }

    public static int CXSymbolRole_None() { return (int)0L; }

    public static int CXSymbolRole_Declaration() { return (int)1L; }

    public static int CXSymbolRole_Definition() { return (int)2L; }

    public static int CXSymbolRole_Reference() { return (int)4L; }

    public static int CXSymbolRole_Read() { return (int)8L; }

    public static int CXSymbolRole_Write() { return (int)16L; }

    public static int CXSymbolRole_Call() { return (int)32L; }

    public static int CXSymbolRole_Dynamic() { return (int)64L; }

    public static int CXSymbolRole_AddressOf() { return (int)128L; }

    public static int CXSymbolRole_Implicit() { return (int)256L; }

    private static final MemoryLayout CXIdxEntityRefInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("kind"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ).withName("cursor"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("loc"),
        C_POINTER.withName("referencedEntity"),
        C_POINTER.withName("parentEntity"),
        C_POINTER.withName("container"),
        C_INT.withName("role"),
        MemoryLayout.ofPaddingBits(32)
    );
    public static jdk.incubator.foreign.MemoryLayout CXIdxEntityRefInfo$struct$LAYOUT() { return CXIdxEntityRefInfo$struct$LAYOUT_; }

    private static final MemoryLayout referencedEntity$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout referencedEntity$LAYOUT() { return referencedEntity$LAYOUT_; }

    private static final VarHandle referencedEntity$VH_ = MemoryHandles.asAddressVarHandle(referencedEntity$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle referencedEntity$VH() { return referencedEntity$VH_; }

    private static final MemoryLayout parentEntity$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout parentEntity$LAYOUT() { return parentEntity$LAYOUT_; }

    private static final VarHandle parentEntity$VH_ = MemoryHandles.asAddressVarHandle(parentEntity$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle parentEntity$VH() { return parentEntity$VH_; }

    private static final MemoryLayout container$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout container$LAYOUT() { return container$LAYOUT_; }

    private static final VarHandle container$VH_ = MemoryHandles.asAddressVarHandle(container$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle container$VH() { return container$VH_; }

    private static final MemoryLayout role$LAYOUT_ = C_INT;
    public static jdk.incubator.foreign.MemoryLayout role$LAYOUT() { return role$LAYOUT_; }

    private static final VarHandle role$VH_ = role$LAYOUT_.varHandle(int.class);
    public static java.lang.invoke.VarHandle role$VH() { return role$VH_; }

    private static final MemoryLayout IndexerCallbacks$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("abortQuery"),
        C_POINTER.withName("diagnostic"),
        C_POINTER.withName("enteredMainFile"),
        C_POINTER.withName("ppIncludedFile"),
        C_POINTER.withName("importedASTFile"),
        C_POINTER.withName("startedTranslationUnit"),
        C_POINTER.withName("indexDeclaration"),
        C_POINTER.withName("indexEntityReference")
    );
    public static jdk.incubator.foreign.MemoryLayout IndexerCallbacks$struct$LAYOUT() { return IndexerCallbacks$struct$LAYOUT_; }

    private static final MemoryLayout abortQuery$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout abortQuery$LAYOUT() { return abortQuery$LAYOUT_; }

    private static final VarHandle abortQuery$VH_ = MemoryHandles.asAddressVarHandle(abortQuery$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle abortQuery$VH() { return abortQuery$VH_; }

    private static final MemoryLayout diagnostic$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout diagnostic$LAYOUT() { return diagnostic$LAYOUT_; }

    private static final VarHandle diagnostic$VH_ = MemoryHandles.asAddressVarHandle(diagnostic$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle diagnostic$VH() { return diagnostic$VH_; }

    private static final MemoryLayout enteredMainFile$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout enteredMainFile$LAYOUT() { return enteredMainFile$LAYOUT_; }

    private static final VarHandle enteredMainFile$VH_ = MemoryHandles.asAddressVarHandle(enteredMainFile$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle enteredMainFile$VH() { return enteredMainFile$VH_; }

    private static final MemoryLayout ppIncludedFile$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout ppIncludedFile$LAYOUT() { return ppIncludedFile$LAYOUT_; }

    private static final VarHandle ppIncludedFile$VH_ = MemoryHandles.asAddressVarHandle(ppIncludedFile$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle ppIncludedFile$VH() { return ppIncludedFile$VH_; }

    private static final MemoryLayout importedASTFile$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout importedASTFile$LAYOUT() { return importedASTFile$LAYOUT_; }

    private static final VarHandle importedASTFile$VH_ = MemoryHandles.asAddressVarHandle(importedASTFile$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle importedASTFile$VH() { return importedASTFile$VH_; }

    private static final MemoryLayout startedTranslationUnit$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout startedTranslationUnit$LAYOUT() { return startedTranslationUnit$LAYOUT_; }

    private static final VarHandle startedTranslationUnit$VH_ = MemoryHandles.asAddressVarHandle(startedTranslationUnit$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle startedTranslationUnit$VH() { return startedTranslationUnit$VH_; }

    private static final MemoryLayout indexDeclaration$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout indexDeclaration$LAYOUT() { return indexDeclaration$LAYOUT_; }

    private static final VarHandle indexDeclaration$VH_ = MemoryHandles.asAddressVarHandle(indexDeclaration$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle indexDeclaration$VH() { return indexDeclaration$VH_; }

    private static final MemoryLayout indexEntityReference$LAYOUT_ = C_POINTER;
    public static jdk.incubator.foreign.MemoryLayout indexEntityReference$LAYOUT() { return indexEntityReference$LAYOUT_; }

    private static final VarHandle indexEntityReference$VH_ = MemoryHandles.asAddressVarHandle(indexEntityReference$LAYOUT_.varHandle(long.class));
    public static java.lang.invoke.VarHandle indexEntityReference$VH() { return indexEntityReference$VH_; }

    private static final FunctionDescriptor clang_index_isEntityObjCContainerKind$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_index_isEntityObjCContainerKind$FUNC() { return clang_index_isEntityObjCContainerKind$FUNC_; }

    private static final MethodHandle clang_index_isEntityObjCContainerKind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_isEntityObjCContainerKind",
        "(I)I",
        clang_index_isEntityObjCContainerKind$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_index_isEntityObjCContainerKind$MH() { return clang_index_isEntityObjCContainerKind$MH_; }

    private static final FunctionDescriptor clang_index_getObjCContainerDeclInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_index_getObjCContainerDeclInfo$FUNC() { return clang_index_getObjCContainerDeclInfo$FUNC_; }

    private static final MethodHandle clang_index_getObjCContainerDeclInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getObjCContainerDeclInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getObjCContainerDeclInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_index_getObjCContainerDeclInfo$MH() { return clang_index_getObjCContainerDeclInfo$MH_; }

    private static final FunctionDescriptor clang_index_getObjCInterfaceDeclInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_index_getObjCInterfaceDeclInfo$FUNC() { return clang_index_getObjCInterfaceDeclInfo$FUNC_; }

    private static final MethodHandle clang_index_getObjCInterfaceDeclInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getObjCInterfaceDeclInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getObjCInterfaceDeclInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_index_getObjCInterfaceDeclInfo$MH() { return clang_index_getObjCInterfaceDeclInfo$MH_; }

    private static final FunctionDescriptor clang_index_getObjCCategoryDeclInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_index_getObjCCategoryDeclInfo$FUNC() { return clang_index_getObjCCategoryDeclInfo$FUNC_; }

    private static final MethodHandle clang_index_getObjCCategoryDeclInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getObjCCategoryDeclInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getObjCCategoryDeclInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_index_getObjCCategoryDeclInfo$MH() { return clang_index_getObjCCategoryDeclInfo$MH_; }

    private static final FunctionDescriptor clang_index_getObjCProtocolRefListInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_index_getObjCProtocolRefListInfo$FUNC() { return clang_index_getObjCProtocolRefListInfo$FUNC_; }

    private static final MethodHandle clang_index_getObjCProtocolRefListInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getObjCProtocolRefListInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getObjCProtocolRefListInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_index_getObjCProtocolRefListInfo$MH() { return clang_index_getObjCProtocolRefListInfo$MH_; }

    private static final FunctionDescriptor clang_index_getObjCPropertyDeclInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_index_getObjCPropertyDeclInfo$FUNC() { return clang_index_getObjCPropertyDeclInfo$FUNC_; }

    private static final MethodHandle clang_index_getObjCPropertyDeclInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getObjCPropertyDeclInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getObjCPropertyDeclInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_index_getObjCPropertyDeclInfo$MH() { return clang_index_getObjCPropertyDeclInfo$MH_; }

    private static final FunctionDescriptor clang_index_getIBOutletCollectionAttrInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_index_getIBOutletCollectionAttrInfo$FUNC() { return clang_index_getIBOutletCollectionAttrInfo$FUNC_; }

    private static final MethodHandle clang_index_getIBOutletCollectionAttrInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getIBOutletCollectionAttrInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getIBOutletCollectionAttrInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_index_getIBOutletCollectionAttrInfo$MH() { return clang_index_getIBOutletCollectionAttrInfo$MH_; }

    private static final FunctionDescriptor clang_index_getCXXClassDeclInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_index_getCXXClassDeclInfo$FUNC() { return clang_index_getCXXClassDeclInfo$FUNC_; }

    private static final MethodHandle clang_index_getCXXClassDeclInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getCXXClassDeclInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getCXXClassDeclInfo$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_index_getCXXClassDeclInfo$MH() { return clang_index_getCXXClassDeclInfo$MH_; }

    private static final FunctionDescriptor clang_index_getClientContainer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_index_getClientContainer$FUNC() { return clang_index_getClientContainer$FUNC_; }

    private static final MethodHandle clang_index_getClientContainer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getClientContainer",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getClientContainer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_index_getClientContainer$MH() { return clang_index_getClientContainer$MH_; }

    private static final FunctionDescriptor clang_index_setClientContainer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_index_setClientContainer$FUNC() { return clang_index_setClientContainer$FUNC_; }

    private static final MethodHandle clang_index_setClientContainer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_setClientContainer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_index_setClientContainer$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_index_setClientContainer$MH() { return clang_index_setClientContainer$MH_; }

    private static final FunctionDescriptor clang_index_getClientEntity$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_index_getClientEntity$FUNC() { return clang_index_getClientEntity$FUNC_; }

    private static final MethodHandle clang_index_getClientEntity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_getClientEntity",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_index_getClientEntity$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_index_getClientEntity$MH() { return clang_index_getClientEntity$MH_; }

    private static final FunctionDescriptor clang_index_setClientEntity$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_index_setClientEntity$FUNC() { return clang_index_setClientEntity$FUNC_; }

    private static final MethodHandle clang_index_setClientEntity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_index_setClientEntity",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_index_setClientEntity$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_index_setClientEntity$MH() { return clang_index_setClientEntity$MH_; }

    private static final FunctionDescriptor clang_IndexAction_create$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_IndexAction_create$FUNC() { return clang_IndexAction_create$FUNC_; }

    private static final MethodHandle clang_IndexAction_create$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_IndexAction_create",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        clang_IndexAction_create$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_IndexAction_create$MH() { return clang_IndexAction_create$MH_; }

    private static final FunctionDescriptor clang_IndexAction_dispose$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_IndexAction_dispose$FUNC() { return clang_IndexAction_dispose$FUNC_; }

    private static final MethodHandle clang_IndexAction_dispose$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_IndexAction_dispose",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_IndexAction_dispose$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_IndexAction_dispose$MH() { return clang_IndexAction_dispose$MH_; }

    public static int CXIndexOpt_None() { return (int)0L; }

    public static int CXIndexOpt_SuppressRedundantRefs() { return (int)1L; }

    public static int CXIndexOpt_IndexFunctionLocalSymbols() { return (int)2L; }

    public static int CXIndexOpt_IndexImplicitTemplateInstantiations() { return (int)4L; }

    public static int CXIndexOpt_SuppressWarnings() { return (int)8L; }

    public static int CXIndexOpt_SkipParsedBodiesInSession() { return (int)16L; }

    private static final FunctionDescriptor clang_indexSourceFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_indexSourceFile$FUNC() { return clang_indexSourceFile$FUNC_; }

    private static final MethodHandle clang_indexSourceFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_indexSourceFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        clang_indexSourceFile$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_indexSourceFile$MH() { return clang_indexSourceFile$MH_; }

    private static final FunctionDescriptor clang_indexSourceFileFullArgv$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_indexSourceFileFullArgv$FUNC() { return clang_indexSourceFileFullArgv$FUNC_; }

    private static final MethodHandle clang_indexSourceFileFullArgv$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_indexSourceFileFullArgv",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        clang_indexSourceFileFullArgv$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_indexSourceFileFullArgv$MH() { return clang_indexSourceFileFullArgv$MH_; }

    private static final FunctionDescriptor clang_indexTranslationUnit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_indexTranslationUnit$FUNC() { return clang_indexTranslationUnit$FUNC_; }

    private static final MethodHandle clang_indexTranslationUnit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_indexTranslationUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        clang_indexTranslationUnit$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_indexTranslationUnit$MH() { return clang_indexTranslationUnit$MH_; }

    private static final FunctionDescriptor clang_indexLoc_getFileLocation$FUNC_ = FunctionDescriptor.ofVoid(
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        ),
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_indexLoc_getFileLocation$FUNC() { return clang_indexLoc_getFileLocation$FUNC_; }

    private static final MethodHandle clang_indexLoc_getFileLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_indexLoc_getFileLocation",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        clang_indexLoc_getFileLocation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_indexLoc_getFileLocation$MH() { return clang_indexLoc_getFileLocation$MH_; }

    private static final FunctionDescriptor clang_indexLoc_getCXSourceLocation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
        C_INT.withName("int_data"),
        MemoryLayout.ofPaddingBits(32)
    ),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
            C_INT.withName("int_data"),
            MemoryLayout.ofPaddingBits(32)
        )
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_indexLoc_getCXSourceLocation$FUNC() { return clang_indexLoc_getCXSourceLocation$FUNC_; }

    private static final MethodHandle clang_indexLoc_getCXSourceLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_indexLoc_getCXSourceLocation",
        "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
        clang_indexLoc_getCXSourceLocation$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_indexLoc_getCXSourceLocation$MH() { return clang_indexLoc_getCXSourceLocation$MH_; }

    private static final FunctionDescriptor clang_Type_visitFields$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
        ),
        C_POINTER,
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_visitFields$FUNC() { return clang_Type_visitFields$FUNC_; }

    private static final MethodHandle clang_Type_visitFields$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "clang_Type_visitFields",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        clang_Type_visitFields$FUNC_, false
    );
    public static java.lang.invoke.MethodHandle clang_Type_visitFields$MH() { return clang_Type_visitFields$MH_; }

    private static final FunctionDescriptor clang_Type_visitFields$visitor$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            C_INT.withName("kind"),
            C_INT.withName("xdata"),
            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
        ),
        C_POINTER
    );
    public static jdk.incubator.foreign.FunctionDescriptor clang_Type_visitFields$visitor$FUNC() { return clang_Type_visitFields$visitor$FUNC_; }

    public static int CINDEX_VERSION() { return (int)59L; }

    private static final MemorySegment CINDEX_VERSION_STRING$SEGMENT_CONSTANT_ = CSupport.toCString("0.59");
    public static jdk.incubator.foreign.MemorySegment CINDEX_VERSION_STRING() { return CINDEX_VERSION_STRING$SEGMENT_CONSTANT_; }

}

