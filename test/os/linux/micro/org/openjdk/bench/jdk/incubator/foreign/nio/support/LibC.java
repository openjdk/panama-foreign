// Generated by jbind

package org.openjdk.bench.jdk.incubator.foreign.nio.support;

import jdk.incubator.jbind.core.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.*;

import java.util.function.LongFunction;

public final class LibC {
    private static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {});
    public static final class stat extends Struct<stat> {
        protected stat(MemoryAddress addr) { super(addr); }
        public static final stat at(MemoryAddress addr) { return new stat(addr); }
        public static final stat allocate(LongFunction<MemoryAddress> allocator, int count) {
            return new stat(allocator.apply(sizeof() * count));
        }
        public static final stat allocate(LongFunction<MemoryAddress> allocator) { return allocate(allocator, 1); }
        public final stat offset(int count) { return at(ptr().addOffset(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_LONG.withName("st_dev"),
            C_LONG.withName("st_ino"),
            C_LONG.withName("st_nlink"),
            C_INT.withName("st_mode"),
            C_INT.withName("st_uid"),
            C_INT.withName("st_gid"),
            C_INT.withName("__pad0"),
            C_LONG.withName("st_rdev"),
            C_LONG.withName("st_size"),
            C_LONG.withName("st_blksize"),
            C_LONG.withName("st_blocks"),
            MemoryLayout.ofStruct(
                C_LONG.withName("tv_sec"),
                C_LONG.withName("tv_nsec")
            ).withName("st_atim"),
            MemoryLayout.ofStruct(
                C_LONG.withName("tv_sec"),
                C_LONG.withName("tv_nsec")
            ).withName("st_mtim"),
            MemoryLayout.ofStruct(
                C_LONG.withName("tv_sec"),
                C_LONG.withName("tv_nsec")
            ).withName("st_ctim"),
            MemoryLayout.ofSequence(3, C_LONG).withName("__glibc_reserved")
        ).withName("stat");
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle st_dev$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "st_dev");
        public static final long st_dev$OFFSET = 0L;
        public final MemoryAddress st_dev$ptr() {
            return ptr().addOffset(0L);
        }
        public final long st_dev$get() {
            return (long) st_dev$VH.get(ptr());
        }
        public final void st_dev$set(long value) {
            st_dev$VH.set(ptr(), value);
        }

        public static final VarHandle st_ino$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "st_ino");
        public static final long st_ino$OFFSET = 8L;
        public final MemoryAddress st_ino$ptr() {
            return ptr().addOffset(8L);
        }
        public final long st_ino$get() {
            return (long) st_ino$VH.get(ptr());
        }
        public final void st_ino$set(long value) {
            st_ino$VH.set(ptr(), value);
        }

        public static final VarHandle st_nlink$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "st_nlink");
        public static final long st_nlink$OFFSET = 16L;
        public final MemoryAddress st_nlink$ptr() {
            return ptr().addOffset(16L);
        }
        public final long st_nlink$get() {
            return (long) st_nlink$VH.get(ptr());
        }
        public final void st_nlink$set(long value) {
            st_nlink$VH.set(ptr(), value);
        }

        public static final VarHandle st_mode$VH = RuntimeHelper.fieldHandle(int.class, $LAYOUT, "st_mode");
        public static final long st_mode$OFFSET = 24L;
        public final MemoryAddress st_mode$ptr() {
            return ptr().addOffset(24L);
        }
        public final int st_mode$get() {
            return (int) st_mode$VH.get(ptr());
        }
        public final void st_mode$set(int value) {
            st_mode$VH.set(ptr(), value);
        }

        public static final VarHandle st_uid$VH = RuntimeHelper.fieldHandle(int.class, $LAYOUT, "st_uid");
        public static final long st_uid$OFFSET = 28L;
        public final MemoryAddress st_uid$ptr() {
            return ptr().addOffset(28L);
        }
        public final int st_uid$get() {
            return (int) st_uid$VH.get(ptr());
        }
        public final void st_uid$set(int value) {
            st_uid$VH.set(ptr(), value);
        }

        public static final VarHandle st_gid$VH = RuntimeHelper.fieldHandle(int.class, $LAYOUT, "st_gid");
        public static final long st_gid$OFFSET = 32L;
        public final MemoryAddress st_gid$ptr() {
            return ptr().addOffset(32L);
        }
        public final int st_gid$get() {
            return (int) st_gid$VH.get(ptr());
        }
        public final void st_gid$set(int value) {
            st_gid$VH.set(ptr(), value);
        }

        public static final VarHandle __pad0$VH = RuntimeHelper.fieldHandle(int.class, $LAYOUT, "__pad0");
        public static final long __pad0$OFFSET = 36L;
        public final MemoryAddress __pad0$ptr() {
            return ptr().addOffset(36L);
        }
        public final int __pad0$get() {
            return (int) __pad0$VH.get(ptr());
        }
        public final void __pad0$set(int value) {
            __pad0$VH.set(ptr(), value);
        }

        public static final VarHandle st_rdev$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "st_rdev");
        public static final long st_rdev$OFFSET = 40L;
        public final MemoryAddress st_rdev$ptr() {
            return ptr().addOffset(40L);
        }
        public final long st_rdev$get() {
            return (long) st_rdev$VH.get(ptr());
        }
        public final void st_rdev$set(long value) {
            st_rdev$VH.set(ptr(), value);
        }

        public static final VarHandle st_size$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "st_size");
        public static final long st_size$OFFSET = 48L;
        public final MemoryAddress st_size$ptr() {
            return ptr().addOffset(48L);
        }
        public final long st_size$get() {
            return (long) st_size$VH.get(ptr());
        }
        public final void st_size$set(long value) {
            st_size$VH.set(ptr(), value);
        }

        public static final VarHandle st_blksize$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "st_blksize");
        public static final long st_blksize$OFFSET = 56L;
        public final MemoryAddress st_blksize$ptr() {
            return ptr().addOffset(56L);
        }
        public final long st_blksize$get() {
            return (long) st_blksize$VH.get(ptr());
        }
        public final void st_blksize$set(long value) {
            st_blksize$VH.set(ptr(), value);
        }

        public static final VarHandle st_blocks$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "st_blocks");
        public static final long st_blocks$OFFSET = 64L;
        public final MemoryAddress st_blocks$ptr() {
            return ptr().addOffset(64L);
        }
        public final long st_blocks$get() {
            return (long) st_blocks$VH.get(ptr());
        }
        public final void st_blocks$set(long value) {
            st_blocks$VH.set(ptr(), value);
        }

        public static final long st_atim$OFFSET = 72L;
        public final MemoryAddress st_atim$ptr() {
            return ptr().addOffset(72L);
        }
        public final timespec st_atim$get() {
            return timespec.at(st_atim$ptr());
        }
        public final void st_atim$set(timespec value) {
            timespec.at(st_atim$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final long st_mtim$OFFSET = 88L;
        public final MemoryAddress st_mtim$ptr() {
            return ptr().addOffset(88L);
        }
        public final timespec st_mtim$get() {
            return timespec.at(st_mtim$ptr());
        }
        public final void st_mtim$set(timespec value) {
            timespec.at(st_mtim$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final long st_ctim$OFFSET = 104L;
        public final MemoryAddress st_ctim$ptr() {
            return ptr().addOffset(104L);
        }
        public final timespec st_ctim$get() {
            return timespec.at(st_ctim$ptr());
        }
        public final void st_ctim$set(timespec value) {
            timespec.at(st_ctim$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final VarHandle __glibc_reserved$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "__glibc_reserved");
        public static final long __glibc_reserved$OFFSET = 120L;
        public final MemoryAddress __glibc_reserved$ptr() {
            return ptr().addOffset(120L);
        }
        public final long __glibc_reserved$get(long idx0) {
            return (long) __glibc_reserved$VH.get(ptr(), idx0);
        }
        public final void __glibc_reserved$set(long idx0, long value) {
            __glibc_reserved$VH.set(ptr(), idx0, value);
        }
    }
    public static final class timespec extends Struct<timespec> {
        protected timespec(MemoryAddress addr) { super(addr); }
        public static final timespec at(MemoryAddress addr) { return new timespec(addr); }
        public static final timespec allocate(LongFunction<MemoryAddress> allocator, int count) {
            return new timespec(allocator.apply(sizeof() * count));
        }
        public static final timespec allocate(LongFunction<MemoryAddress> allocator) { return allocate(allocator, 1); }
        public final timespec offset(int count) { return at(ptr().addOffset(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("timespec");
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle tv_sec$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "tv_sec");
        public static final long tv_sec$OFFSET = 0L;
        public final MemoryAddress tv_sec$ptr() {
            return ptr().addOffset(0L);
        }
        public final long tv_sec$get() {
            return (long) tv_sec$VH.get(ptr());
        }
        public final void tv_sec$set(long value) {
            tv_sec$VH.set(ptr(), value);
        }

        public static final VarHandle tv_nsec$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "tv_nsec");
        public static final long tv_nsec$OFFSET = 8L;
        public final MemoryAddress tv_nsec$ptr() {
            return ptr().addOffset(8L);
        }
        public final long tv_nsec$get() {
            return (long) tv_nsec$VH.get(ptr());
        }
        public final void tv_nsec$set(long value) {
            tv_nsec$VH.set(ptr(), value);
        }
    }
    public static final class dirent extends Struct<dirent> {
        protected dirent(MemoryAddress addr) { super(addr); }
        public static final dirent at(MemoryAddress addr) { return new dirent(addr); }
        public static final dirent allocate(LongFunction<MemoryAddress> allocator, int count) {
            return new dirent(allocator.apply(sizeof() * count));
        }
        public static final dirent allocate(LongFunction<MemoryAddress> allocator) { return allocate(allocator, 1); }
        public final dirent offset(int count) { return at(ptr().addOffset(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_LONG.withName("d_ino"),
            C_LONG.withName("d_off"),
            C_SHORT.withName("d_reclen"),
            C_BOOL.withName("d_type"),
            MemoryLayout.ofSequence(256, C_BOOL).withName("d_name"),
            MemoryLayout.ofPaddingBits(40)
        ).withName("dirent");
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle d_ino$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "d_ino");
        public static final long d_ino$OFFSET = 0L;
        public final MemoryAddress d_ino$ptr() {
            return ptr().addOffset(0L);
        }
        public final long d_ino$get() {
            return (long) d_ino$VH.get(ptr());
        }
        public final void d_ino$set(long value) {
            d_ino$VH.set(ptr(), value);
        }

        public static final VarHandle d_off$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "d_off");
        public static final long d_off$OFFSET = 8L;
        public final MemoryAddress d_off$ptr() {
            return ptr().addOffset(8L);
        }
        public final long d_off$get() {
            return (long) d_off$VH.get(ptr());
        }
        public final void d_off$set(long value) {
            d_off$VH.set(ptr(), value);
        }

        public static final VarHandle d_reclen$VH = RuntimeHelper.fieldHandle(short.class, $LAYOUT, "d_reclen");
        public static final long d_reclen$OFFSET = 16L;
        public final MemoryAddress d_reclen$ptr() {
            return ptr().addOffset(16L);
        }
        public final short d_reclen$get() {
            return (short) d_reclen$VH.get(ptr());
        }
        public final void d_reclen$set(short value) {
            d_reclen$VH.set(ptr(), value);
        }

        public static final VarHandle d_type$VH = RuntimeHelper.fieldHandle(byte.class, $LAYOUT, "d_type");
        public static final long d_type$OFFSET = 18L;
        public final MemoryAddress d_type$ptr() {
            return ptr().addOffset(18L);
        }
        public final byte d_type$get() {
            return (byte) d_type$VH.get(ptr());
        }
        public final void d_type$set(byte value) {
            d_type$VH.set(ptr(), value);
        }

        public static final VarHandle d_name$VH = RuntimeHelper.fieldHandle(byte.class, $LAYOUT, "d_name");
        public static final long d_name$OFFSET = 19L;
        public final MemoryAddress d_name$ptr() {
            return ptr().addOffset(19L);
        }
        public final byte d_name$get(long idx0) {
            return (byte) d_name$VH.get(ptr(), idx0);
        }
        public final void d_name$set(long idx0, byte value) {
            d_name$VH.set(ptr(), idx0, value);
        }
    }
    public static final MethodHandle mh___xstat = RuntimeHelper.downcallHandle(
        LIBRARIES, "__xstat",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_INT,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final int __xstat(int __ver, jdk.incubator.foreign.MemoryAddress __filename, jdk.incubator.foreign.MemoryAddress __stat_buf) {
        try {
            return (int) mh___xstat.invokeExact(__ver, __filename, __stat_buf);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_opendir = RuntimeHelper.downcallHandle(
        LIBRARIES, "opendir",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        ), false
    );
    public static final jdk.incubator.foreign.MemoryAddress opendir(jdk.incubator.foreign.MemoryAddress __name) {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_opendir.invokeExact(__name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_closedir = RuntimeHelper.downcallHandle(
        LIBRARIES, "closedir",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        ), false
    );
    public static final int closedir(jdk.incubator.foreign.MemoryAddress __dirp) {
        try {
            return (int) mh_closedir.invokeExact(__dirp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_readdir = RuntimeHelper.downcallHandle(
        LIBRARIES, "readdir",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        ), false
    );
    public static final jdk.incubator.foreign.MemoryAddress readdir(jdk.incubator.foreign.MemoryAddress __dirp) {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_readdir.invokeExact(__dirp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
}

