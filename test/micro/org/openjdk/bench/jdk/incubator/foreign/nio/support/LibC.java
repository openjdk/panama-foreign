// Generated by jbind

package org.openjdk.bench.jdk.incubator.foreign.nio.support;

import jdk.incubator.jbind.core.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.*;

import java.util.function.LongFunction;

public final class LibC {
    private static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {});
    public static final class stat64 extends Struct<stat64> {
        protected stat64(MemoryAddress addr) { super(addr); }
        public static final stat64 at(MemoryAddress addr) { return new stat64(addr); }
        public static final stat64 allocate(LongFunction<MemoryAddress> allocator, int count) {
            return new stat64(allocator.apply(sizeof() * count));
        }
        public static final stat64 allocate(LongFunction<MemoryAddress> allocator) { return allocate(allocator, 1); }
        public final stat64 offset(int count) { return at(ptr().addOffset(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_INT.withName("st_dev"),
            C_SHORT.withName("st_mode"),
            C_SHORT.withName("st_nlink"),
            C_LONG.withName("st_ino"),
            C_INT.withName("st_uid"),
            C_INT.withName("st_gid"),
            C_INT.withName("st_rdev"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofStruct(
                C_LONG.withName("tv_sec"),
                C_LONG.withName("tv_nsec")
            ).withName("st_atimespec"),
            MemoryLayout.ofStruct(
                C_LONG.withName("tv_sec"),
                C_LONG.withName("tv_nsec")
            ).withName("st_mtimespec"),
            MemoryLayout.ofStruct(
                C_LONG.withName("tv_sec"),
                C_LONG.withName("tv_nsec")
            ).withName("st_ctimespec"),
            MemoryLayout.ofStruct(
                C_LONG.withName("tv_sec"),
                C_LONG.withName("tv_nsec")
            ).withName("st_birthtimespec"),
            C_LONG.withName("st_size"),
            C_LONG.withName("st_blocks"),
            C_INT.withName("st_blksize"),
            C_INT.withName("st_flags"),
            C_INT.withName("st_gen"),
            C_INT.withName("st_lspare"),
            MemoryLayout.ofSequence(2, C_LONG).withName("st_qspare")
        ).withName("stat64");
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle st_dev$VH = RuntimeHelper.fieldHandle(int.class, $LAYOUT, "st_dev");
        public final MemoryAddress st_dev$ptr() {
            return ptr().addOffset(0L);
        }
        public final int st_dev$get() {
            return (int) st_dev$VH.get(ptr());
        }
        public final void st_dev$set(int value) {
            st_dev$VH.set(ptr(), value);
        }

        public static final VarHandle st_mode$VH = RuntimeHelper.fieldHandle(short.class, $LAYOUT, "st_mode");
        public final MemoryAddress st_mode$ptr() {
            return ptr().addOffset(4L);
        }
        public final short st_mode$get() {
            return (short) st_mode$VH.get(ptr());
        }
        public final void st_mode$set(short value) {
            st_mode$VH.set(ptr(), value);
        }

        public static final VarHandle st_nlink$VH = RuntimeHelper.fieldHandle(short.class, $LAYOUT, "st_nlink");
        public final MemoryAddress st_nlink$ptr() {
            return ptr().addOffset(6L);
        }
        public final short st_nlink$get() {
            return (short) st_nlink$VH.get(ptr());
        }
        public final void st_nlink$set(short value) {
            st_nlink$VH.set(ptr(), value);
        }

        public static final VarHandle st_ino$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "st_ino");
        public final MemoryAddress st_ino$ptr() {
            return ptr().addOffset(8L);
        }
        public final long st_ino$get() {
            return (long) st_ino$VH.get(ptr());
        }
        public final void st_ino$set(long value) {
            st_ino$VH.set(ptr(), value);
        }

        public static final VarHandle st_uid$VH = RuntimeHelper.fieldHandle(int.class, $LAYOUT, "st_uid");
        public final MemoryAddress st_uid$ptr() {
            return ptr().addOffset(16L);
        }
        public final int st_uid$get() {
            return (int) st_uid$VH.get(ptr());
        }
        public final void st_uid$set(int value) {
            st_uid$VH.set(ptr(), value);
        }

        public static final VarHandle st_gid$VH = RuntimeHelper.fieldHandle(int.class, $LAYOUT, "st_gid");
        public final MemoryAddress st_gid$ptr() {
            return ptr().addOffset(20L);
        }
        public final int st_gid$get() {
            return (int) st_gid$VH.get(ptr());
        }
        public final void st_gid$set(int value) {
            st_gid$VH.set(ptr(), value);
        }

        public static final VarHandle st_rdev$VH = RuntimeHelper.fieldHandle(int.class, $LAYOUT, "st_rdev");
        public final MemoryAddress st_rdev$ptr() {
            return ptr().addOffset(24L);
        }
        public final int st_rdev$get() {
            return (int) st_rdev$VH.get(ptr());
        }
        public final void st_rdev$set(int value) {
            st_rdev$VH.set(ptr(), value);
        }

        public final MemoryAddress st_atimespec$ptr() {
            return ptr().addOffset(32L);
        }
        public final timespec st_atimespec$get() {
            return timespec.at(st_atimespec$ptr());
        }
        public final void st_atimespec$set(timespec value) {
            timespec.at(st_atimespec$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public final MemoryAddress st_mtimespec$ptr() {
            return ptr().addOffset(48L);
        }
        public final timespec st_mtimespec$get() {
            return timespec.at(st_mtimespec$ptr());
        }
        public final void st_mtimespec$set(timespec value) {
            timespec.at(st_mtimespec$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public final MemoryAddress st_ctimespec$ptr() {
            return ptr().addOffset(64L);
        }
        public final timespec st_ctimespec$get() {
            return timespec.at(st_ctimespec$ptr());
        }
        public final void st_ctimespec$set(timespec value) {
            timespec.at(st_ctimespec$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public final MemoryAddress st_birthtimespec$ptr() {
            return ptr().addOffset(80L);
        }
        public final timespec st_birthtimespec$get() {
            return timespec.at(st_birthtimespec$ptr());
        }
        public final void st_birthtimespec$set(timespec value) {
            timespec.at(st_birthtimespec$ptr()).asSegment().copyFrom(value.asSegment());
        }

        public static final VarHandle st_size$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "st_size");
        public final MemoryAddress st_size$ptr() {
            return ptr().addOffset(96L);
        }
        public final long st_size$get() {
            return (long) st_size$VH.get(ptr());
        }
        public final void st_size$set(long value) {
            st_size$VH.set(ptr(), value);
        }

        public static final VarHandle st_blocks$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "st_blocks");
        public final MemoryAddress st_blocks$ptr() {
            return ptr().addOffset(104L);
        }
        public final long st_blocks$get() {
            return (long) st_blocks$VH.get(ptr());
        }
        public final void st_blocks$set(long value) {
            st_blocks$VH.set(ptr(), value);
        }

        public static final VarHandle st_blksize$VH = RuntimeHelper.fieldHandle(int.class, $LAYOUT, "st_blksize");
        public final MemoryAddress st_blksize$ptr() {
            return ptr().addOffset(112L);
        }
        public final int st_blksize$get() {
            return (int) st_blksize$VH.get(ptr());
        }
        public final void st_blksize$set(int value) {
            st_blksize$VH.set(ptr(), value);
        }

        public static final VarHandle st_flags$VH = RuntimeHelper.fieldHandle(int.class, $LAYOUT, "st_flags");
        public final MemoryAddress st_flags$ptr() {
            return ptr().addOffset(116L);
        }
        public final int st_flags$get() {
            return (int) st_flags$VH.get(ptr());
        }
        public final void st_flags$set(int value) {
            st_flags$VH.set(ptr(), value);
        }

        public static final VarHandle st_gen$VH = RuntimeHelper.fieldHandle(int.class, $LAYOUT, "st_gen");
        public final MemoryAddress st_gen$ptr() {
            return ptr().addOffset(120L);
        }
        public final int st_gen$get() {
            return (int) st_gen$VH.get(ptr());
        }
        public final void st_gen$set(int value) {
            st_gen$VH.set(ptr(), value);
        }

        public static final VarHandle st_lspare$VH = RuntimeHelper.fieldHandle(int.class, $LAYOUT, "st_lspare");
        public final MemoryAddress st_lspare$ptr() {
            return ptr().addOffset(124L);
        }
        public final int st_lspare$get() {
            return (int) st_lspare$VH.get(ptr());
        }
        public final void st_lspare$set(int value) {
            st_lspare$VH.set(ptr(), value);
        }

        public static final VarHandle st_qspare$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "st_qspare");
        public final MemoryAddress st_qspare$ptr() {
            return ptr().addOffset(128L);
        }
        public final long st_qspare$get(long idx0) {
            return (long) st_qspare$VH.get(ptr(), idx0);
        }
        public final void st_qspare$set(long idx0, long value) {
            st_qspare$VH.set(ptr(), idx0, value);
        }
    }
    public static final class timespec extends Struct<timespec> {
        protected timespec(MemoryAddress addr) { super(addr); }
        public static final timespec at(MemoryAddress addr) { return new timespec(addr); }
        public static final timespec allocate(LongFunction<MemoryAddress> allocator, int count) {
            return new timespec(allocator.apply(sizeof() * count));
        }
        public static final timespec allocate(LongFunction<MemoryAddress> allocator) { return allocate(allocator, 1); }
        public final timespec offset(int count) { return at(ptr().addOffset(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_LONG.withName("tv_sec"),
            C_LONG.withName("tv_nsec")
        ).withName("timespec");
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle tv_sec$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "tv_sec");
        public final MemoryAddress tv_sec$ptr() {
            return ptr().addOffset(0L);
        }
        public final long tv_sec$get() {
            return (long) tv_sec$VH.get(ptr());
        }
        public final void tv_sec$set(long value) {
            tv_sec$VH.set(ptr(), value);
        }

        public static final VarHandle tv_nsec$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "tv_nsec");
        public final MemoryAddress tv_nsec$ptr() {
            return ptr().addOffset(8L);
        }
        public final long tv_nsec$get() {
            return (long) tv_nsec$VH.get(ptr());
        }
        public final void tv_nsec$set(long value) {
            tv_nsec$VH.set(ptr(), value);
        }
    }
    public static final class _opaque_pthread_mutex_t extends Struct<_opaque_pthread_mutex_t> {
        protected _opaque_pthread_mutex_t(MemoryAddress addr) { super(addr); }
        public static final _opaque_pthread_mutex_t at(MemoryAddress addr) { return new _opaque_pthread_mutex_t(addr); }
        public static final _opaque_pthread_mutex_t allocate(LongFunction<MemoryAddress> allocator, int count) {
            return new _opaque_pthread_mutex_t(allocator.apply(sizeof() * count));
        }
        public static final _opaque_pthread_mutex_t allocate(LongFunction<MemoryAddress> allocator) { return allocate(allocator, 1); }
        public final _opaque_pthread_mutex_t offset(int count) { return at(ptr().addOffset(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_LONG.withName("__sig"),
            MemoryLayout.ofSequence(56, C_BOOL).withName("__opaque")
        ).withName("_opaque_pthread_mutex_t");
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle __sig$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "__sig");
        public final MemoryAddress __sig$ptr() {
            return ptr().addOffset(0L);
        }
        public final long __sig$get() {
            return (long) __sig$VH.get(ptr());
        }
        public final void __sig$set(long value) {
            __sig$VH.set(ptr(), value);
        }

        public static final VarHandle __opaque$VH = RuntimeHelper.fieldHandle(byte.class, $LAYOUT, "__opaque");
        public final MemoryAddress __opaque$ptr() {
            return ptr().addOffset(8L);
        }
        public final byte __opaque$get(long idx0) {
            return (byte) __opaque$VH.get(ptr(), idx0);
        }
        public final void __opaque$set(long idx0, byte value) {
            __opaque$VH.set(ptr(), idx0, value);
        }
    }
    public static final class dirent extends Struct<dirent> {
        protected dirent(MemoryAddress addr) { super(addr); }
        public static final dirent at(MemoryAddress addr) { return new dirent(addr); }
        public static final dirent allocate(LongFunction<MemoryAddress> allocator, int count) {
            return new dirent(allocator.apply(sizeof() * count));
        }
        public static final dirent allocate(LongFunction<MemoryAddress> allocator) { return allocate(allocator, 1); }
        public final dirent offset(int count) { return at(ptr().addOffset(sizeof() * count)); }

        public static final GroupLayout $LAYOUT = MemoryLayout.ofStruct(
            C_LONG.withName("d_ino"),
            C_LONG.withName("d_seekoff"),
            C_SHORT.withName("d_reclen"),
            C_SHORT.withName("d_namlen"),
            C_BOOL.withName("d_type"),
            MemoryLayout.ofSequence(1024, C_BOOL).withName("d_name"),
            MemoryLayout.ofPaddingBits(24)
        ).withName("dirent");
        public static final long sizeof() { return $LAYOUT.byteSize(); }
        public static final long offsetof(String fieldName) { return $LAYOUT.byteOffset(MemoryLayout.PathElement.groupElement(fieldName)); }
        @Override
        public final GroupLayout getLayout() { return $LAYOUT; }

        public static final VarHandle d_ino$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "d_ino");
        public final MemoryAddress d_ino$ptr() {
            return ptr().addOffset(0L);
        }
        public final long d_ino$get() {
            return (long) d_ino$VH.get(ptr());
        }
        public final void d_ino$set(long value) {
            d_ino$VH.set(ptr(), value);
        }

        public static final VarHandle d_seekoff$VH = RuntimeHelper.fieldHandle(long.class, $LAYOUT, "d_seekoff");
        public final MemoryAddress d_seekoff$ptr() {
            return ptr().addOffset(8L);
        }
        public final long d_seekoff$get() {
            return (long) d_seekoff$VH.get(ptr());
        }
        public final void d_seekoff$set(long value) {
            d_seekoff$VH.set(ptr(), value);
        }

        public static final VarHandle d_reclen$VH = RuntimeHelper.fieldHandle(short.class, $LAYOUT, "d_reclen");
        public final MemoryAddress d_reclen$ptr() {
            return ptr().addOffset(16L);
        }
        public final short d_reclen$get() {
            return (short) d_reclen$VH.get(ptr());
        }
        public final void d_reclen$set(short value) {
            d_reclen$VH.set(ptr(), value);
        }

        public static final VarHandle d_namlen$VH = RuntimeHelper.fieldHandle(short.class, $LAYOUT, "d_namlen");
        public final MemoryAddress d_namlen$ptr() {
            return ptr().addOffset(18L);
        }
        public final short d_namlen$get() {
            return (short) d_namlen$VH.get(ptr());
        }
        public final void d_namlen$set(short value) {
            d_namlen$VH.set(ptr(), value);
        }

        public static final VarHandle d_type$VH = RuntimeHelper.fieldHandle(byte.class, $LAYOUT, "d_type");
        public final MemoryAddress d_type$ptr() {
            return ptr().addOffset(20L);
        }
        public final byte d_type$get() {
            return (byte) d_type$VH.get(ptr());
        }
        public final void d_type$set(byte value) {
            d_type$VH.set(ptr(), value);
        }

        public static final VarHandle d_name$VH = RuntimeHelper.fieldHandle(byte.class, $LAYOUT, "d_name");
        public final MemoryAddress d_name$ptr() {
            return ptr().addOffset(21L);
        }
        public final byte d_name$get(long idx0) {
            return (byte) d_name$VH.get(ptr(), idx0);
        }
        public final void d_name$set(long idx0, byte value) {
            d_name$VH.set(ptr(), idx0, value);
        }
    }
    public static final MethodHandle mh_stat64 = RuntimeHelper.downcallHandle(
        LIBRARIES, "stat64",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
        ), false
    );
    public static final int stat64(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (int) mh_stat64.invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_closedir = RuntimeHelper.downcallHandle(
        LIBRARIES, "closedir",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FunctionDescriptor.of(C_INT,
            C_POINTER
        ), false
    );
    public static final int closedir(jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int) mh_closedir.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_opendir = RuntimeHelper.downcallHandle(
        LIBRARIES, "opendir$INODE64",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        ), false
    );
    public static final jdk.incubator.foreign.MemoryAddress opendir(jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_opendir.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static final MethodHandle mh_readdir = RuntimeHelper.downcallHandle(
        LIBRARIES, "readdir$INODE64",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        FunctionDescriptor.of(C_POINTER,
            C_POINTER
        ), false
    );
    public static final jdk.incubator.foreign.MemoryAddress readdir(jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh_readdir.invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
}

